//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbattr_self
{


    
    /// <summary>
    /// 201100_等级_类型:1_是否玩家独有:1
    /// </summary>
    public int level;


    
    /// <summary>
    /// 201200_经验_类型:1_是否玩家独有:1
    /// </summary>
    public int exp;


    
    /// <summary>
    /// 201220_经验获取加成_类型:2_是否玩家独有:1
    /// </summary>
    public int expRatios;


    
    /// <summary>
    /// 201300_金币_类型:1_是否玩家独有:1
    /// </summary>
    public int gold;


    
    /// <summary>
    /// 201320_金币拾取加成_类型:2_是否玩家独有:1
    /// </summary>
    public int goldRatios;


    
    /// <summary>
    /// 201400_图纸_类型:1_是否玩家独有:1
    /// </summary>
    public int paper;


    
    /// <summary>
    /// 201420_图纸掉率加成_类型:2_是否玩家独有:1
    /// </summary>
    public int paperRatios;


    
    /// <summary>
    /// 201500_装备_类型:1_是否玩家独有:1
    /// </summary>
    public int equip;


    
    /// <summary>
    /// 201520_装备掉率加成_类型:2_是否玩家独有:1
    /// </summary>
    public int equipRatios;


    
    /// <summary>
    /// 201600_拾取范围加成_类型:2_是否玩家独有:1
    /// </summary>
    public int pickUpRadiusRatios;


    
    /// <summary>
    /// 201700_杀敌数_类型:1_是否玩家独有:1
    /// </summary>
    public int killEnemy;


    
    /// <summary>
    /// 202000_生命值_类型:1_是否玩家独有:0
    /// </summary>
    public int maxHp;


    
    /// <summary>
    /// 202010_局外生命值_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultMaxHp;


    
    /// <summary>
    /// 202020_生命值加成_类型:2_是否玩家独有:0
    /// </summary>
    public int hpRatios;


    
    /// <summary>
    /// 202030_生命值固定加成_类型:1_是否玩家独有:0
    /// </summary>
    public int hpAdd;


    
    /// <summary>
    /// 202040_当前生命万分比_类型:2_是否玩家独有:0
    /// </summary>
    public int curHpRatios;


    
    /// <summary>
    /// 202100_生命恢复_类型:1_是否玩家独有:0
    /// </summary>
    public int hpRecovery;


    
    /// <summary>
    /// 202110_局外生命恢复_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultHpRecovery;


    
    /// <summary>
    /// 202120_生命恢复加成_类型:2_是否玩家独有:0
    /// </summary>
    public int hpRecoveryRatios;


    
    /// <summary>
    /// 202130_生命恢复固定加成_类型:1_是否玩家独有:0
    /// </summary>
    public int hpRecoveryAdd;


    
    /// <summary>
    /// 202140_道具恢复加成_类型:2_是否玩家独有:1
    /// </summary>
    public int propsRecoveryRatios;


    
    /// <summary>
    /// 202150_道具恢复固定加成_类型:1_是否玩家独有:1
    /// </summary>
    public int propsRecoveryAdd;


    
    /// <summary>
    /// 203000_攻击力_类型:1_是否玩家独有:0
    /// </summary>
    public int atk;


    
    /// <summary>
    /// 203010_局外攻击力_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultAtk;


    
    /// <summary>
    /// 203020_攻击力加成_类型:2_是否玩家独有:0
    /// </summary>
    public int atkRatios;


    
    /// <summary>
    /// 203030_攻击力固定加成_类型:1_是否玩家独有:0
    /// </summary>
    public int atkAdd;


    
    /// <summary>
    /// 204000_复活次数_类型:1_是否玩家独有:0
    /// </summary>
    public int rebirthCount;


    
    /// <summary>
    /// 204010_复活次数小恶魔_类型:1_是否玩家独有:0
    /// </summary>
    public int rebirthCount1;


    
    /// <summary>
    /// 205000_暴击率_类型:2_是否玩家独有:0
    /// </summary>
    public int critical;


    
    /// <summary>
    /// 205010_临时暴击率_类型:2_是否玩家独有:0
    /// </summary>
    public int tmpCritical;


    
    /// <summary>
    /// 205100_暴击伤害率_类型:2_是否玩家独有:0
    /// </summary>
    public int criticalDamageRatios;


    
    /// <summary>
    /// 206120_伤害加成_类型:2_是否玩家独有:0
    /// </summary>
    public int damageRatios;


    
    /// <summary>
    /// 206130_伤害固定加成_类型:1_是否玩家独有:0
    /// </summary>
    public int damageAdd;


    
    /// <summary>
    /// 206220_伤害减免_类型:2_是否玩家独有:0
    /// </summary>
    public int reduceHurtRatios;


    
    /// <summary>
    /// 206230_伤害固定减免_类型:1_是否玩家独有:0
    /// </summary>
    public int reduceHurtAdd;


    
    /// <summary>
    /// 206240_弹幕伤害减免_类型:2_是否玩家独有:0
    /// </summary>
    public int reduceBulletRatios;


    
    /// <summary>
    /// 206250_受到玩家伤害变更_类型:2_是否玩家独有:0
    /// </summary>
    public int changedFromPlayerDamage;


    
    /// <summary>
    /// 207000_移动速度_类型:1_是否玩家独有:0
    /// </summary>
    public int maxMoveSpeed;


    
    /// <summary>
    /// 207010_局外移动速度_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultMaxMoveSpeed;


    
    /// <summary>
    /// 207020_移动速度加成_类型:2_是否玩家独有:0
    /// </summary>
    public int maxMoveSpeedRatios;


    
    /// <summary>
    /// 207030_移动速度固定加成_类型:_是否玩家独有:0
    /// </summary>
    public int maxMoveSpeedAdd;


    
    /// <summary>
    /// 207100_速度恢复时间(0到最大)_类型:1_是否玩家独有:0
    /// </summary>
    public int speedRecoveryTime;


    
    /// <summary>
    /// 208000_角色质量_类型:1_是否玩家独有:0
    /// </summary>
    public int mass;


    
    /// <summary>
    /// 208010_局外角色质量_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultMass;


    
    /// <summary>
    /// 208020_质量加成_类型:2_是否玩家独有:0
    /// </summary>
    public int massRatios;


    
    /// <summary>
    /// 209000_角色推力_类型:1_是否玩家独有:0
    /// </summary>
    public int pushForce;


    
    /// <summary>
    /// 209010_局外角色推力_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultPushForce;


    
    /// <summary>
    /// 209020_推力加成_类型:2_是否玩家独有:0
    /// </summary>
    public int pushForceRatios;


    
    /// <summary>
    /// 209030_推力固定加成_类型:_是否玩家独有:0
    /// </summary>
    public int pushForceAdd;


    
    /// <summary>
    /// 210000_击退减免_类型:2_是否玩家独有:0
    /// </summary>
    public int reduceHitBackRatios;


    
    /// <summary>
    /// 211000_闪避率_类型:2_是否玩家独有:0
    /// </summary>
    public int dodge;


    
    /// <summary>
    /// 212000_抵挡层数_类型:1_是否玩家独有:0
    /// </summary>
    public int shieldCount;


    
    /// <summary>
    /// 213000_局外技能冷却减免_类型:2_是否玩家独有:0
    /// </summary>
    public int defaultcoolDown;


    
    /// <summary>
    /// 214000_技能免费购买次数_类型:1_是否玩家独有:1
    /// </summary>
    public int skillFreeBuyCount;


    
    /// <summary>
    /// 214100_技能购买价格万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int buySkillRatios;


    
    /// <summary>
    /// 214200_刷新商店价格万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int refreshShopRatios;


    
    /// <summary>
    /// 214300_技能商店免费刷新次数_类型:1_是否玩家独有:1
    /// </summary>
    public int skillRefreshCount;


    
    /// <summary>
    /// 214400_蓝色技能权重提升万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int skillWeightIncrease1;


    
    /// <summary>
    /// 214500_紫色技能权重提升万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int skillWeightIncrease2;


    
    /// <summary>
    /// 214600_金色技能权重提升万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int skillWeightIncrease3;


    
    /// <summary>
    /// 214700_临时免费刷新次数_类型:1_是否玩家独有:1
    /// </summary>
    public int skillTempRefreshCount;


    
    /// <summary>
    /// 215000_局外弹幕范围加成_类型:2_是否玩家独有:0
    /// </summary>
    public int defaultBulletRangeRatios;


    
    /// <summary>
    /// 218100_撞击伤害加成_类型:2_是否玩家独有:0
    /// </summary>
    public int collideDamageRatios;


    
    /// <summary>
    /// 218200_连续撞击伤害加成_类型:2_是否玩家独有:0
    /// </summary>
    public int continuousCollideDamageRatios;


    
    /// <summary>
    /// 219100_超级推力概率_类型:2_是否玩家独有:1
    /// </summary>
    public int superPushForceChance;


    
    /// <summary>
    /// 219200_极限推力概率_类型:2_是否玩家独有:1
    /// </summary>
    public int maxPushForceChance;


    
    /// <summary>
    /// 220100_对普通怪物伤害加成_类型:2_是否玩家独有:1
    /// </summary>
    public int normalMonsterDamageRatios;


    
    /// <summary>
    /// 220200_对稀有怪物伤害加成_类型:2_是否玩家独有:1
    /// </summary>
    public int specialMonsterDamageRatios;


    
    /// <summary>
    /// 220300_对boss伤害加成_类型:2_是否玩家独有:1
    /// </summary>
    public int bossMonsterDamageRatios;


    
    /// <summary>
    /// 221100_武器技能额外次数_类型:1_是否玩家独有:1
    /// </summary>
    public int weaponSkillExtraCount;


    
    /// <summary>
    /// 222100_体型大小_类型:2_是否玩家独有:0
    /// </summary>
    public int scaleRatios;


    //----------------------Read------------------------
    

    if (id == 201100)
        return playerData.playerData.level;
    

    if (id == 201200)
        return playerData.playerData.exp;
    

    if (id == 201220)
        return playerData.playerData.expRatios;
    

    if (id == 201300)
        return playerData.playerData.gold;
    

    if (id == 201320)
        return playerData.playerData.goldRatios;
    

    if (id == 201400)
        return playerData.playerData.paper;
    

    if (id == 201420)
        return playerData.playerData.paperRatios;
    

    if (id == 201500)
        return playerData.playerData.equip;
    

    if (id == 201520)
        return playerData.playerData.equipRatios;
    

    if (id == 201600)
        return playerData.playerData.pickUpRadiusRatios;
    

    if (id == 201700)
        return playerData.playerData.killEnemy;
    
    if (id == 202000)
        return chaStats.chaProperty.maxHp;
    
    if (id == 202010)
        return chaStats.chaProperty.defaultMaxHp;
    
    if (id == 202020)
        return chaStats.chaProperty.hpRatios;
    
    if (id == 202030)
        return chaStats.chaProperty.hpAdd;
    
    if (id == 202040)
        return chaStats.chaProperty.curHpRatios;
    
    if (id == 202100)
        return chaStats.chaProperty.hpRecovery;
    
    if (id == 202110)
        return chaStats.chaProperty.defaultHpRecovery;
    
    if (id == 202120)
        return chaStats.chaProperty.hpRecoveryRatios;
    
    if (id == 202130)
        return chaStats.chaProperty.hpRecoveryAdd;
    

    if (id == 202140)
        return playerData.playerData.propsRecoveryRatios;
    

    if (id == 202150)
        return playerData.playerData.propsRecoveryAdd;
    
    if (id == 203000)
        return chaStats.chaProperty.atk;
    
    if (id == 203010)
        return chaStats.chaProperty.defaultAtk;
    
    if (id == 203020)
        return chaStats.chaProperty.atkRatios;
    
    if (id == 203030)
        return chaStats.chaProperty.atkAdd;
    
    if (id == 204000)
        return chaStats.chaProperty.rebirthCount;
    
    if (id == 204010)
        return chaStats.chaProperty.rebirthCount1;
    
    if (id == 205000)
        return chaStats.chaProperty.critical;
    
    if (id == 205010)
        return chaStats.chaProperty.tmpCritical;
    
    if (id == 205100)
        return chaStats.chaProperty.criticalDamageRatios;
    
    if (id == 206120)
        return chaStats.chaProperty.damageRatios;
    
    if (id == 206130)
        return chaStats.chaProperty.damageAdd;
    
    if (id == 206220)
        return chaStats.chaProperty.reduceHurtRatios;
    
    if (id == 206230)
        return chaStats.chaProperty.reduceHurtAdd;
    
    if (id == 206240)
        return chaStats.chaProperty.reduceBulletRatios;
    
    if (id == 206250)
        return chaStats.chaProperty.changedFromPlayerDamage;
    
    if (id == 207000)
        return chaStats.chaProperty.maxMoveSpeed;
    
    if (id == 207010)
        return chaStats.chaProperty.defaultMaxMoveSpeed;
    
    if (id == 207020)
        return chaStats.chaProperty.maxMoveSpeedRatios;
    
    if (id == 207030)
        return chaStats.chaProperty.maxMoveSpeedAdd;
    
    if (id == 207100)
        return chaStats.chaProperty.speedRecoveryTime;
    
    if (id == 208000)
        return chaStats.chaProperty.mass;
    
    if (id == 208010)
        return chaStats.chaProperty.defaultMass;
    
    if (id == 208020)
        return chaStats.chaProperty.massRatios;
    
    if (id == 209000)
        return chaStats.chaProperty.pushForce;
    
    if (id == 209010)
        return chaStats.chaProperty.defaultPushForce;
    
    if (id == 209020)
        return chaStats.chaProperty.pushForceRatios;
    
    if (id == 209030)
        return chaStats.chaProperty.pushForceAdd;
    
    if (id == 210000)
        return chaStats.chaProperty.reduceHitBackRatios;
    
    if (id == 211000)
        return chaStats.chaProperty.dodge;
    
    if (id == 212000)
        return chaStats.chaProperty.shieldCount;
    
    if (id == 213000)
        return chaStats.chaProperty.defaultcoolDown;
    

    if (id == 214000)
        return playerData.playerData.skillFreeBuyCount;
    

    if (id == 214100)
        return playerData.playerData.buySkillRatios;
    

    if (id == 214200)
        return playerData.playerData.refreshShopRatios;
    

    if (id == 214300)
        return playerData.playerData.skillRefreshCount;
    

    if (id == 214400)
        return playerData.playerData.skillWeightIncrease1;
    

    if (id == 214500)
        return playerData.playerData.skillWeightIncrease2;
    

    if (id == 214600)
        return playerData.playerData.skillWeightIncrease3;
    

    if (id == 214700)
        return playerData.playerData.skillTempRefreshCount;
    
    if (id == 215000)
        return chaStats.chaProperty.defaultBulletRangeRatios;
    
    if (id == 218100)
        return chaStats.chaProperty.collideDamageRatios;
    
    if (id == 218200)
        return chaStats.chaProperty.continuousCollideDamageRatios;
    

    if (id == 219100)
        return playerData.playerData.superPushForceChance;
    

    if (id == 219200)
        return playerData.playerData.maxPushForceChance;
    

    if (id == 220100)
        return playerData.playerData.normalMonsterDamageRatios;
    

    if (id == 220200)
        return playerData.playerData.specialMonsterDamageRatios;
    

    if (id == 220300)
        return playerData.playerData.bossMonsterDamageRatios;
    

    if (id == 221100)
        return playerData.playerData.weaponSkillExtraCount;
    
    if (id == 222100)
        return chaStats.chaProperty.scaleRatios;


    //----------------------Write------------------------
    

    if (id == 201100)
    {
        playerData.playerData.level += value;
    } 

    

    if (id == 201200)
    {
        playerData.playerData.exp += value;
    } 

    

    if (id == 201220)
    {
        playerData.playerData.expRatios += value;
    } 

    

    if (id == 201300)
    {
        playerData.playerData.gold += value;
    } 

    

    if (id == 201320)
    {
        playerData.playerData.goldRatios += value;
    } 

    

    if (id == 201400)
    {
        playerData.playerData.paper += value;
    } 

    

    if (id == 201420)
    {
        playerData.playerData.paperRatios += value;
    } 

    

    if (id == 201500)
    {
        playerData.playerData.equip += value;
    } 

    

    if (id == 201520)
    {
        playerData.playerData.equipRatios += value;
    } 

    

    if (id == 201600)
    {
        playerData.playerData.pickUpRadiusRatios += value;
    } 

    

    if (id == 201700)
    {
        playerData.playerData.killEnemy += value;
    } 

    
    if (id == 202000)
    {
        chaStats.chaProperty.maxHp += value;
    }

    
    if (id == 202010)
    {
        chaStats.chaProperty.defaultMaxHp += value;
    }

    
    if (id == 202020)
    {
        chaStats.chaProperty.hpRatios += value;
    }

    
    if (id == 202030)
    {
        chaStats.chaProperty.hpAdd += value;
    }

    
    if (id == 202040)
    {
        chaStats.chaProperty.curHpRatios += value;
    }

    
    if (id == 202100)
    {
        chaStats.chaProperty.hpRecovery += value;
    }

    
    if (id == 202110)
    {
        chaStats.chaProperty.defaultHpRecovery += value;
    }

    
    if (id == 202120)
    {
        chaStats.chaProperty.hpRecoveryRatios += value;
    }

    
    if (id == 202130)
    {
        chaStats.chaProperty.hpRecoveryAdd += value;
    }

    

    if (id == 202140)
    {
        playerData.playerData.propsRecoveryRatios += value;
    } 

    

    if (id == 202150)
    {
        playerData.playerData.propsRecoveryAdd += value;
    } 

    
    if (id == 203000)
    {
        chaStats.chaProperty.atk += value;
    }

    
    if (id == 203010)
    {
        chaStats.chaProperty.defaultAtk += value;
    }

    
    if (id == 203020)
    {
        chaStats.chaProperty.atkRatios += value;
    }

    
    if (id == 203030)
    {
        chaStats.chaProperty.atkAdd += value;
    }

    
    if (id == 204000)
    {
        chaStats.chaProperty.rebirthCount += value;
    }

    
    if (id == 204010)
    {
        chaStats.chaProperty.rebirthCount1 += value;
    }

    
    if (id == 205000)
    {
        chaStats.chaProperty.critical += value;
    }

    
    if (id == 205010)
    {
        chaStats.chaProperty.tmpCritical += value;
    }

    
    if (id == 205100)
    {
        chaStats.chaProperty.criticalDamageRatios += value;
    }

    
    if (id == 206120)
    {
        chaStats.chaProperty.damageRatios += value;
    }

    
    if (id == 206130)
    {
        chaStats.chaProperty.damageAdd += value;
    }

    
    if (id == 206220)
    {
        chaStats.chaProperty.reduceHurtRatios += value;
    }

    
    if (id == 206230)
    {
        chaStats.chaProperty.reduceHurtAdd += value;
    }

    
    if (id == 206240)
    {
        chaStats.chaProperty.reduceBulletRatios += value;
    }

    
    if (id == 206250)
    {
        chaStats.chaProperty.changedFromPlayerDamage += value;
    }

    
    if (id == 207000)
    {
        chaStats.chaProperty.maxMoveSpeed += value;
    }

    
    if (id == 207010)
    {
        chaStats.chaProperty.defaultMaxMoveSpeed += value;
    }

    
    if (id == 207020)
    {
        chaStats.chaProperty.maxMoveSpeedRatios += value;
    }

    
    if (id == 207030)
    {
        chaStats.chaProperty.maxMoveSpeedAdd += value;
    }

    
    if (id == 207100)
    {
        chaStats.chaProperty.speedRecoveryTime += value;
    }

    
    if (id == 208000)
    {
        chaStats.chaProperty.mass += value;
    }

    
    if (id == 208010)
    {
        chaStats.chaProperty.defaultMass += value;
    }

    
    if (id == 208020)
    {
        chaStats.chaProperty.massRatios += value;
    }

    
    if (id == 209000)
    {
        chaStats.chaProperty.pushForce += value;
    }

    
    if (id == 209010)
    {
        chaStats.chaProperty.defaultPushForce += value;
    }

    
    if (id == 209020)
    {
        chaStats.chaProperty.pushForceRatios += value;
    }

    
    if (id == 209030)
    {
        chaStats.chaProperty.pushForceAdd += value;
    }

    
    if (id == 210000)
    {
        chaStats.chaProperty.reduceHitBackRatios += value;
    }

    
    if (id == 211000)
    {
        chaStats.chaProperty.dodge += value;
    }

    
    if (id == 212000)
    {
        chaStats.chaProperty.shieldCount += value;
    }

    
    if (id == 213000)
    {
        chaStats.chaProperty.defaultcoolDown += value;
    }

    

    if (id == 214000)
    {
        playerData.playerData.skillFreeBuyCount += value;
    } 

    

    if (id == 214100)
    {
        playerData.playerData.buySkillRatios += value;
    } 

    

    if (id == 214200)
    {
        playerData.playerData.refreshShopRatios += value;
    } 

    

    if (id == 214300)
    {
        playerData.playerData.skillRefreshCount += value;
    } 

    

    if (id == 214400)
    {
        playerData.playerData.skillWeightIncrease1 += value;
    } 

    

    if (id == 214500)
    {
        playerData.playerData.skillWeightIncrease2 += value;
    } 

    

    if (id == 214600)
    {
        playerData.playerData.skillWeightIncrease3 += value;
    } 

    

    if (id == 214700)
    {
        playerData.playerData.skillTempRefreshCount += value;
    } 

    
    if (id == 215000)
    {
        chaStats.chaProperty.defaultBulletRangeRatios += value;
    }

    
    if (id == 218100)
    {
        chaStats.chaProperty.collideDamageRatios += value;
    }

    
    if (id == 218200)
    {
        chaStats.chaProperty.continuousCollideDamageRatios += value;
    }

    

    if (id == 219100)
    {
        playerData.playerData.superPushForceChance += value;
    } 

    

    if (id == 219200)
    {
        playerData.playerData.maxPushForceChance += value;
    } 

    

    if (id == 220100)
    {
        playerData.playerData.normalMonsterDamageRatios += value;
    } 

    

    if (id == 220200)
    {
        playerData.playerData.specialMonsterDamageRatios += value;
    } 

    

    if (id == 220300)
    {
        playerData.playerData.bossMonsterDamageRatios += value;
    } 

    

    if (id == 221100)
    {
        playerData.playerData.weaponSkillExtraCount += value;
    } 

    
    if (id == 222100)
    {
        chaStats.chaProperty.scaleRatios += value;
    }

        //----------------------参数面板------------------------
          
        

        parasItemsList0[0].SetInputTxt(playerData.playerData.level.ToString());
        

        parasItemsList0[1].SetInputTxt(playerData.playerData.exp.ToString());
        

        parasItemsList0[2].SetInputTxt(playerData.playerData.expRatios.ToString());
        

        parasItemsList0[3].SetInputTxt(playerData.playerData.gold.ToString());
        

        parasItemsList0[4].SetInputTxt(playerData.playerData.goldRatios.ToString());
        

        parasItemsList0[5].SetInputTxt(playerData.playerData.paper.ToString());
        

        parasItemsList0[6].SetInputTxt(playerData.playerData.paperRatios.ToString());
        

        parasItemsList0[7].SetInputTxt(playerData.playerData.equip.ToString());
        

        parasItemsList0[8].SetInputTxt(playerData.playerData.equipRatios.ToString());
        

        parasItemsList0[9].SetInputTxt(playerData.playerData.pickUpRadiusRatios.ToString());
        

        parasItemsList0[10].SetInputTxt(playerData.playerData.killEnemy.ToString());
        
        parasItemsList0[11].SetInputTxt(chaStats.chaProperty.maxHp.ToString());
        
        parasItemsList0[12].SetInputTxt(chaStats.chaProperty.defaultMaxHp.ToString());
        
        parasItemsList0[13].SetInputTxt(chaStats.chaProperty.hpRatios.ToString());
        
        parasItemsList0[14].SetInputTxt(chaStats.chaProperty.hpAdd.ToString());
        
        parasItemsList0[15].SetInputTxt(chaStats.chaProperty.curHpRatios.ToString());
        
        parasItemsList0[16].SetInputTxt(chaStats.chaProperty.hpRecovery.ToString());
        
        parasItemsList0[17].SetInputTxt(chaStats.chaProperty.defaultHpRecovery.ToString());
        
        parasItemsList0[18].SetInputTxt(chaStats.chaProperty.hpRecoveryRatios.ToString());
        
        parasItemsList0[19].SetInputTxt(chaStats.chaProperty.hpRecoveryAdd.ToString());
        

        parasItemsList0[20].SetInputTxt(playerData.playerData.propsRecoveryRatios.ToString());
        

        parasItemsList0[21].SetInputTxt(playerData.playerData.propsRecoveryAdd.ToString());
        
        parasItemsList0[22].SetInputTxt(chaStats.chaProperty.atk.ToString());
        
        parasItemsList0[23].SetInputTxt(chaStats.chaProperty.defaultAtk.ToString());
        
        parasItemsList0[24].SetInputTxt(chaStats.chaProperty.atkRatios.ToString());
        
        parasItemsList0[25].SetInputTxt(chaStats.chaProperty.atkAdd.ToString());
        
        parasItemsList0[26].SetInputTxt(chaStats.chaProperty.rebirthCount.ToString());
        
        parasItemsList0[27].SetInputTxt(chaStats.chaProperty.rebirthCount1.ToString());
        
        parasItemsList0[28].SetInputTxt(chaStats.chaProperty.critical.ToString());
        
        parasItemsList0[29].SetInputTxt(chaStats.chaProperty.tmpCritical.ToString());
        
        parasItemsList0[30].SetInputTxt(chaStats.chaProperty.criticalDamageRatios.ToString());
        
        parasItemsList0[31].SetInputTxt(chaStats.chaProperty.damageRatios.ToString());
        
        parasItemsList0[32].SetInputTxt(chaStats.chaProperty.damageAdd.ToString());
        
        parasItemsList0[33].SetInputTxt(chaStats.chaProperty.reduceHurtRatios.ToString());
        
        parasItemsList0[34].SetInputTxt(chaStats.chaProperty.reduceHurtAdd.ToString());
        
        parasItemsList0[35].SetInputTxt(chaStats.chaProperty.reduceBulletRatios.ToString());
        
        parasItemsList0[36].SetInputTxt(chaStats.chaProperty.changedFromPlayerDamage.ToString());
        
        parasItemsList0[37].SetInputTxt(chaStats.chaProperty.maxMoveSpeed.ToString());
        
        parasItemsList0[38].SetInputTxt(chaStats.chaProperty.defaultMaxMoveSpeed.ToString());
        
        parasItemsList0[39].SetInputTxt(chaStats.chaProperty.maxMoveSpeedRatios.ToString());
        
        parasItemsList0[40].SetInputTxt(chaStats.chaProperty.maxMoveSpeedAdd.ToString());
        
        parasItemsList0[41].SetInputTxt(chaStats.chaProperty.speedRecoveryTime.ToString());
        
        parasItemsList0[42].SetInputTxt(chaStats.chaProperty.mass.ToString());
        
        parasItemsList0[43].SetInputTxt(chaStats.chaProperty.defaultMass.ToString());
        
        parasItemsList0[44].SetInputTxt(chaStats.chaProperty.massRatios.ToString());
        
        parasItemsList0[45].SetInputTxt(chaStats.chaProperty.pushForce.ToString());
        
        parasItemsList0[46].SetInputTxt(chaStats.chaProperty.defaultPushForce.ToString());
        
        parasItemsList0[47].SetInputTxt(chaStats.chaProperty.pushForceRatios.ToString());
        
        parasItemsList0[48].SetInputTxt(chaStats.chaProperty.pushForceAdd.ToString());
        
        parasItemsList0[49].SetInputTxt(chaStats.chaProperty.reduceHitBackRatios.ToString());
        
        parasItemsList0[50].SetInputTxt(chaStats.chaProperty.dodge.ToString());
        
        parasItemsList0[51].SetInputTxt(chaStats.chaProperty.shieldCount.ToString());
        
        parasItemsList0[52].SetInputTxt(chaStats.chaProperty.defaultcoolDown.ToString());
        

        parasItemsList0[53].SetInputTxt(playerData.playerData.skillFreeBuyCount.ToString());
        

        parasItemsList0[54].SetInputTxt(playerData.playerData.buySkillRatios.ToString());
        

        parasItemsList0[55].SetInputTxt(playerData.playerData.refreshShopRatios.ToString());
        

        parasItemsList0[56].SetInputTxt(playerData.playerData.skillRefreshCount.ToString());
        

        parasItemsList0[57].SetInputTxt(playerData.playerData.skillWeightIncrease1.ToString());
        

        parasItemsList0[58].SetInputTxt(playerData.playerData.skillWeightIncrease2.ToString());
        

        parasItemsList0[59].SetInputTxt(playerData.playerData.skillWeightIncrease3.ToString());
        

        parasItemsList0[60].SetInputTxt(playerData.playerData.skillTempRefreshCount.ToString());
        
        parasItemsList0[61].SetInputTxt(chaStats.chaProperty.defaultBulletRangeRatios.ToString());
        
        parasItemsList0[62].SetInputTxt(chaStats.chaProperty.collideDamageRatios.ToString());
        
        parasItemsList0[63].SetInputTxt(chaStats.chaProperty.continuousCollideDamageRatios.ToString());
        

        parasItemsList0[64].SetInputTxt(playerData.playerData.superPushForceChance.ToString());
        

        parasItemsList0[65].SetInputTxt(playerData.playerData.maxPushForceChance.ToString());
        

        parasItemsList0[66].SetInputTxt(playerData.playerData.normalMonsterDamageRatios.ToString());
        

        parasItemsList0[67].SetInputTxt(playerData.playerData.specialMonsterDamageRatios.ToString());
        

        parasItemsList0[68].SetInputTxt(playerData.playerData.bossMonsterDamageRatios.ToString());
        

        parasItemsList0[69].SetInputTxt(playerData.playerData.weaponSkillExtraCount.ToString());
        
        parasItemsList0[70].SetInputTxt(chaStats.chaProperty.scaleRatios.ToString());
}
}