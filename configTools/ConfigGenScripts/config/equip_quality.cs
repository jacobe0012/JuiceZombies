//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbequip_quality
{


    
    /// <summary>
    /// 品质Id
    /// </summary>
    public int id;


    
    /// <summary>
    /// 品质大类
    /// </summary>
    public int type;


    
    /// <summary>
    /// 品质子类
    /// </summary>
    public int subtype;


    
    /// <summary>
    /// 等级上限
    /// </summary>
    public int levelMax;


    
    /// <summary>
    /// 合成需求
    /// </summary>
    public System.Collections.Generic.List<int> mergeRule;


    
    /// <summary>
    /// 合成材料是否需要与自身ID相同
    /// </summary>
    public int mergeSelf;


    
    /// <summary>
    /// 价值指数
    /// </summary>
    public int valueIndex;


    //----------------------Read------------------------
    

    if (id == 品质Id)
        return playerData.playerData.id;
    

    if (id == 品质大类)
        return playerData.playerData.type;
    

    if (id == 品质子类)
        return playerData.playerData.subtype;
    

    if (id == 等级上限)
        return playerData.playerData.levelMax;
    

    if (id == 合成需求)
        return playerData.playerData.mergeRule;
    

    if (id == 合成材料是否需要与自身ID相同)
        return playerData.playerData.mergeSelf;
    

    if (id == 价值指数)
        return playerData.playerData.valueIndex;


    //----------------------Write------------------------
    

    if (id == 品质Id)
    {
        playerData.playerData.id += value;
    } 

    

    if (id == 品质大类)
    {
        playerData.playerData.type += value;
    } 

    

    if (id == 品质子类)
    {
        playerData.playerData.subtype += value;
    } 

    

    if (id == 等级上限)
    {
        playerData.playerData.levelMax += value;
    } 

    

    if (id == 合成需求)
    {
        playerData.playerData.mergeRule += value;
    } 

    

    if (id == 合成材料是否需要与自身ID相同)
    {
        playerData.playerData.mergeSelf += value;
    } 

    

    if (id == 价值指数)
    {
        playerData.playerData.valueIndex += value;
    } 

        //----------------------参数面板------------------------
          
        

        parasItemsList0[0].SetInputTxt(playerData.playerData.id.ToString());
        

        parasItemsList0[1].SetInputTxt(playerData.playerData.type.ToString());
        

        parasItemsList0[2].SetInputTxt(playerData.playerData.subtype.ToString());
        

        parasItemsList0[3].SetInputTxt(playerData.playerData.levelMax.ToString());
        

        parasItemsList0[4].SetInputTxt(playerData.playerData.mergeRule.ToString());
        

        parasItemsList0[5].SetInputTxt(playerData.playerData.mergeSelf.ToString());
        

        parasItemsList0[6].SetInputTxt(playerData.playerData.valueIndex.ToString());
}
}