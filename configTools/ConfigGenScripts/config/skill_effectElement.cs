//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbskill_effectElement
{


    
    /// <summary>
    /// 元素id
    /// </summary>
    public int id;


    
    /// <summary>
    /// 元素类型
    /// </summary>
    public int elementType;


    
    /// <summary>
    /// 输出类型
    /// </summary>
    public int outputType;


    
    /// <summary>
    /// 输出类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> outputTypePara;


    
    /// <summary>
    /// 受属性影响类型
    /// </summary>
    public int bonusType;


    
    /// <summary>
    /// 受属性影响类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> bonusTypePara;


    
    /// <summary>
    /// 计算类型
    /// </summary>
    public int calcType;


    
    /// <summary>
    /// 计算类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> calcTypePara;


    
    /// <summary>
    /// 正负面类型
    /// </summary>
    public int stateType;


    
    /// <summary>
    /// 正负面类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> stateTypePara;


    
    /// <summary>
    /// 变更属性ID
    /// </summary>
    public int attrId;


    
    /// <summary>
    /// 变更属性ID参数值
    /// </summary>
    public System.Collections.Generic.List<int> attrIdPara;


    
    /// <summary>
    /// 控制类型
    /// </summary>
    public int controlType;


    
    /// <summary>
    /// 控制类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> controlTypePara;


    
    /// <summary>
    /// 替换类型
    /// </summary>
    public int changeType;


    
    /// <summary>
    /// 替换类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> changeTypePara;


    
    /// <summary>
    /// 清除类型
    /// </summary>
    public int clearType;


    
    /// <summary>
    /// 清除类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> clearTypePara;


    
    /// <summary>
    /// 免疫类型
    /// </summary>
    public int immuneType;


    
    /// <summary>
    /// 免疫类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> immuneTypePara;


    
    /// <summary>
    /// 强制位移依据
    /// </summary>
    public int displaceFrom;


    
    /// <summary>
    /// 强制位移依据参数值
    /// </summary>
    public System.Collections.Generic.List<int> displaceFromPara;


    
    /// <summary>
    /// 选点类型
    /// </summary>
    public int pointType;


    
    /// <summary>
    /// 选点类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> pointTypePara;


    
    /// <summary>
    /// 概率权重
    /// </summary>
    public int power;


    
    /// <summary>
    /// 穿墙类型
    /// </summary>
    public int passType;


    
    /// <summary>
    /// 受其他影响类型
    /// </summary>
    public int bonusOtherType;


    
    /// <summary>
    /// 受其他影响类型参数
    /// </summary>
    public System.Collections.Generic.List<int> bonusOtherTypePara;


    
    /// <summary>
    /// 方向类型
    /// </summary>
    public int directionType;


    
    /// <summary>
    /// 方向类型参数
    /// </summary>
    public System.Collections.Generic.List<int> directionTypePara;


    
    /// <summary>
    /// 方向类型
    /// </summary>
    public int hitType;


    
    /// <summary>
    /// 方向类型参数
    /// </summary>
    public System.Collections.Generic.List<int> hitTypePara;


    //----------------------Read------------------------
    

    if (id == 元素id)
        return playerData.playerData.id;
    

    if (id == 元素类型)
        return playerData.playerData.elementType;
    

    if (id == 输出类型)
        return playerData.playerData.outputType;
    

    if (id == 输出类型参数值)
        return playerData.playerData.outputTypePara;
    

    if (id == 受属性影响类型)
        return playerData.playerData.bonusType;
    

    if (id == 受属性影响类型参数值)
        return playerData.playerData.bonusTypePara;
    

    if (id == 计算类型)
        return playerData.playerData.calcType;
    

    if (id == 计算类型参数值)
        return playerData.playerData.calcTypePara;
    

    if (id == 正负面类型)
        return playerData.playerData.stateType;
    

    if (id == 正负面类型参数值)
        return playerData.playerData.stateTypePara;
    

    if (id == 变更属性ID)
        return playerData.playerData.attrId;
    

    if (id == 变更属性ID参数值)
        return playerData.playerData.attrIdPara;
    

    if (id == 控制类型)
        return playerData.playerData.controlType;
    

    if (id == 控制类型参数值)
        return playerData.playerData.controlTypePara;
    

    if (id == 替换类型)
        return playerData.playerData.changeType;
    

    if (id == 替换类型参数值)
        return playerData.playerData.changeTypePara;
    

    if (id == 清除类型)
        return playerData.playerData.clearType;
    

    if (id == 清除类型参数值)
        return playerData.playerData.clearTypePara;
    

    if (id == 免疫类型)
        return playerData.playerData.immuneType;
    

    if (id == 免疫类型参数值)
        return playerData.playerData.immuneTypePara;
    

    if (id == 强制位移依据)
        return playerData.playerData.displaceFrom;
    

    if (id == 强制位移依据参数值)
        return playerData.playerData.displaceFromPara;
    

    if (id == 选点类型)
        return playerData.playerData.pointType;
    

    if (id == 选点类型参数值)
        return playerData.playerData.pointTypePara;
    

    if (id == 概率权重)
        return playerData.playerData.power;
    

    if (id == 穿墙类型)
        return playerData.playerData.passType;
    

    if (id == 受其他影响类型)
        return playerData.playerData.bonusOtherType;
    

    if (id == 受其他影响类型参数)
        return playerData.playerData.bonusOtherTypePara;
    

    if (id == 方向类型)
        return playerData.playerData.directionType;
    

    if (id == 方向类型参数)
        return playerData.playerData.directionTypePara;
    

    if (id == 方向类型)
        return playerData.playerData.hitType;
    

    if (id == 方向类型参数)
        return playerData.playerData.hitTypePara;


    //----------------------Write------------------------
    

    if (id == 元素id)
    {
        playerData.playerData.id += value;
    } 

    

    if (id == 元素类型)
    {
        playerData.playerData.elementType += value;
    } 

    

    if (id == 输出类型)
    {
        playerData.playerData.outputType += value;
    } 

    

    if (id == 输出类型参数值)
    {
        playerData.playerData.outputTypePara += value;
    } 

    

    if (id == 受属性影响类型)
    {
        playerData.playerData.bonusType += value;
    } 

    

    if (id == 受属性影响类型参数值)
    {
        playerData.playerData.bonusTypePara += value;
    } 

    

    if (id == 计算类型)
    {
        playerData.playerData.calcType += value;
    } 

    

    if (id == 计算类型参数值)
    {
        playerData.playerData.calcTypePara += value;
    } 

    

    if (id == 正负面类型)
    {
        playerData.playerData.stateType += value;
    } 

    

    if (id == 正负面类型参数值)
    {
        playerData.playerData.stateTypePara += value;
    } 

    

    if (id == 变更属性ID)
    {
        playerData.playerData.attrId += value;
    } 

    

    if (id == 变更属性ID参数值)
    {
        playerData.playerData.attrIdPara += value;
    } 

    

    if (id == 控制类型)
    {
        playerData.playerData.controlType += value;
    } 

    

    if (id == 控制类型参数值)
    {
        playerData.playerData.controlTypePara += value;
    } 

    

    if (id == 替换类型)
    {
        playerData.playerData.changeType += value;
    } 

    

    if (id == 替换类型参数值)
    {
        playerData.playerData.changeTypePara += value;
    } 

    

    if (id == 清除类型)
    {
        playerData.playerData.clearType += value;
    } 

    

    if (id == 清除类型参数值)
    {
        playerData.playerData.clearTypePara += value;
    } 

    

    if (id == 免疫类型)
    {
        playerData.playerData.immuneType += value;
    } 

    

    if (id == 免疫类型参数值)
    {
        playerData.playerData.immuneTypePara += value;
    } 

    

    if (id == 强制位移依据)
    {
        playerData.playerData.displaceFrom += value;
    } 

    

    if (id == 强制位移依据参数值)
    {
        playerData.playerData.displaceFromPara += value;
    } 

    

    if (id == 选点类型)
    {
        playerData.playerData.pointType += value;
    } 

    

    if (id == 选点类型参数值)
    {
        playerData.playerData.pointTypePara += value;
    } 

    

    if (id == 概率权重)
    {
        playerData.playerData.power += value;
    } 

    

    if (id == 穿墙类型)
    {
        playerData.playerData.passType += value;
    } 

    

    if (id == 受其他影响类型)
    {
        playerData.playerData.bonusOtherType += value;
    } 

    

    if (id == 受其他影响类型参数)
    {
        playerData.playerData.bonusOtherTypePara += value;
    } 

    

    if (id == 方向类型)
    {
        playerData.playerData.directionType += value;
    } 

    

    if (id == 方向类型参数)
    {
        playerData.playerData.directionTypePara += value;
    } 

    

    if (id == 方向类型)
    {
        playerData.playerData.hitType += value;
    } 

    

    if (id == 方向类型参数)
    {
        playerData.playerData.hitTypePara += value;
    } 

        //----------------------参数面板------------------------
          
        

        parasItemsList0[0].SetInputTxt(playerData.playerData.id.ToString());
        

        parasItemsList0[1].SetInputTxt(playerData.playerData.elementType.ToString());
        

        parasItemsList0[2].SetInputTxt(playerData.playerData.outputType.ToString());
        

        parasItemsList0[3].SetInputTxt(playerData.playerData.outputTypePara.ToString());
        

        parasItemsList0[4].SetInputTxt(playerData.playerData.bonusType.ToString());
        

        parasItemsList0[5].SetInputTxt(playerData.playerData.bonusTypePara.ToString());
        

        parasItemsList0[6].SetInputTxt(playerData.playerData.calcType.ToString());
        

        parasItemsList0[7].SetInputTxt(playerData.playerData.calcTypePara.ToString());
        

        parasItemsList0[8].SetInputTxt(playerData.playerData.stateType.ToString());
        

        parasItemsList0[9].SetInputTxt(playerData.playerData.stateTypePara.ToString());
        

        parasItemsList0[10].SetInputTxt(playerData.playerData.attrId.ToString());
        

        parasItemsList0[11].SetInputTxt(playerData.playerData.attrIdPara.ToString());
        

        parasItemsList0[12].SetInputTxt(playerData.playerData.controlType.ToString());
        

        parasItemsList0[13].SetInputTxt(playerData.playerData.controlTypePara.ToString());
        

        parasItemsList0[14].SetInputTxt(playerData.playerData.changeType.ToString());
        

        parasItemsList0[15].SetInputTxt(playerData.playerData.changeTypePara.ToString());
        

        parasItemsList0[16].SetInputTxt(playerData.playerData.clearType.ToString());
        

        parasItemsList0[17].SetInputTxt(playerData.playerData.clearTypePara.ToString());
        

        parasItemsList0[18].SetInputTxt(playerData.playerData.immuneType.ToString());
        

        parasItemsList0[19].SetInputTxt(playerData.playerData.immuneTypePara.ToString());
        

        parasItemsList0[20].SetInputTxt(playerData.playerData.displaceFrom.ToString());
        

        parasItemsList0[21].SetInputTxt(playerData.playerData.displaceFromPara.ToString());
        

        parasItemsList0[22].SetInputTxt(playerData.playerData.pointType.ToString());
        

        parasItemsList0[23].SetInputTxt(playerData.playerData.pointTypePara.ToString());
        

        parasItemsList0[24].SetInputTxt(playerData.playerData.power.ToString());
        

        parasItemsList0[25].SetInputTxt(playerData.playerData.passType.ToString());
        

        parasItemsList0[26].SetInputTxt(playerData.playerData.bonusOtherType.ToString());
        

        parasItemsList0[27].SetInputTxt(playerData.playerData.bonusOtherTypePara.ToString());
        

        parasItemsList0[28].SetInputTxt(playerData.playerData.directionType.ToString());
        

        parasItemsList0[29].SetInputTxt(playerData.playerData.directionTypePara.ToString());
        

        parasItemsList0[30].SetInputTxt(playerData.playerData.hitType.ToString());
        

        parasItemsList0[31].SetInputTxt(playerData.playerData.hitTypePara.ToString());
}
}