//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbskill_effectNew
{


    
    /// <summary>
    /// 效果id
    /// </summary>
    public int id;


    
    /// <summary>
    /// 技能id
    /// </summary>
    public int skillId;


    
    /// <summary>
    /// 触发效果类型
    /// </summary>
    public int triggerType;


    
    /// <summary>
    /// 触发效果类型参数
    /// </summary>
    public System.Collections.Generic.List<int> triggerTypePara;


    
    /// <summary>
    /// 条件类型
    /// </summary>
    public int conditionType;


    
    /// <summary>
    /// 条件类型参数
    /// </summary>
    public System.Collections.Generic.List<int> conditionTypePara;


    
    /// <summary>
    /// 比较类型
    /// </summary>
    public int compareType;


    
    /// <summary>
    /// 比较类型参数
    /// </summary>
    public System.Collections.Generic.List<int> compareTypePara;


    
    /// <summary>
    /// 延迟类型
    /// </summary>
    public int delayType;


    
    /// <summary>
    /// 延迟类型参数
    /// </summary>
    public System.Collections.Generic.List<int> delayTypePara;


    
    /// <summary>
    /// 计算类型
    /// </summary>
    public int calcType;


    
    /// <summary>
    /// 计算类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> calcTypePara;


    
    /// <summary>
    /// 额外类型
    /// </summary>
    public int extraType;


    
    /// <summary>
    /// 额外类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> extraTypePara;


    
    /// <summary>
    /// 索敌类型
    /// </summary>
    public int searchType;


    
    /// <summary>
    /// 索敌类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> searchTypePara;


    
    /// <summary>
    /// 范围类型
    /// </summary>
    public int rangeType;


    
    /// <summary>
    /// 范围类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> rangeTypePara;


    
    /// <summary>
    /// 偏移类型
    /// </summary>
    public int deviateType;


    
    /// <summary>
    /// 偏移类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> deviateTypePara;


    
    /// <summary>
    /// 作用对象
    /// </summary>
    public int target;


    
    /// <summary>
    /// 作用对象参数 
    /// </summary>
    public System.Collections.Generic.List<int> targetPara;


    
    /// <summary>
    /// 自加的元素类触发器 
    /// </summary>
    public System.Collections.Generic.List<int> elementTrigger;


    
    /// <summary>
    /// 元素列表
    /// </summary>
    public System.Collections.Generic.List<int> elementList;


    
    /// <summary>
    /// 概率权重
    /// </summary>
    public int power;


    
    /// <summary>
    /// 效果类型
    /// </summary>
    public int effectType;


    
    /// <summary>
    /// 变更属性ID
    /// </summary>
    public int attrId;


    
    /// <summary>
    /// 变更属性ID参数值
    /// </summary>
    public System.Collections.Generic.List<int> attrIdPara;


    
    /// <summary>
    /// 索敌目标
    /// </summary>
    public int targetLockOn;


    
    /// <summary>
    /// 索敌目标参数 
    /// </summary>
    public System.Collections.Generic.List<int> targetLockOnPara;


    //----------------------Read------------------------
    

    if (id == 效果id)
        return playerData.playerData.id;
    

    if (id == 技能id)
        return playerData.playerData.skillId;
    

    if (id == 触发效果类型)
        return playerData.playerData.triggerType;
    

    if (id == 触发效果类型参数)
        return playerData.playerData.triggerTypePara;
    

    if (id == 条件类型)
        return playerData.playerData.conditionType;
    

    if (id == 条件类型参数)
        return playerData.playerData.conditionTypePara;
    

    if (id == 比较类型)
        return playerData.playerData.compareType;
    

    if (id == 比较类型参数)
        return playerData.playerData.compareTypePara;
    

    if (id == 延迟类型)
        return playerData.playerData.delayType;
    

    if (id == 延迟类型参数)
        return playerData.playerData.delayTypePara;
    

    if (id == 计算类型)
        return playerData.playerData.calcType;
    

    if (id == 计算类型参数 )
        return playerData.playerData.calcTypePara;
    

    if (id == 额外类型)
        return playerData.playerData.extraType;
    

    if (id == 额外类型参数 )
        return playerData.playerData.extraTypePara;
    

    if (id == 索敌类型)
        return playerData.playerData.searchType;
    

    if (id == 索敌类型参数 )
        return playerData.playerData.searchTypePara;
    

    if (id == 范围类型)
        return playerData.playerData.rangeType;
    

    if (id == 范围类型参数 )
        return playerData.playerData.rangeTypePara;
    

    if (id == 偏移类型)
        return playerData.playerData.deviateType;
    

    if (id == 偏移类型参数 )
        return playerData.playerData.deviateTypePara;
    

    if (id == 作用对象)
        return playerData.playerData.target;
    

    if (id == 作用对象参数 )
        return playerData.playerData.targetPara;
    

    if (id == 自加的元素类触发器 )
        return playerData.playerData.elementTrigger;
    

    if (id == 元素列表)
        return playerData.playerData.elementList;
    

    if (id == 概率权重)
        return playerData.playerData.power;
    

    if (id == 效果类型)
        return playerData.playerData.effectType;
    

    if (id == 变更属性ID)
        return playerData.playerData.attrId;
    

    if (id == 变更属性ID参数值)
        return playerData.playerData.attrIdPara;
    

    if (id == 索敌目标)
        return playerData.playerData.targetLockOn;
    

    if (id == 索敌目标参数 )
        return playerData.playerData.targetLockOnPara;


    //----------------------Write------------------------
    

    if (id == 效果id)
    {
        playerData.playerData.id += value;
    } 

    

    if (id == 技能id)
    {
        playerData.playerData.skillId += value;
    } 

    

    if (id == 触发效果类型)
    {
        playerData.playerData.triggerType += value;
    } 

    

    if (id == 触发效果类型参数)
    {
        playerData.playerData.triggerTypePara += value;
    } 

    

    if (id == 条件类型)
    {
        playerData.playerData.conditionType += value;
    } 

    

    if (id == 条件类型参数)
    {
        playerData.playerData.conditionTypePara += value;
    } 

    

    if (id == 比较类型)
    {
        playerData.playerData.compareType += value;
    } 

    

    if (id == 比较类型参数)
    {
        playerData.playerData.compareTypePara += value;
    } 

    

    if (id == 延迟类型)
    {
        playerData.playerData.delayType += value;
    } 

    

    if (id == 延迟类型参数)
    {
        playerData.playerData.delayTypePara += value;
    } 

    

    if (id == 计算类型)
    {
        playerData.playerData.calcType += value;
    } 

    

    if (id == 计算类型参数 )
    {
        playerData.playerData.calcTypePara += value;
    } 

    

    if (id == 额外类型)
    {
        playerData.playerData.extraType += value;
    } 

    

    if (id == 额外类型参数 )
    {
        playerData.playerData.extraTypePara += value;
    } 

    

    if (id == 索敌类型)
    {
        playerData.playerData.searchType += value;
    } 

    

    if (id == 索敌类型参数 )
    {
        playerData.playerData.searchTypePara += value;
    } 

    

    if (id == 范围类型)
    {
        playerData.playerData.rangeType += value;
    } 

    

    if (id == 范围类型参数 )
    {
        playerData.playerData.rangeTypePara += value;
    } 

    

    if (id == 偏移类型)
    {
        playerData.playerData.deviateType += value;
    } 

    

    if (id == 偏移类型参数 )
    {
        playerData.playerData.deviateTypePara += value;
    } 

    

    if (id == 作用对象)
    {
        playerData.playerData.target += value;
    } 

    

    if (id == 作用对象参数 )
    {
        playerData.playerData.targetPara += value;
    } 

    

    if (id == 自加的元素类触发器 )
    {
        playerData.playerData.elementTrigger += value;
    } 

    

    if (id == 元素列表)
    {
        playerData.playerData.elementList += value;
    } 

    

    if (id == 概率权重)
    {
        playerData.playerData.power += value;
    } 

    

    if (id == 效果类型)
    {
        playerData.playerData.effectType += value;
    } 

    

    if (id == 变更属性ID)
    {
        playerData.playerData.attrId += value;
    } 

    

    if (id == 变更属性ID参数值)
    {
        playerData.playerData.attrIdPara += value;
    } 

    

    if (id == 索敌目标)
    {
        playerData.playerData.targetLockOn += value;
    } 

    

    if (id == 索敌目标参数 )
    {
        playerData.playerData.targetLockOnPara += value;
    } 

        //----------------------参数面板------------------------
          
        

        parasItemsList0[0].SetInputTxt(playerData.playerData.id.ToString());
        

        parasItemsList0[1].SetInputTxt(playerData.playerData.skillId.ToString());
        

        parasItemsList0[2].SetInputTxt(playerData.playerData.triggerType.ToString());
        

        parasItemsList0[3].SetInputTxt(playerData.playerData.triggerTypePara.ToString());
        

        parasItemsList0[4].SetInputTxt(playerData.playerData.conditionType.ToString());
        

        parasItemsList0[5].SetInputTxt(playerData.playerData.conditionTypePara.ToString());
        

        parasItemsList0[6].SetInputTxt(playerData.playerData.compareType.ToString());
        

        parasItemsList0[7].SetInputTxt(playerData.playerData.compareTypePara.ToString());
        

        parasItemsList0[8].SetInputTxt(playerData.playerData.delayType.ToString());
        

        parasItemsList0[9].SetInputTxt(playerData.playerData.delayTypePara.ToString());
        

        parasItemsList0[10].SetInputTxt(playerData.playerData.calcType.ToString());
        

        parasItemsList0[11].SetInputTxt(playerData.playerData.calcTypePara.ToString());
        

        parasItemsList0[12].SetInputTxt(playerData.playerData.extraType.ToString());
        

        parasItemsList0[13].SetInputTxt(playerData.playerData.extraTypePara.ToString());
        

        parasItemsList0[14].SetInputTxt(playerData.playerData.searchType.ToString());
        

        parasItemsList0[15].SetInputTxt(playerData.playerData.searchTypePara.ToString());
        

        parasItemsList0[16].SetInputTxt(playerData.playerData.rangeType.ToString());
        

        parasItemsList0[17].SetInputTxt(playerData.playerData.rangeTypePara.ToString());
        

        parasItemsList0[18].SetInputTxt(playerData.playerData.deviateType.ToString());
        

        parasItemsList0[19].SetInputTxt(playerData.playerData.deviateTypePara.ToString());
        

        parasItemsList0[20].SetInputTxt(playerData.playerData.target.ToString());
        

        parasItemsList0[21].SetInputTxt(playerData.playerData.targetPara.ToString());
        

        parasItemsList0[22].SetInputTxt(playerData.playerData.elementTrigger.ToString());
        

        parasItemsList0[23].SetInputTxt(playerData.playerData.elementList.ToString());
        

        parasItemsList0[24].SetInputTxt(playerData.playerData.power.ToString());
        

        parasItemsList0[25].SetInputTxt(playerData.playerData.effectType.ToString());
        

        parasItemsList0[26].SetInputTxt(playerData.playerData.attrId.ToString());
        

        parasItemsList0[27].SetInputTxt(playerData.playerData.attrIdPara.ToString());
        

        parasItemsList0[28].SetInputTxt(playerData.playerData.targetLockOn.ToString());
        

        parasItemsList0[29].SetInputTxt(playerData.playerData.targetLockOnPara.ToString());
}
}