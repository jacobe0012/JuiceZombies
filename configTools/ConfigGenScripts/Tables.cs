//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{
   
public static class GenGenBlobAssetReference
{
   
public struct ConfigData
{
    public ConfigTbattr_selfs configTbattr_selfs;
    public ConfigTbarts configTbarts;
    public ConfigTblanguages configTblanguages;
    public ConfigTbskill_effectElements configTbskill_effectElements;
    public ConfigTbskill_effectNews configTbskill_effectNews;
    public ConfigTbbattle_statuss configTbbattle_statuss;
    public ConfigTbbullets configTbbullets;
    public ConfigTbactivitys configTbactivitys;
    public ConfigTbbattlepasss configTbbattlepasss;
    public ConfigTbbattlepass_exps configTbbattlepass_exps;
    public ConfigTbbattlepass_rewards configTbbattlepass_rewards;
    public ConfigTbdays_challenges configTbdays_challenges;
    public ConfigTbdays_signs configTbdays_signs;
    public ConfigTbenergy_shops configTbenergy_shops;
    public ConfigTbenergy_shop_goodss configTbenergy_shop_goodss;
    public ConfigTbmonopolys configTbmonopolys;
    public ConfigTbmonopoly_events configTbmonopoly_events;
    public ConfigTbmonopoly_cells configTbmonopoly_cells;
    public ConfigTbmonopoly_shops configTbmonopoly_shops;
    public ConfigTbmonopoly_event_lottos configTbmonopoly_event_lottos;
    public ConfigTbpiggy_banks configTbpiggy_banks;
    public ConfigTbbattleshop_stages configTbbattleshop_stages;
    public ConfigTbbattleshop_drops configTbbattleshop_drops;
    public ConfigTbbattletechs configTbbattletechs;
    public ConfigTbbattletech_drops configTbbattletech_drops;
    public ConfigTbbattle_constants configTbbattle_constants;
    public ConfigTbattr_variables configTbattr_variables;
    public ConfigTbbattle_items configTbbattle_items;
    public ConfigTbbattle_drops configTbbattle_drops;
    public ConfigTbelements configTbelements;
    public ConfigTbelement_effects configTbelement_effects;
    public ConfigTbevent_0s configTbevent_0s;
    public ConfigTbanecdotes configTbanecdotes;
    public ConfigTbevent_types configTbevent_types;
    public ConfigTblevels configTblevels;
    public ConfigTbmonsters configTbmonsters;
    public ConfigTbmonster_attrs configTbmonster_attrs;
    public ConfigTbmonster_features configTbmonster_features;
    public ConfigTbmonster_types configTbmonster_types;
    public ConfigTbmodule_refreshs configTbmodule_refreshs;
    public ConfigTbmodule_templates configTbmodule_templates;
    public ConfigTbmonster_templates configTbmonster_templates;
    public ConfigTbmonster_forations configTbmonster_forations;
    public ConfigTbscenes configTbscenes;
    public ConfigTbscene_modules configTbscene_modules;
    public ConfigTbenvironments configTbenvironments;
    public ConfigTbscene_bosss configTbscene_bosss;
    public ConfigTbskills configTbskills;
    public ConfigTbskill_bindings configTbskill_bindings;
    public ConfigTbskill_binding_ranks configTbskill_binding_ranks;
    public ConfigTbskill_qualitys configTbskill_qualitys;
    public ConfigTbspecial_effects configTbspecial_effects;
    public ConfigTbspecial_effect_movements configTbspecial_effect_movements;
    public ConfigTbtalents configTbtalents;
    public ConfigTbtalent_levels configTbtalent_levels;
    public ConfigTbweapons configTbweapons;
    public ConfigTbplayer_weapon_indexs configTbplayer_weapon_indexs;
    public ConfigTbannounces configTbannounces;
    public ConfigTbaudios configTbaudios;
    public ConfigTbconstants configTbconstants;
    public ConfigTberrorcodes configTberrorcodes;
    public ConfigTbguides configTbguides;
    public ConfigTbblocks configTbblocks;
    public ConfigTbpowers configTbpowers;
    public ConfigTbracists configTbracists;
    public ConfigTbmails configTbmails;
    public ConfigTbqualitys configTbqualitys;
    public ConfigTbsettings configTbsettings;
    public ConfigTbsetting_languages configTbsetting_languages;
    public ConfigTbshares configTbshares;
    public ConfigTbtags configTbtags;
    public ConfigTbtag_funcs configTbtag_funcs;
    public ConfigTbthird_partys configTbthird_partys;
    public ConfigTbuser_avatars configTbuser_avatars;
    public ConfigTbuser_variables configTbuser_variables;
    public ConfigTbuser_levels configTbuser_levels;
    public ConfigTbplayer_roles configTbplayer_roles;
    public ConfigTbdraw_boxs configTbdraw_boxs;
    public ConfigTbdraw_banners configTbdraw_banners;
    public ConfigTbdrops configTbdrops;
    public ConfigTbequip_datas configTbequip_datas;
    public ConfigTbequip_levels configTbequip_levels;
    public ConfigTbequip_poss configTbequip_poss;
    public ConfigTbequip_qualitys configTbequip_qualitys;
    public ConfigTbgifts configTbgifts;
    public ConfigTbgift_groups configTbgift_groups;
    public ConfigTbitems configTbitems;
    public ConfigTbshop_dailys configTbshop_dailys;
    public ConfigTbfunds configTbfunds;
    public ConfigTbfund_rewards configTbfund_rewards;
    public ConfigTbrecharges configTbrecharges;
    public ConfigTbprices configTbprices;
    public ConfigTbspecialss configTbspecialss;
    public ConfigTbfrs configTbfrs;
    public ConfigTbmonthlys configTbmonthlys;
    public ConfigTbgoodss configTbgoodss;
    public ConfigTbachieves configTbachieves;
    public ConfigTbachieve_groups configTbachieve_groups;
    public ConfigTbchallenges configTbchallenges;
    public ConfigTbchapters configTbchapters;
    public ConfigTbchapter_boxs configTbchapter_boxs;
    public ConfigTbsweep_timess configTbsweep_timess;
    public ConfigTbsign_dailys configTbsign_dailys;
    public ConfigTbsign_accs configTbsign_accs;
    public ConfigTbtasks configTbtasks;
    public ConfigTbtask_types configTbtask_types;
    public ConfigTbtask_groups configTbtask_groups;
    public ConfigTbtask_scores configTbtask_scores;
}
public struct ConfigTbattr_selfs
{
    public BlobArray<ConfigTbattr_self> configTbattr_selfs;
}
public struct ConfigTbarts
{
    public BlobArray<ConfigTbart> configTbarts;
}
public struct ConfigTblanguages
{
    public BlobArray<ConfigTblanguage> configTblanguages;
}
public struct ConfigTbskill_effectElements
{
    public BlobArray<ConfigTbskill_effectElement> configTbskill_effectElements;
}
public struct ConfigTbskill_effectNews
{
    public BlobArray<ConfigTbskill_effectNew> configTbskill_effectNews;
}
public struct ConfigTbbattle_statuss
{
    public BlobArray<ConfigTbbattle_status> configTbbattle_statuss;
}
public struct ConfigTbbullets
{
    public BlobArray<ConfigTbbullet> configTbbullets;
}
public struct ConfigTbactivitys
{
    public BlobArray<ConfigTbactivity> configTbactivitys;
}
public struct ConfigTbbattlepasss
{
    public BlobArray<ConfigTbbattlepass> configTbbattlepasss;
}
public struct ConfigTbbattlepass_exps
{
    public BlobArray<ConfigTbbattlepass_exp> configTbbattlepass_exps;
}
public struct ConfigTbbattlepass_rewards
{
    public BlobArray<ConfigTbbattlepass_reward> configTbbattlepass_rewards;
}
public struct ConfigTbdays_challenges
{
    public BlobArray<ConfigTbdays_challenge> configTbdays_challenges;
}
public struct ConfigTbdays_signs
{
    public BlobArray<ConfigTbdays_sign> configTbdays_signs;
}
public struct ConfigTbenergy_shops
{
    public BlobArray<ConfigTbenergy_shop> configTbenergy_shops;
}
public struct ConfigTbenergy_shop_goodss
{
    public BlobArray<ConfigTbenergy_shop_goods> configTbenergy_shop_goodss;
}
public struct ConfigTbmonopolys
{
    public BlobArray<ConfigTbmonopoly> configTbmonopolys;
}
public struct ConfigTbmonopoly_events
{
    public BlobArray<ConfigTbmonopoly_event> configTbmonopoly_events;
}
public struct ConfigTbmonopoly_cells
{
    public BlobArray<ConfigTbmonopoly_cell> configTbmonopoly_cells;
}
public struct ConfigTbmonopoly_shops
{
    public BlobArray<ConfigTbmonopoly_shop> configTbmonopoly_shops;
}
public struct ConfigTbmonopoly_event_lottos
{
    public BlobArray<ConfigTbmonopoly_event_lotto> configTbmonopoly_event_lottos;
}
public struct ConfigTbpiggy_banks
{
    public BlobArray<ConfigTbpiggy_bank> configTbpiggy_banks;
}
public struct ConfigTbbattleshop_stages
{
    public BlobArray<ConfigTbbattleshop_stage> configTbbattleshop_stages;
}
public struct ConfigTbbattleshop_drops
{
    public BlobArray<ConfigTbbattleshop_drop> configTbbattleshop_drops;
}
public struct ConfigTbbattletechs
{
    public BlobArray<ConfigTbbattletech> configTbbattletechs;
}
public struct ConfigTbbattletech_drops
{
    public BlobArray<ConfigTbbattletech_drop> configTbbattletech_drops;
}
public struct ConfigTbbattle_constants
{
    public BlobArray<ConfigTbbattle_constant> configTbbattle_constants;
}
public struct ConfigTbattr_variables
{
    public BlobArray<ConfigTbattr_variable> configTbattr_variables;
}
public struct ConfigTbbattle_items
{
    public BlobArray<ConfigTbbattle_item> configTbbattle_items;
}
public struct ConfigTbbattle_drops
{
    public BlobArray<ConfigTbbattle_drop> configTbbattle_drops;
}
public struct ConfigTbelements
{
    public BlobArray<ConfigTbelement> configTbelements;
}
public struct ConfigTbelement_effects
{
    public BlobArray<ConfigTbelement_effect> configTbelement_effects;
}
public struct ConfigTbevent_0s
{
    public BlobArray<ConfigTbevent_0> configTbevent_0s;
}
public struct ConfigTbanecdotes
{
    public BlobArray<ConfigTbanecdote> configTbanecdotes;
}
public struct ConfigTbevent_types
{
    public BlobArray<ConfigTbevent_type> configTbevent_types;
}
public struct ConfigTblevels
{
    public BlobArray<ConfigTblevel> configTblevels;
}
public struct ConfigTbmonsters
{
    public BlobArray<ConfigTbmonster> configTbmonsters;
}
public struct ConfigTbmonster_attrs
{
    public BlobArray<ConfigTbmonster_attr> configTbmonster_attrs;
}
public struct ConfigTbmonster_features
{
    public BlobArray<ConfigTbmonster_feature> configTbmonster_features;
}
public struct ConfigTbmonster_types
{
    public BlobArray<ConfigTbmonster_type> configTbmonster_types;
}
public struct ConfigTbmodule_refreshs
{
    public BlobArray<ConfigTbmodule_refresh> configTbmodule_refreshs;
}
public struct ConfigTbmodule_templates
{
    public BlobArray<ConfigTbmodule_template> configTbmodule_templates;
}
public struct ConfigTbmonster_templates
{
    public BlobArray<ConfigTbmonster_template> configTbmonster_templates;
}
public struct ConfigTbmonster_forations
{
    public BlobArray<ConfigTbmonster_foration> configTbmonster_forations;
}
public struct ConfigTbscenes
{
    public BlobArray<ConfigTbscene> configTbscenes;
}
public struct ConfigTbscene_modules
{
    public BlobArray<ConfigTbscene_module> configTbscene_modules;
}
public struct ConfigTbenvironments
{
    public BlobArray<ConfigTbenvironment> configTbenvironments;
}
public struct ConfigTbscene_bosss
{
    public BlobArray<ConfigTbscene_boss> configTbscene_bosss;
}
public struct ConfigTbskills
{
    public BlobArray<ConfigTbskill> configTbskills;
}
public struct ConfigTbskill_bindings
{
    public BlobArray<ConfigTbskill_binding> configTbskill_bindings;
}
public struct ConfigTbskill_binding_ranks
{
    public BlobArray<ConfigTbskill_binding_rank> configTbskill_binding_ranks;
}
public struct ConfigTbskill_qualitys
{
    public BlobArray<ConfigTbskill_quality> configTbskill_qualitys;
}
public struct ConfigTbspecial_effects
{
    public BlobArray<ConfigTbspecial_effect> configTbspecial_effects;
}
public struct ConfigTbspecial_effect_movements
{
    public BlobArray<ConfigTbspecial_effect_movement> configTbspecial_effect_movements;
}
public struct ConfigTbtalents
{
    public BlobArray<ConfigTbtalent> configTbtalents;
}
public struct ConfigTbtalent_levels
{
    public BlobArray<ConfigTbtalent_level> configTbtalent_levels;
}
public struct ConfigTbweapons
{
    public BlobArray<ConfigTbweapon> configTbweapons;
}
public struct ConfigTbplayer_weapon_indexs
{
    public BlobArray<ConfigTbplayer_weapon_index> configTbplayer_weapon_indexs;
}
public struct ConfigTbannounces
{
    public BlobArray<ConfigTbannounce> configTbannounces;
}
public struct ConfigTbaudios
{
    public BlobArray<ConfigTbaudio> configTbaudios;
}
public struct ConfigTbconstants
{
    public BlobArray<ConfigTbconstant> configTbconstants;
}
public struct ConfigTberrorcodes
{
    public BlobArray<ConfigTberrorcode> configTberrorcodes;
}
public struct ConfigTbguides
{
    public BlobArray<ConfigTbguide> configTbguides;
}
public struct ConfigTbblocks
{
    public BlobArray<ConfigTbblock> configTbblocks;
}
public struct ConfigTbpowers
{
    public BlobArray<ConfigTbpower> configTbpowers;
}
public struct ConfigTbracists
{
    public BlobArray<ConfigTbracist> configTbracists;
}
public struct ConfigTbmails
{
    public BlobArray<ConfigTbmail> configTbmails;
}
public struct ConfigTbqualitys
{
    public BlobArray<ConfigTbquality> configTbqualitys;
}
public struct ConfigTbsettings
{
    public BlobArray<ConfigTbsetting> configTbsettings;
}
public struct ConfigTbsetting_languages
{
    public BlobArray<ConfigTbsetting_language> configTbsetting_languages;
}
public struct ConfigTbshares
{
    public BlobArray<ConfigTbshare> configTbshares;
}
public struct ConfigTbtags
{
    public BlobArray<ConfigTbtag> configTbtags;
}
public struct ConfigTbtag_funcs
{
    public BlobArray<ConfigTbtag_func> configTbtag_funcs;
}
public struct ConfigTbthird_partys
{
    public BlobArray<ConfigTbthird_party> configTbthird_partys;
}
public struct ConfigTbuser_avatars
{
    public BlobArray<ConfigTbuser_avatar> configTbuser_avatars;
}
public struct ConfigTbuser_variables
{
    public BlobArray<ConfigTbuser_variable> configTbuser_variables;
}
public struct ConfigTbuser_levels
{
    public BlobArray<ConfigTbuser_level> configTbuser_levels;
}
public struct ConfigTbplayer_roles
{
    public BlobArray<ConfigTbplayer_role> configTbplayer_roles;
}
public struct ConfigTbdraw_boxs
{
    public BlobArray<ConfigTbdraw_box> configTbdraw_boxs;
}
public struct ConfigTbdraw_banners
{
    public BlobArray<ConfigTbdraw_banner> configTbdraw_banners;
}
public struct ConfigTbdrops
{
    public BlobArray<ConfigTbdrop> configTbdrops;
}
public struct ConfigTbequip_datas
{
    public BlobArray<ConfigTbequip_data> configTbequip_datas;
}
public struct ConfigTbequip_levels
{
    public BlobArray<ConfigTbequip_level> configTbequip_levels;
}
public struct ConfigTbequip_poss
{
    public BlobArray<ConfigTbequip_pos> configTbequip_poss;
}
public struct ConfigTbequip_qualitys
{
    public BlobArray<ConfigTbequip_quality> configTbequip_qualitys;
}
public struct ConfigTbgifts
{
    public BlobArray<ConfigTbgift> configTbgifts;
}
public struct ConfigTbgift_groups
{
    public BlobArray<ConfigTbgift_group> configTbgift_groups;
}
public struct ConfigTbitems
{
    public BlobArray<ConfigTbitem> configTbitems;
}
public struct ConfigTbshop_dailys
{
    public BlobArray<ConfigTbshop_daily> configTbshop_dailys;
}
public struct ConfigTbfunds
{
    public BlobArray<ConfigTbfund> configTbfunds;
}
public struct ConfigTbfund_rewards
{
    public BlobArray<ConfigTbfund_reward> configTbfund_rewards;
}
public struct ConfigTbrecharges
{
    public BlobArray<ConfigTbrecharge> configTbrecharges;
}
public struct ConfigTbprices
{
    public BlobArray<ConfigTbprice> configTbprices;
}
public struct ConfigTbspecialss
{
    public BlobArray<ConfigTbspecials> configTbspecialss;
}
public struct ConfigTbfrs
{
    public BlobArray<ConfigTbfr> configTbfrs;
}
public struct ConfigTbmonthlys
{
    public BlobArray<ConfigTbmonthly> configTbmonthlys;
}
public struct ConfigTbgoodss
{
    public BlobArray<ConfigTbgoods> configTbgoodss;
}
public struct ConfigTbachieves
{
    public BlobArray<ConfigTbachieve> configTbachieves;
}
public struct ConfigTbachieve_groups
{
    public BlobArray<ConfigTbachieve_group> configTbachieve_groups;
}
public struct ConfigTbchallenges
{
    public BlobArray<ConfigTbchallenge> configTbchallenges;
}
public struct ConfigTbchapters
{
    public BlobArray<ConfigTbchapter> configTbchapters;
}
public struct ConfigTbchapter_boxs
{
    public BlobArray<ConfigTbchapter_box> configTbchapter_boxs;
}
public struct ConfigTbsweep_timess
{
    public BlobArray<ConfigTbsweep_times> configTbsweep_timess;
}
public struct ConfigTbsign_dailys
{
    public BlobArray<ConfigTbsign_daily> configTbsign_dailys;
}
public struct ConfigTbsign_accs
{
    public BlobArray<ConfigTbsign_acc> configTbsign_accs;
}
public struct ConfigTbtasks
{
    public BlobArray<ConfigTbtask> configTbtasks;
}
public struct ConfigTbtask_types
{
    public BlobArray<ConfigTbtask_type> configTbtask_types;
}
public struct ConfigTbtask_groups
{
    public BlobArray<ConfigTbtask_group> configTbtask_groups;
}
public struct ConfigTbtask_scores
{
    public BlobArray<ConfigTbtask_score> configTbtask_scores;
}


public static BlobAssetReference<ConfigData> CreateBlob(Tables tables)
{
    var builder = new BlobBuilder(Allocator.Temp);
    ref var root = ref builder.ConstructRoot<ConfigData>();
    BlobBuilderArray<ConfigTbattr_self> configTbattr_selfs = builder.Allocate(
        ref root.configTbattr_selfs.configTbattr_selfs,
        tables.Tbattr_self.DataList.Count);
    for (var i = 0; i < tables.Tbattr_self.DataList.Count; i++)
    {   
        ConfigTbattr_self.Create(i,ref builder,ref configTbattr_selfs,tables);
    }
    BlobBuilderArray<ConfigTbart> configTbarts = builder.Allocate(
        ref root.configTbarts.configTbarts,
        tables.Tbart.DataList.Count);
    for (var i = 0; i < tables.Tbart.DataList.Count; i++)
    {   
        ConfigTbart.Create(i,ref builder,ref configTbarts,tables);
    }
    BlobBuilderArray<ConfigTblanguage> configTblanguages = builder.Allocate(
        ref root.configTblanguages.configTblanguages,
        tables.Tblanguage.DataList.Count);
    for (var i = 0; i < tables.Tblanguage.DataList.Count; i++)
    {   
        ConfigTblanguage.Create(i,ref builder,ref configTblanguages,tables);
    }
    BlobBuilderArray<ConfigTbskill_effectElement> configTbskill_effectElements = builder.Allocate(
        ref root.configTbskill_effectElements.configTbskill_effectElements,
        tables.Tbskill_effectElement.DataList.Count);
    for (var i = 0; i < tables.Tbskill_effectElement.DataList.Count; i++)
    {   
        ConfigTbskill_effectElement.Create(i,ref builder,ref configTbskill_effectElements,tables);
    }
    BlobBuilderArray<ConfigTbskill_effectNew> configTbskill_effectNews = builder.Allocate(
        ref root.configTbskill_effectNews.configTbskill_effectNews,
        tables.Tbskill_effectNew.DataList.Count);
    for (var i = 0; i < tables.Tbskill_effectNew.DataList.Count; i++)
    {   
        ConfigTbskill_effectNew.Create(i,ref builder,ref configTbskill_effectNews,tables);
    }
    BlobBuilderArray<ConfigTbbattle_status> configTbbattle_statuss = builder.Allocate(
        ref root.configTbbattle_statuss.configTbbattle_statuss,
        tables.Tbbattle_status.DataList.Count);
    for (var i = 0; i < tables.Tbbattle_status.DataList.Count; i++)
    {   
        ConfigTbbattle_status.Create(i,ref builder,ref configTbbattle_statuss,tables);
    }
    BlobBuilderArray<ConfigTbbullet> configTbbullets = builder.Allocate(
        ref root.configTbbullets.configTbbullets,
        tables.Tbbullet.DataList.Count);
    for (var i = 0; i < tables.Tbbullet.DataList.Count; i++)
    {   
        ConfigTbbullet.Create(i,ref builder,ref configTbbullets,tables);
    }
    BlobBuilderArray<ConfigTbactivity> configTbactivitys = builder.Allocate(
        ref root.configTbactivitys.configTbactivitys,
        tables.Tbactivity.DataList.Count);
    for (var i = 0; i < tables.Tbactivity.DataList.Count; i++)
    {   
        ConfigTbactivity.Create(i,ref builder,ref configTbactivitys,tables);
    }
    BlobBuilderArray<ConfigTbbattlepass> configTbbattlepasss = builder.Allocate(
        ref root.configTbbattlepasss.configTbbattlepasss,
        tables.Tbbattlepass.DataList.Count);
    for (var i = 0; i < tables.Tbbattlepass.DataList.Count; i++)
    {   
        ConfigTbbattlepass.Create(i,ref builder,ref configTbbattlepasss,tables);
    }
    BlobBuilderArray<ConfigTbbattlepass_exp> configTbbattlepass_exps = builder.Allocate(
        ref root.configTbbattlepass_exps.configTbbattlepass_exps,
        tables.Tbbattlepass_exp.DataList.Count);
    for (var i = 0; i < tables.Tbbattlepass_exp.DataList.Count; i++)
    {   
        ConfigTbbattlepass_exp.Create(i,ref builder,ref configTbbattlepass_exps,tables);
    }
    BlobBuilderArray<ConfigTbbattlepass_reward> configTbbattlepass_rewards = builder.Allocate(
        ref root.configTbbattlepass_rewards.configTbbattlepass_rewards,
        tables.Tbbattlepass_reward.DataList.Count);
    for (var i = 0; i < tables.Tbbattlepass_reward.DataList.Count; i++)
    {   
        ConfigTbbattlepass_reward.Create(i,ref builder,ref configTbbattlepass_rewards,tables);
    }
    BlobBuilderArray<ConfigTbdays_challenge> configTbdays_challenges = builder.Allocate(
        ref root.configTbdays_challenges.configTbdays_challenges,
        tables.Tbdays_challenge.DataList.Count);
    for (var i = 0; i < tables.Tbdays_challenge.DataList.Count; i++)
    {   
        ConfigTbdays_challenge.Create(i,ref builder,ref configTbdays_challenges,tables);
    }
    BlobBuilderArray<ConfigTbdays_sign> configTbdays_signs = builder.Allocate(
        ref root.configTbdays_signs.configTbdays_signs,
        tables.Tbdays_sign.DataList.Count);
    for (var i = 0; i < tables.Tbdays_sign.DataList.Count; i++)
    {   
        ConfigTbdays_sign.Create(i,ref builder,ref configTbdays_signs,tables);
    }
    BlobBuilderArray<ConfigTbenergy_shop> configTbenergy_shops = builder.Allocate(
        ref root.configTbenergy_shops.configTbenergy_shops,
        tables.Tbenergy_shop.DataList.Count);
    for (var i = 0; i < tables.Tbenergy_shop.DataList.Count; i++)
    {   
        ConfigTbenergy_shop.Create(i,ref builder,ref configTbenergy_shops,tables);
    }
    BlobBuilderArray<ConfigTbenergy_shop_goods> configTbenergy_shop_goodss = builder.Allocate(
        ref root.configTbenergy_shop_goodss.configTbenergy_shop_goodss,
        tables.Tbenergy_shop_goods.DataList.Count);
    for (var i = 0; i < tables.Tbenergy_shop_goods.DataList.Count; i++)
    {   
        ConfigTbenergy_shop_goods.Create(i,ref builder,ref configTbenergy_shop_goodss,tables);
    }
    BlobBuilderArray<ConfigTbmonopoly> configTbmonopolys = builder.Allocate(
        ref root.configTbmonopolys.configTbmonopolys,
        tables.Tbmonopoly.DataList.Count);
    for (var i = 0; i < tables.Tbmonopoly.DataList.Count; i++)
    {   
        ConfigTbmonopoly.Create(i,ref builder,ref configTbmonopolys,tables);
    }
    BlobBuilderArray<ConfigTbmonopoly_event> configTbmonopoly_events = builder.Allocate(
        ref root.configTbmonopoly_events.configTbmonopoly_events,
        tables.Tbmonopoly_event.DataList.Count);
    for (var i = 0; i < tables.Tbmonopoly_event.DataList.Count; i++)
    {   
        ConfigTbmonopoly_event.Create(i,ref builder,ref configTbmonopoly_events,tables);
    }
    BlobBuilderArray<ConfigTbmonopoly_cell> configTbmonopoly_cells = builder.Allocate(
        ref root.configTbmonopoly_cells.configTbmonopoly_cells,
        tables.Tbmonopoly_cell.DataList.Count);
    for (var i = 0; i < tables.Tbmonopoly_cell.DataList.Count; i++)
    {   
        ConfigTbmonopoly_cell.Create(i,ref builder,ref configTbmonopoly_cells,tables);
    }
    BlobBuilderArray<ConfigTbmonopoly_shop> configTbmonopoly_shops = builder.Allocate(
        ref root.configTbmonopoly_shops.configTbmonopoly_shops,
        tables.Tbmonopoly_shop.DataList.Count);
    for (var i = 0; i < tables.Tbmonopoly_shop.DataList.Count; i++)
    {   
        ConfigTbmonopoly_shop.Create(i,ref builder,ref configTbmonopoly_shops,tables);
    }
    BlobBuilderArray<ConfigTbmonopoly_event_lotto> configTbmonopoly_event_lottos = builder.Allocate(
        ref root.configTbmonopoly_event_lottos.configTbmonopoly_event_lottos,
        tables.Tbmonopoly_event_lotto.DataList.Count);
    for (var i = 0; i < tables.Tbmonopoly_event_lotto.DataList.Count; i++)
    {   
        ConfigTbmonopoly_event_lotto.Create(i,ref builder,ref configTbmonopoly_event_lottos,tables);
    }
    BlobBuilderArray<ConfigTbpiggy_bank> configTbpiggy_banks = builder.Allocate(
        ref root.configTbpiggy_banks.configTbpiggy_banks,
        tables.Tbpiggy_bank.DataList.Count);
    for (var i = 0; i < tables.Tbpiggy_bank.DataList.Count; i++)
    {   
        ConfigTbpiggy_bank.Create(i,ref builder,ref configTbpiggy_banks,tables);
    }
    BlobBuilderArray<ConfigTbbattleshop_stage> configTbbattleshop_stages = builder.Allocate(
        ref root.configTbbattleshop_stages.configTbbattleshop_stages,
        tables.Tbbattleshop_stage.DataList.Count);
    for (var i = 0; i < tables.Tbbattleshop_stage.DataList.Count; i++)
    {   
        ConfigTbbattleshop_stage.Create(i,ref builder,ref configTbbattleshop_stages,tables);
    }
    BlobBuilderArray<ConfigTbbattleshop_drop> configTbbattleshop_drops = builder.Allocate(
        ref root.configTbbattleshop_drops.configTbbattleshop_drops,
        tables.Tbbattleshop_drop.DataList.Count);
    for (var i = 0; i < tables.Tbbattleshop_drop.DataList.Count; i++)
    {   
        ConfigTbbattleshop_drop.Create(i,ref builder,ref configTbbattleshop_drops,tables);
    }
    BlobBuilderArray<ConfigTbbattletech> configTbbattletechs = builder.Allocate(
        ref root.configTbbattletechs.configTbbattletechs,
        tables.Tbbattletech.DataList.Count);
    for (var i = 0; i < tables.Tbbattletech.DataList.Count; i++)
    {   
        ConfigTbbattletech.Create(i,ref builder,ref configTbbattletechs,tables);
    }
    BlobBuilderArray<ConfigTbbattletech_drop> configTbbattletech_drops = builder.Allocate(
        ref root.configTbbattletech_drops.configTbbattletech_drops,
        tables.Tbbattletech_drop.DataList.Count);
    for (var i = 0; i < tables.Tbbattletech_drop.DataList.Count; i++)
    {   
        ConfigTbbattletech_drop.Create(i,ref builder,ref configTbbattletech_drops,tables);
    }
    BlobBuilderArray<ConfigTbbattle_constant> configTbbattle_constants = builder.Allocate(
        ref root.configTbbattle_constants.configTbbattle_constants,
        tables.Tbbattle_constant.DataList.Count);
    for (var i = 0; i < tables.Tbbattle_constant.DataList.Count; i++)
    {   
        ConfigTbbattle_constant.Create(i,ref builder,ref configTbbattle_constants,tables);
    }
    BlobBuilderArray<ConfigTbattr_variable> configTbattr_variables = builder.Allocate(
        ref root.configTbattr_variables.configTbattr_variables,
        tables.Tbattr_variable.DataList.Count);
    for (var i = 0; i < tables.Tbattr_variable.DataList.Count; i++)
    {   
        ConfigTbattr_variable.Create(i,ref builder,ref configTbattr_variables,tables);
    }
    BlobBuilderArray<ConfigTbbattle_item> configTbbattle_items = builder.Allocate(
        ref root.configTbbattle_items.configTbbattle_items,
        tables.Tbbattle_item.DataList.Count);
    for (var i = 0; i < tables.Tbbattle_item.DataList.Count; i++)
    {   
        ConfigTbbattle_item.Create(i,ref builder,ref configTbbattle_items,tables);
    }
    BlobBuilderArray<ConfigTbbattle_drop> configTbbattle_drops = builder.Allocate(
        ref root.configTbbattle_drops.configTbbattle_drops,
        tables.Tbbattle_drop.DataList.Count);
    for (var i = 0; i < tables.Tbbattle_drop.DataList.Count; i++)
    {   
        ConfigTbbattle_drop.Create(i,ref builder,ref configTbbattle_drops,tables);
    }
    BlobBuilderArray<ConfigTbelement> configTbelements = builder.Allocate(
        ref root.configTbelements.configTbelements,
        tables.Tbelement.DataList.Count);
    for (var i = 0; i < tables.Tbelement.DataList.Count; i++)
    {   
        ConfigTbelement.Create(i,ref builder,ref configTbelements,tables);
    }
    BlobBuilderArray<ConfigTbelement_effect> configTbelement_effects = builder.Allocate(
        ref root.configTbelement_effects.configTbelement_effects,
        tables.Tbelement_effect.DataList.Count);
    for (var i = 0; i < tables.Tbelement_effect.DataList.Count; i++)
    {   
        ConfigTbelement_effect.Create(i,ref builder,ref configTbelement_effects,tables);
    }
    BlobBuilderArray<ConfigTbevent_0> configTbevent_0s = builder.Allocate(
        ref root.configTbevent_0s.configTbevent_0s,
        tables.Tbevent_0.DataList.Count);
    for (var i = 0; i < tables.Tbevent_0.DataList.Count; i++)
    {   
        ConfigTbevent_0.Create(i,ref builder,ref configTbevent_0s,tables);
    }
    BlobBuilderArray<ConfigTbanecdote> configTbanecdotes = builder.Allocate(
        ref root.configTbanecdotes.configTbanecdotes,
        tables.Tbanecdote.DataList.Count);
    for (var i = 0; i < tables.Tbanecdote.DataList.Count; i++)
    {   
        ConfigTbanecdote.Create(i,ref builder,ref configTbanecdotes,tables);
    }
    BlobBuilderArray<ConfigTbevent_type> configTbevent_types = builder.Allocate(
        ref root.configTbevent_types.configTbevent_types,
        tables.Tbevent_type.DataList.Count);
    for (var i = 0; i < tables.Tbevent_type.DataList.Count; i++)
    {   
        ConfigTbevent_type.Create(i,ref builder,ref configTbevent_types,tables);
    }
    BlobBuilderArray<ConfigTblevel> configTblevels = builder.Allocate(
        ref root.configTblevels.configTblevels,
        tables.Tblevel.DataList.Count);
    for (var i = 0; i < tables.Tblevel.DataList.Count; i++)
    {   
        ConfigTblevel.Create(i,ref builder,ref configTblevels,tables);
    }
    BlobBuilderArray<ConfigTbmonster> configTbmonsters = builder.Allocate(
        ref root.configTbmonsters.configTbmonsters,
        tables.Tbmonster.DataList.Count);
    for (var i = 0; i < tables.Tbmonster.DataList.Count; i++)
    {   
        ConfigTbmonster.Create(i,ref builder,ref configTbmonsters,tables);
    }
    BlobBuilderArray<ConfigTbmonster_attr> configTbmonster_attrs = builder.Allocate(
        ref root.configTbmonster_attrs.configTbmonster_attrs,
        tables.Tbmonster_attr.DataList.Count);
    for (var i = 0; i < tables.Tbmonster_attr.DataList.Count; i++)
    {   
        ConfigTbmonster_attr.Create(i,ref builder,ref configTbmonster_attrs,tables);
    }
    BlobBuilderArray<ConfigTbmonster_feature> configTbmonster_features = builder.Allocate(
        ref root.configTbmonster_features.configTbmonster_features,
        tables.Tbmonster_feature.DataList.Count);
    for (var i = 0; i < tables.Tbmonster_feature.DataList.Count; i++)
    {   
        ConfigTbmonster_feature.Create(i,ref builder,ref configTbmonster_features,tables);
    }
    BlobBuilderArray<ConfigTbmonster_type> configTbmonster_types = builder.Allocate(
        ref root.configTbmonster_types.configTbmonster_types,
        tables.Tbmonster_type.DataList.Count);
    for (var i = 0; i < tables.Tbmonster_type.DataList.Count; i++)
    {   
        ConfigTbmonster_type.Create(i,ref builder,ref configTbmonster_types,tables);
    }
    BlobBuilderArray<ConfigTbmodule_refresh> configTbmodule_refreshs = builder.Allocate(
        ref root.configTbmodule_refreshs.configTbmodule_refreshs,
        tables.Tbmodule_refresh.DataList.Count);
    for (var i = 0; i < tables.Tbmodule_refresh.DataList.Count; i++)
    {   
        ConfigTbmodule_refresh.Create(i,ref builder,ref configTbmodule_refreshs,tables);
    }
    BlobBuilderArray<ConfigTbmodule_template> configTbmodule_templates = builder.Allocate(
        ref root.configTbmodule_templates.configTbmodule_templates,
        tables.Tbmodule_template.DataList.Count);
    for (var i = 0; i < tables.Tbmodule_template.DataList.Count; i++)
    {   
        ConfigTbmodule_template.Create(i,ref builder,ref configTbmodule_templates,tables);
    }
    BlobBuilderArray<ConfigTbmonster_template> configTbmonster_templates = builder.Allocate(
        ref root.configTbmonster_templates.configTbmonster_templates,
        tables.Tbmonster_template.DataList.Count);
    for (var i = 0; i < tables.Tbmonster_template.DataList.Count; i++)
    {   
        ConfigTbmonster_template.Create(i,ref builder,ref configTbmonster_templates,tables);
    }
    BlobBuilderArray<ConfigTbmonster_foration> configTbmonster_forations = builder.Allocate(
        ref root.configTbmonster_forations.configTbmonster_forations,
        tables.Tbmonster_foration.DataList.Count);
    for (var i = 0; i < tables.Tbmonster_foration.DataList.Count; i++)
    {   
        ConfigTbmonster_foration.Create(i,ref builder,ref configTbmonster_forations,tables);
    }
    BlobBuilderArray<ConfigTbscene> configTbscenes = builder.Allocate(
        ref root.configTbscenes.configTbscenes,
        tables.Tbscene.DataList.Count);
    for (var i = 0; i < tables.Tbscene.DataList.Count; i++)
    {   
        ConfigTbscene.Create(i,ref builder,ref configTbscenes,tables);
    }
    BlobBuilderArray<ConfigTbscene_module> configTbscene_modules = builder.Allocate(
        ref root.configTbscene_modules.configTbscene_modules,
        tables.Tbscene_module.DataList.Count);
    for (var i = 0; i < tables.Tbscene_module.DataList.Count; i++)
    {   
        ConfigTbscene_module.Create(i,ref builder,ref configTbscene_modules,tables);
    }
    BlobBuilderArray<ConfigTbenvironment> configTbenvironments = builder.Allocate(
        ref root.configTbenvironments.configTbenvironments,
        tables.Tbenvironment.DataList.Count);
    for (var i = 0; i < tables.Tbenvironment.DataList.Count; i++)
    {   
        ConfigTbenvironment.Create(i,ref builder,ref configTbenvironments,tables);
    }
    BlobBuilderArray<ConfigTbscene_boss> configTbscene_bosss = builder.Allocate(
        ref root.configTbscene_bosss.configTbscene_bosss,
        tables.Tbscene_boss.DataList.Count);
    for (var i = 0; i < tables.Tbscene_boss.DataList.Count; i++)
    {   
        ConfigTbscene_boss.Create(i,ref builder,ref configTbscene_bosss,tables);
    }
    BlobBuilderArray<ConfigTbskill> configTbskills = builder.Allocate(
        ref root.configTbskills.configTbskills,
        tables.Tbskill.DataList.Count);
    for (var i = 0; i < tables.Tbskill.DataList.Count; i++)
    {   
        ConfigTbskill.Create(i,ref builder,ref configTbskills,tables);
    }
    BlobBuilderArray<ConfigTbskill_binding> configTbskill_bindings = builder.Allocate(
        ref root.configTbskill_bindings.configTbskill_bindings,
        tables.Tbskill_binding.DataList.Count);
    for (var i = 0; i < tables.Tbskill_binding.DataList.Count; i++)
    {   
        ConfigTbskill_binding.Create(i,ref builder,ref configTbskill_bindings,tables);
    }
    BlobBuilderArray<ConfigTbskill_binding_rank> configTbskill_binding_ranks = builder.Allocate(
        ref root.configTbskill_binding_ranks.configTbskill_binding_ranks,
        tables.Tbskill_binding_rank.DataList.Count);
    for (var i = 0; i < tables.Tbskill_binding_rank.DataList.Count; i++)
    {   
        ConfigTbskill_binding_rank.Create(i,ref builder,ref configTbskill_binding_ranks,tables);
    }
    BlobBuilderArray<ConfigTbskill_quality> configTbskill_qualitys = builder.Allocate(
        ref root.configTbskill_qualitys.configTbskill_qualitys,
        tables.Tbskill_quality.DataList.Count);
    for (var i = 0; i < tables.Tbskill_quality.DataList.Count; i++)
    {   
        ConfigTbskill_quality.Create(i,ref builder,ref configTbskill_qualitys,tables);
    }
    BlobBuilderArray<ConfigTbspecial_effect> configTbspecial_effects = builder.Allocate(
        ref root.configTbspecial_effects.configTbspecial_effects,
        tables.Tbspecial_effect.DataList.Count);
    for (var i = 0; i < tables.Tbspecial_effect.DataList.Count; i++)
    {   
        ConfigTbspecial_effect.Create(i,ref builder,ref configTbspecial_effects,tables);
    }
    BlobBuilderArray<ConfigTbspecial_effect_movement> configTbspecial_effect_movements = builder.Allocate(
        ref root.configTbspecial_effect_movements.configTbspecial_effect_movements,
        tables.Tbspecial_effect_movement.DataList.Count);
    for (var i = 0; i < tables.Tbspecial_effect_movement.DataList.Count; i++)
    {   
        ConfigTbspecial_effect_movement.Create(i,ref builder,ref configTbspecial_effect_movements,tables);
    }
    BlobBuilderArray<ConfigTbtalent> configTbtalents = builder.Allocate(
        ref root.configTbtalents.configTbtalents,
        tables.Tbtalent.DataList.Count);
    for (var i = 0; i < tables.Tbtalent.DataList.Count; i++)
    {   
        ConfigTbtalent.Create(i,ref builder,ref configTbtalents,tables);
    }
    BlobBuilderArray<ConfigTbtalent_level> configTbtalent_levels = builder.Allocate(
        ref root.configTbtalent_levels.configTbtalent_levels,
        tables.Tbtalent_level.DataList.Count);
    for (var i = 0; i < tables.Tbtalent_level.DataList.Count; i++)
    {   
        ConfigTbtalent_level.Create(i,ref builder,ref configTbtalent_levels,tables);
    }
    BlobBuilderArray<ConfigTbweapon> configTbweapons = builder.Allocate(
        ref root.configTbweapons.configTbweapons,
        tables.Tbweapon.DataList.Count);
    for (var i = 0; i < tables.Tbweapon.DataList.Count; i++)
    {   
        ConfigTbweapon.Create(i,ref builder,ref configTbweapons,tables);
    }
    BlobBuilderArray<ConfigTbplayer_weapon_index> configTbplayer_weapon_indexs = builder.Allocate(
        ref root.configTbplayer_weapon_indexs.configTbplayer_weapon_indexs,
        tables.Tbplayer_weapon_index.DataList.Count);
    for (var i = 0; i < tables.Tbplayer_weapon_index.DataList.Count; i++)
    {   
        ConfigTbplayer_weapon_index.Create(i,ref builder,ref configTbplayer_weapon_indexs,tables);
    }
    BlobBuilderArray<ConfigTbannounce> configTbannounces = builder.Allocate(
        ref root.configTbannounces.configTbannounces,
        tables.Tbannounce.DataList.Count);
    for (var i = 0; i < tables.Tbannounce.DataList.Count; i++)
    {   
        ConfigTbannounce.Create(i,ref builder,ref configTbannounces,tables);
    }
    BlobBuilderArray<ConfigTbaudio> configTbaudios = builder.Allocate(
        ref root.configTbaudios.configTbaudios,
        tables.Tbaudio.DataList.Count);
    for (var i = 0; i < tables.Tbaudio.DataList.Count; i++)
    {   
        ConfigTbaudio.Create(i,ref builder,ref configTbaudios,tables);
    }
    BlobBuilderArray<ConfigTbconstant> configTbconstants = builder.Allocate(
        ref root.configTbconstants.configTbconstants,
        tables.Tbconstant.DataList.Count);
    for (var i = 0; i < tables.Tbconstant.DataList.Count; i++)
    {   
        ConfigTbconstant.Create(i,ref builder,ref configTbconstants,tables);
    }
    BlobBuilderArray<ConfigTberrorcode> configTberrorcodes = builder.Allocate(
        ref root.configTberrorcodes.configTberrorcodes,
        tables.Tberrorcode.DataList.Count);
    for (var i = 0; i < tables.Tberrorcode.DataList.Count; i++)
    {   
        ConfigTberrorcode.Create(i,ref builder,ref configTberrorcodes,tables);
    }
    BlobBuilderArray<ConfigTbguide> configTbguides = builder.Allocate(
        ref root.configTbguides.configTbguides,
        tables.Tbguide.DataList.Count);
    for (var i = 0; i < tables.Tbguide.DataList.Count; i++)
    {   
        ConfigTbguide.Create(i,ref builder,ref configTbguides,tables);
    }
    BlobBuilderArray<ConfigTbblock> configTbblocks = builder.Allocate(
        ref root.configTbblocks.configTbblocks,
        tables.Tbblock.DataList.Count);
    for (var i = 0; i < tables.Tbblock.DataList.Count; i++)
    {   
        ConfigTbblock.Create(i,ref builder,ref configTbblocks,tables);
    }
    BlobBuilderArray<ConfigTbpower> configTbpowers = builder.Allocate(
        ref root.configTbpowers.configTbpowers,
        tables.Tbpower.DataList.Count);
    for (var i = 0; i < tables.Tbpower.DataList.Count; i++)
    {   
        ConfigTbpower.Create(i,ref builder,ref configTbpowers,tables);
    }
    BlobBuilderArray<ConfigTbracist> configTbracists = builder.Allocate(
        ref root.configTbracists.configTbracists,
        tables.Tbracist.DataList.Count);
    for (var i = 0; i < tables.Tbracist.DataList.Count; i++)
    {   
        ConfigTbracist.Create(i,ref builder,ref configTbracists,tables);
    }
    BlobBuilderArray<ConfigTbmail> configTbmails = builder.Allocate(
        ref root.configTbmails.configTbmails,
        tables.Tbmail.DataList.Count);
    for (var i = 0; i < tables.Tbmail.DataList.Count; i++)
    {   
        ConfigTbmail.Create(i,ref builder,ref configTbmails,tables);
    }
    BlobBuilderArray<ConfigTbquality> configTbqualitys = builder.Allocate(
        ref root.configTbqualitys.configTbqualitys,
        tables.Tbquality.DataList.Count);
    for (var i = 0; i < tables.Tbquality.DataList.Count; i++)
    {   
        ConfigTbquality.Create(i,ref builder,ref configTbqualitys,tables);
    }
    BlobBuilderArray<ConfigTbsetting> configTbsettings = builder.Allocate(
        ref root.configTbsettings.configTbsettings,
        tables.Tbsetting.DataList.Count);
    for (var i = 0; i < tables.Tbsetting.DataList.Count; i++)
    {   
        ConfigTbsetting.Create(i,ref builder,ref configTbsettings,tables);
    }
    BlobBuilderArray<ConfigTbsetting_language> configTbsetting_languages = builder.Allocate(
        ref root.configTbsetting_languages.configTbsetting_languages,
        tables.Tbsetting_language.DataList.Count);
    for (var i = 0; i < tables.Tbsetting_language.DataList.Count; i++)
    {   
        ConfigTbsetting_language.Create(i,ref builder,ref configTbsetting_languages,tables);
    }
    BlobBuilderArray<ConfigTbshare> configTbshares = builder.Allocate(
        ref root.configTbshares.configTbshares,
        tables.Tbshare.DataList.Count);
    for (var i = 0; i < tables.Tbshare.DataList.Count; i++)
    {   
        ConfigTbshare.Create(i,ref builder,ref configTbshares,tables);
    }
    BlobBuilderArray<ConfigTbtag> configTbtags = builder.Allocate(
        ref root.configTbtags.configTbtags,
        tables.Tbtag.DataList.Count);
    for (var i = 0; i < tables.Tbtag.DataList.Count; i++)
    {   
        ConfigTbtag.Create(i,ref builder,ref configTbtags,tables);
    }
    BlobBuilderArray<ConfigTbtag_func> configTbtag_funcs = builder.Allocate(
        ref root.configTbtag_funcs.configTbtag_funcs,
        tables.Tbtag_func.DataList.Count);
    for (var i = 0; i < tables.Tbtag_func.DataList.Count; i++)
    {   
        ConfigTbtag_func.Create(i,ref builder,ref configTbtag_funcs,tables);
    }
    BlobBuilderArray<ConfigTbthird_party> configTbthird_partys = builder.Allocate(
        ref root.configTbthird_partys.configTbthird_partys,
        tables.Tbthird_party.DataList.Count);
    for (var i = 0; i < tables.Tbthird_party.DataList.Count; i++)
    {   
        ConfigTbthird_party.Create(i,ref builder,ref configTbthird_partys,tables);
    }
    BlobBuilderArray<ConfigTbuser_avatar> configTbuser_avatars = builder.Allocate(
        ref root.configTbuser_avatars.configTbuser_avatars,
        tables.Tbuser_avatar.DataList.Count);
    for (var i = 0; i < tables.Tbuser_avatar.DataList.Count; i++)
    {   
        ConfigTbuser_avatar.Create(i,ref builder,ref configTbuser_avatars,tables);
    }
    BlobBuilderArray<ConfigTbuser_variable> configTbuser_variables = builder.Allocate(
        ref root.configTbuser_variables.configTbuser_variables,
        tables.Tbuser_variable.DataList.Count);
    for (var i = 0; i < tables.Tbuser_variable.DataList.Count; i++)
    {   
        ConfigTbuser_variable.Create(i,ref builder,ref configTbuser_variables,tables);
    }
    BlobBuilderArray<ConfigTbuser_level> configTbuser_levels = builder.Allocate(
        ref root.configTbuser_levels.configTbuser_levels,
        tables.Tbuser_level.DataList.Count);
    for (var i = 0; i < tables.Tbuser_level.DataList.Count; i++)
    {   
        ConfigTbuser_level.Create(i,ref builder,ref configTbuser_levels,tables);
    }
    BlobBuilderArray<ConfigTbplayer_role> configTbplayer_roles = builder.Allocate(
        ref root.configTbplayer_roles.configTbplayer_roles,
        tables.Tbplayer_role.DataList.Count);
    for (var i = 0; i < tables.Tbplayer_role.DataList.Count; i++)
    {   
        ConfigTbplayer_role.Create(i,ref builder,ref configTbplayer_roles,tables);
    }
    BlobBuilderArray<ConfigTbdraw_box> configTbdraw_boxs = builder.Allocate(
        ref root.configTbdraw_boxs.configTbdraw_boxs,
        tables.Tbdraw_box.DataList.Count);
    for (var i = 0; i < tables.Tbdraw_box.DataList.Count; i++)
    {   
        ConfigTbdraw_box.Create(i,ref builder,ref configTbdraw_boxs,tables);
    }
    BlobBuilderArray<ConfigTbdraw_banner> configTbdraw_banners = builder.Allocate(
        ref root.configTbdraw_banners.configTbdraw_banners,
        tables.Tbdraw_banner.DataList.Count);
    for (var i = 0; i < tables.Tbdraw_banner.DataList.Count; i++)
    {   
        ConfigTbdraw_banner.Create(i,ref builder,ref configTbdraw_banners,tables);
    }
    BlobBuilderArray<ConfigTbdrop> configTbdrops = builder.Allocate(
        ref root.configTbdrops.configTbdrops,
        tables.Tbdrop.DataList.Count);
    for (var i = 0; i < tables.Tbdrop.DataList.Count; i++)
    {   
        ConfigTbdrop.Create(i,ref builder,ref configTbdrops,tables);
    }
    BlobBuilderArray<ConfigTbequip_data> configTbequip_datas = builder.Allocate(
        ref root.configTbequip_datas.configTbequip_datas,
        tables.Tbequip_data.DataList.Count);
    for (var i = 0; i < tables.Tbequip_data.DataList.Count; i++)
    {   
        ConfigTbequip_data.Create(i,ref builder,ref configTbequip_datas,tables);
    }
    BlobBuilderArray<ConfigTbequip_level> configTbequip_levels = builder.Allocate(
        ref root.configTbequip_levels.configTbequip_levels,
        tables.Tbequip_level.DataList.Count);
    for (var i = 0; i < tables.Tbequip_level.DataList.Count; i++)
    {   
        ConfigTbequip_level.Create(i,ref builder,ref configTbequip_levels,tables);
    }
    BlobBuilderArray<ConfigTbequip_pos> configTbequip_poss = builder.Allocate(
        ref root.configTbequip_poss.configTbequip_poss,
        tables.Tbequip_pos.DataList.Count);
    for (var i = 0; i < tables.Tbequip_pos.DataList.Count; i++)
    {   
        ConfigTbequip_pos.Create(i,ref builder,ref configTbequip_poss,tables);
    }
    BlobBuilderArray<ConfigTbequip_quality> configTbequip_qualitys = builder.Allocate(
        ref root.configTbequip_qualitys.configTbequip_qualitys,
        tables.Tbequip_quality.DataList.Count);
    for (var i = 0; i < tables.Tbequip_quality.DataList.Count; i++)
    {   
        ConfigTbequip_quality.Create(i,ref builder,ref configTbequip_qualitys,tables);
    }
    BlobBuilderArray<ConfigTbgift> configTbgifts = builder.Allocate(
        ref root.configTbgifts.configTbgifts,
        tables.Tbgift.DataList.Count);
    for (var i = 0; i < tables.Tbgift.DataList.Count; i++)
    {   
        ConfigTbgift.Create(i,ref builder,ref configTbgifts,tables);
    }
    BlobBuilderArray<ConfigTbgift_group> configTbgift_groups = builder.Allocate(
        ref root.configTbgift_groups.configTbgift_groups,
        tables.Tbgift_group.DataList.Count);
    for (var i = 0; i < tables.Tbgift_group.DataList.Count; i++)
    {   
        ConfigTbgift_group.Create(i,ref builder,ref configTbgift_groups,tables);
    }
    BlobBuilderArray<ConfigTbitem> configTbitems = builder.Allocate(
        ref root.configTbitems.configTbitems,
        tables.Tbitem.DataList.Count);
    for (var i = 0; i < tables.Tbitem.DataList.Count; i++)
    {   
        ConfigTbitem.Create(i,ref builder,ref configTbitems,tables);
    }
    BlobBuilderArray<ConfigTbshop_daily> configTbshop_dailys = builder.Allocate(
        ref root.configTbshop_dailys.configTbshop_dailys,
        tables.Tbshop_daily.DataList.Count);
    for (var i = 0; i < tables.Tbshop_daily.DataList.Count; i++)
    {   
        ConfigTbshop_daily.Create(i,ref builder,ref configTbshop_dailys,tables);
    }
    BlobBuilderArray<ConfigTbfund> configTbfunds = builder.Allocate(
        ref root.configTbfunds.configTbfunds,
        tables.Tbfund.DataList.Count);
    for (var i = 0; i < tables.Tbfund.DataList.Count; i++)
    {   
        ConfigTbfund.Create(i,ref builder,ref configTbfunds,tables);
    }
    BlobBuilderArray<ConfigTbfund_reward> configTbfund_rewards = builder.Allocate(
        ref root.configTbfund_rewards.configTbfund_rewards,
        tables.Tbfund_reward.DataList.Count);
    for (var i = 0; i < tables.Tbfund_reward.DataList.Count; i++)
    {   
        ConfigTbfund_reward.Create(i,ref builder,ref configTbfund_rewards,tables);
    }
    BlobBuilderArray<ConfigTbrecharge> configTbrecharges = builder.Allocate(
        ref root.configTbrecharges.configTbrecharges,
        tables.Tbrecharge.DataList.Count);
    for (var i = 0; i < tables.Tbrecharge.DataList.Count; i++)
    {   
        ConfigTbrecharge.Create(i,ref builder,ref configTbrecharges,tables);
    }
    BlobBuilderArray<ConfigTbprice> configTbprices = builder.Allocate(
        ref root.configTbprices.configTbprices,
        tables.Tbprice.DataList.Count);
    for (var i = 0; i < tables.Tbprice.DataList.Count; i++)
    {   
        ConfigTbprice.Create(i,ref builder,ref configTbprices,tables);
    }
    BlobBuilderArray<ConfigTbspecials> configTbspecialss = builder.Allocate(
        ref root.configTbspecialss.configTbspecialss,
        tables.Tbspecials.DataList.Count);
    for (var i = 0; i < tables.Tbspecials.DataList.Count; i++)
    {   
        ConfigTbspecials.Create(i,ref builder,ref configTbspecialss,tables);
    }
    BlobBuilderArray<ConfigTbfr> configTbfrs = builder.Allocate(
        ref root.configTbfrs.configTbfrs,
        tables.Tbfr.DataList.Count);
    for (var i = 0; i < tables.Tbfr.DataList.Count; i++)
    {   
        ConfigTbfr.Create(i,ref builder,ref configTbfrs,tables);
    }
    BlobBuilderArray<ConfigTbmonthly> configTbmonthlys = builder.Allocate(
        ref root.configTbmonthlys.configTbmonthlys,
        tables.Tbmonthly.DataList.Count);
    for (var i = 0; i < tables.Tbmonthly.DataList.Count; i++)
    {   
        ConfigTbmonthly.Create(i,ref builder,ref configTbmonthlys,tables);
    }
    BlobBuilderArray<ConfigTbgoods> configTbgoodss = builder.Allocate(
        ref root.configTbgoodss.configTbgoodss,
        tables.Tbgoods.DataList.Count);
    for (var i = 0; i < tables.Tbgoods.DataList.Count; i++)
    {   
        ConfigTbgoods.Create(i,ref builder,ref configTbgoodss,tables);
    }
    BlobBuilderArray<ConfigTbachieve> configTbachieves = builder.Allocate(
        ref root.configTbachieves.configTbachieves,
        tables.Tbachieve.DataList.Count);
    for (var i = 0; i < tables.Tbachieve.DataList.Count; i++)
    {   
        ConfigTbachieve.Create(i,ref builder,ref configTbachieves,tables);
    }
    BlobBuilderArray<ConfigTbachieve_group> configTbachieve_groups = builder.Allocate(
        ref root.configTbachieve_groups.configTbachieve_groups,
        tables.Tbachieve_group.DataList.Count);
    for (var i = 0; i < tables.Tbachieve_group.DataList.Count; i++)
    {   
        ConfigTbachieve_group.Create(i,ref builder,ref configTbachieve_groups,tables);
    }
    BlobBuilderArray<ConfigTbchallenge> configTbchallenges = builder.Allocate(
        ref root.configTbchallenges.configTbchallenges,
        tables.Tbchallenge.DataList.Count);
    for (var i = 0; i < tables.Tbchallenge.DataList.Count; i++)
    {   
        ConfigTbchallenge.Create(i,ref builder,ref configTbchallenges,tables);
    }
    BlobBuilderArray<ConfigTbchapter> configTbchapters = builder.Allocate(
        ref root.configTbchapters.configTbchapters,
        tables.Tbchapter.DataList.Count);
    for (var i = 0; i < tables.Tbchapter.DataList.Count; i++)
    {   
        ConfigTbchapter.Create(i,ref builder,ref configTbchapters,tables);
    }
    BlobBuilderArray<ConfigTbchapter_box> configTbchapter_boxs = builder.Allocate(
        ref root.configTbchapter_boxs.configTbchapter_boxs,
        tables.Tbchapter_box.DataList.Count);
    for (var i = 0; i < tables.Tbchapter_box.DataList.Count; i++)
    {   
        ConfigTbchapter_box.Create(i,ref builder,ref configTbchapter_boxs,tables);
    }
    BlobBuilderArray<ConfigTbsweep_times> configTbsweep_timess = builder.Allocate(
        ref root.configTbsweep_timess.configTbsweep_timess,
        tables.Tbsweep_times.DataList.Count);
    for (var i = 0; i < tables.Tbsweep_times.DataList.Count; i++)
    {   
        ConfigTbsweep_times.Create(i,ref builder,ref configTbsweep_timess,tables);
    }
    BlobBuilderArray<ConfigTbsign_daily> configTbsign_dailys = builder.Allocate(
        ref root.configTbsign_dailys.configTbsign_dailys,
        tables.Tbsign_daily.DataList.Count);
    for (var i = 0; i < tables.Tbsign_daily.DataList.Count; i++)
    {   
        ConfigTbsign_daily.Create(i,ref builder,ref configTbsign_dailys,tables);
    }
    BlobBuilderArray<ConfigTbsign_acc> configTbsign_accs = builder.Allocate(
        ref root.configTbsign_accs.configTbsign_accs,
        tables.Tbsign_acc.DataList.Count);
    for (var i = 0; i < tables.Tbsign_acc.DataList.Count; i++)
    {   
        ConfigTbsign_acc.Create(i,ref builder,ref configTbsign_accs,tables);
    }
    BlobBuilderArray<ConfigTbtask> configTbtasks = builder.Allocate(
        ref root.configTbtasks.configTbtasks,
        tables.Tbtask.DataList.Count);
    for (var i = 0; i < tables.Tbtask.DataList.Count; i++)
    {   
        ConfigTbtask.Create(i,ref builder,ref configTbtasks,tables);
    }
    BlobBuilderArray<ConfigTbtask_type> configTbtask_types = builder.Allocate(
        ref root.configTbtask_types.configTbtask_types,
        tables.Tbtask_type.DataList.Count);
    for (var i = 0; i < tables.Tbtask_type.DataList.Count; i++)
    {   
        ConfigTbtask_type.Create(i,ref builder,ref configTbtask_types,tables);
    }
    BlobBuilderArray<ConfigTbtask_group> configTbtask_groups = builder.Allocate(
        ref root.configTbtask_groups.configTbtask_groups,
        tables.Tbtask_group.DataList.Count);
    for (var i = 0; i < tables.Tbtask_group.DataList.Count; i++)
    {   
        ConfigTbtask_group.Create(i,ref builder,ref configTbtask_groups,tables);
    }
    BlobBuilderArray<ConfigTbtask_score> configTbtask_scores = builder.Allocate(
        ref root.configTbtask_scores.configTbtask_scores,
        tables.Tbtask_score.DataList.Count);
    for (var i = 0; i < tables.Tbtask_score.DataList.Count; i++)
    {   
        ConfigTbtask_score.Create(i,ref builder,ref configTbtask_scores,tables);
    }
    var result = builder.CreateBlobAssetReference<ConfigData>(Allocator.Persistent);
    builder.Dispose();
    return result;
}
}}