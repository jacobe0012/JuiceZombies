对应接口：查询金猪功能15-1
功能描述：查询金猪状态，根据时间调整
代码逻辑梳理：
第一步：查出金猪数据
第二步：查出redis上记录的刷新标记设置标记（gm定时任务扫描消失时间，如果活动金猪时间到，设置为类型1的常驻金猪）
第三步：没有倒计时
		1分支 gm生效时间 > 当前时间 不做处理直接返回当前数据库记录
		2分支 类型相等 消失时间 + 刷新cd > 当前时间 直接返回数据库数据
		3分支 类型相等 消失时间 + 刷新cd <= 当前时间 走刷新逻辑（刷新逻辑里面类型1全部购买返回null）
		4分支 类型不相等 符合更新类型逻辑，更新类型逻辑(更新类型逻辑里面类型1全部购买返回null)
第四步：有倒计时
		1分支 gm生效时间 > 当前时间 倒计时结束 跳过当前档位，倒计时未结束直接返回
		2分支 gm生效时间 < 当前时间 倒计时结束 当前类型与gm设置类型一致 跳过当前档位（跳档逻辑，获取当前类型所在等级的下一级（比它大的等级））
		3分支 gm生效时间 < 当前时间 倒计时结束 当前类型与gm设置类型不一致 ，当前版本执行过类型改变（gm生效时间与 db中记录GoldBankTime 时间是否一致）跳档 否则更新类型
		4分支 gm生效时间 < 当前时间倒计时没结束 直接返回当前数据
		  @Id
    @Field(targetType = FieldType.STRING)
    Long roleId;

    /**
     * 金猪未购买档位 类型，档位
     */
    Map<Integer, List<Integer>> pigMap;

    /**
     * 类型
     */
    Integer pigType;

    /**
     * 当前金猪档位
     */
    Integer pigLevel;

    /**
     * 解锁 0 未解锁 1 已解锁
     *
     */
    Integer unlock;

    /**
     * 当前金币存量 存满为止
     */
    Integer goldBank;

    /**
     * 当前金猪倒计时结束时间
     */
    Long countdown;

    /**
     * 消失时间（s）
     */
    Long absentTime;

    /**
     * 当前金猪的生效时间(gm修改类型的时间)
     */
    Long goldBankTime;
	
	****************************************删除字段，为了做热更数据必要修改结构前端也需要相应调整（以前账户金猪数据作废）***********************************
	    /**
     * 金猪类型1默认未购买档位
     */
    List<Integer> pigList;

    /**
     * 金猪非类型1的所有未购买档位 2;1 2;2(2 是类型1得档位)
     */
    List<String> otherPigList;