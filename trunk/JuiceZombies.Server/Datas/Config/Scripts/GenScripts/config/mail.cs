//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class mail :  Bright.Config.BeanBase 
{
    public mail(JSONNode _json) 
    {
        { if(!_json["telempate_id"].IsNumber) { throw new SerializationException(); }  telempateId = _json["telempate_id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["title_gm"].IsString) { throw new SerializationException(); }  titleGm = _json["title_gm"]; }
        { if(!_json["content_gm"].IsString) { throw new SerializationException(); }  contentGm = _json["content_gm"]; }
        { var __json0 = _json["para"]; if(!__json0.IsArray) { throw new SerializationException(); } para = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  para.Add(__v0); }   }
        { if(!_json["valid"].IsNumber) { throw new SerializationException(); }  valid = _json["valid"]; }
        { var __json0 = _json["reward"]; if(!__json0.IsArray) { throw new SerializationException(); } reward = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  reward.Add(__v0); }   }
        PostInit();
    }

    public mail(int telempate_id, int type, string title_gm, string content_gm, System.Collections.Generic.List<string> para, int valid, System.Collections.Generic.List<UnityEngine.Vector3> reward ) 
    {
        this.telempateId = telempate_id;
        this.type = type;
        this.titleGm = title_gm;
        this.contentGm = content_gm;
        this.para = para;
        this.valid = valid;
        this.reward = reward;
        PostInit();
    }

    public static mail Deserializemail(JSONNode _json)
    {
        return new config.mail(_json);
    }

    /// <summary>
    /// 邮件id
    /// </summary>
    public int telempateId { get; private set; }
    /// <summary>
    /// 邮件类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 邮件标题(GM)
    /// </summary>
    public string titleGm { get; private set; }
    /// <summary>
    /// 邮件正文(GM)
    /// </summary>
    public string contentGm { get; private set; }
    /// <summary>
    /// 文本参数
    /// </summary>
    public System.Collections.Generic.List<string> para { get; private set; }
    /// <summary>
    /// 有效期(天数)
    /// </summary>
    public int valid { get; private set; }
    /// <summary>
    /// 奖励
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> reward { get; private set; }

    public const int __ID__ = -27953949;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "telempateId:" + telempateId + ","
        + "type:" + type + ","
        + "titleGm:" + titleGm + ","
        + "contentGm:" + contentGm + ","
        + "para:" + Bright.Common.StringUtil.CollectionToString(para) + ","
        + "valid:" + valid + ","
        + "reward:" + Bright.Common.StringUtil.CollectionToString(reward) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
