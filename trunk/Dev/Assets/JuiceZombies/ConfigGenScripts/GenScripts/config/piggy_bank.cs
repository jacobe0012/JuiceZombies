//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class piggy_bank :  Bright.Config.BeanBase 
{
    public piggy_bank(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["pic"].IsString) { throw new SerializationException(); }  pic = _json["pic"]; }
        { if(!_json["tag_func"].IsNumber) { throw new SerializationException(); }  tagFunc = _json["tag_func"]; }
        { if(!_json["price"].IsNumber) { throw new SerializationException(); }  price = _json["price"]; }
        { if(!_json["base_0"].IsNumber) { throw new SerializationException(); }  base0 = _json["base_0"]; }
        { if(!_json["full"].IsNumber) { throw new SerializationException(); }  full = _json["full"]; }
        { if(!_json["unit"].IsNumber) { throw new SerializationException(); }  unit = _json["unit"]; }
        { var __json0 = _json["reward"]; if(!__json0.IsArray) { throw new SerializationException(); } reward = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  reward.Add(__v0); }   }
        { if(!_json["sort"].IsNumber) { throw new SerializationException(); }  sort = _json["sort"]; }
        PostInit();
    }

    public piggy_bank(int id, int type, string name, string pic, int tag_func, int price, int base_0, int full, int unit, System.Collections.Generic.List<UnityEngine.Vector3> reward, int sort ) 
    {
        this.id = id;
        this.type = type;
        this.name = name;
        this.pic = pic;
        this.tagFunc = tag_func;
        this.price = price;
        this.base0 = base_0;
        this.full = full;
        this.unit = unit;
        this.reward = reward;
        this.sort = sort;
        
        PostInit();
    }

    public static piggy_bank Deserializepiggy_bank(JSONNode _json)
    {
        return new config.piggy_bank(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 图片(图片资源)
    /// </summary>
    public string pic { get; private set; }
    /// <summary>
    /// 模块id
    /// </summary>
    public int tagFunc { get; private set; }
    /// <summary>
    /// 价格档位
    /// </summary>
    public int price { get; private set; }
    /// <summary>
    /// 初始钻石数
    /// </summary>
    public int base0 { get; private set; }
    /// <summary>
    /// 钻石上限
    /// </summary>
    public int full { get; private set; }
    /// <summary>
    /// 每单位体力增加钻石数
    /// </summary>
    public int unit { get; private set; }
    /// <summary>
    /// 奖励
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> reward { get; private set; }
    /// <summary>
    /// 排序
    /// </summary>
    public int sort { get; private set; }
    public const int __ID__ = -533304761;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "type:" + type + ","
        + "name:" + name + ","
        + "pic:" + pic + ","
        + "tagFunc:" + tagFunc + ","
        + "price:" + price + ","
        + "base0:" + base0 + ","
        + "full:" + full + ","
        + "unit:" + unit + ","
        + "reward:" + Bright.Common.StringUtil.CollectionToString(reward) + ","
        + "sort:" + sort + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}