//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class monster_template :  Bright.Config.BeanBase 
{
    public monster_template(JSONNode _json) 
    {
        { if(!_json["assist"].IsNumber) { throw new SerializationException(); }  assist = _json["assist"]; }
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["rule_id"].IsNumber) { throw new SerializationException(); }  ruleId = _json["rule_id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { var __json0 = _json["time"]; if(!__json0.IsArray) { throw new SerializationException(); } time = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  time.Add(__v0); }   }
        { if(!_json["para_pos"].IsNumber) { throw new SerializationException(); }  paraPos = _json["para_pos"]; }
        { if(!_json["atk"].IsNumber) { throw new SerializationException(); }  atk = _json["atk"]; }
        { if(!_json["hp"].IsNumber) { throw new SerializationException(); }  hp = _json["hp"]; }
        { if(!_json["num"].IsNumber) { throw new SerializationException(); }  num = _json["num"]; }
        { if(!_json["limit_max"].IsNumber) { throw new SerializationException(); }  limitMax = _json["limit_max"]; }
        { if(!_json["interval"].IsNumber) { throw new SerializationException(); }  interval = _json["interval"]; }
        { if(!_json["distance"].IsNumber) { throw new SerializationException(); }  distance = _json["distance"]; }
        { if(!_json["monster_formation_id"].IsNumber) { throw new SerializationException(); }  monsterFormationId = _json["monster_formation_id"]; }
        { var __json0 = _json["reward"]; if(!__json0.IsArray) { throw new SerializationException(); } reward = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  reward.Add(__v0); }   }
        { var __json0 = _json["event_0"]; if(!__json0.IsArray) { throw new SerializationException(); } event0 = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  event0.Add(__v0); }   }
        { if(!_json["monster_id"].IsNumber) { throw new SerializationException(); }  monsterId = _json["monster_id"]; }
        PostInit();
    }

    public monster_template(int assist, int id, int rule_id, int type, System.Collections.Generic.List<int> time, int para_pos, int atk, int hp, int num, int limit_max, int interval, int distance, int monster_formation_id, System.Collections.Generic.List<UnityEngine.Vector2> reward, System.Collections.Generic.List<int> event_0, int monster_id ) 
    {
        this.assist = assist;
        this.id = id;
        this.ruleId = rule_id;
        this.type = type;
        this.time = time;
        this.paraPos = para_pos;
        this.atk = atk;
        this.hp = hp;
        this.num = num;
        this.limitMax = limit_max;
        this.interval = interval;
        this.distance = distance;
        this.monsterFormationId = monster_formation_id;
        this.reward = reward;
        this.event0 = event_0;
        this.monsterId = monster_id;
        
        PostInit();
    }

    public static monster_template Deserializemonster_template(JSONNode _json)
    {
        return new config.monster_template(_json);
    }

    /// <summary>
    /// 辅助主键id
    /// </summary>
    public int assist { get; private set; }
    /// <summary>
    /// 模版id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 组规则id
    /// </summary>
    public int ruleId { get; private set; }
    /// <summary>
    /// 刷新类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 刷新时间
    /// </summary>
    public System.Collections.Generic.List<int> time { get; private set; }
    /// <summary>
    /// 元素位置
    /// </summary>
    public int paraPos { get; private set; }
    /// <summary>
    /// 攻击力
    /// </summary>
    public int atk { get; private set; }
    /// <summary>
    /// 生命值
    /// </summary>
    public int hp { get; private set; }
    /// <summary>
    /// 单次数量
    /// </summary>
    public int num { get; private set; }
    /// <summary>
    /// 组最大数量限制
    /// </summary>
    public int limitMax { get; private set; }
    /// <summary>
    /// 刷新间隔
    /// </summary>
    public int interval { get; private set; }
    /// <summary>
    /// 刷新距离
    /// </summary>
    public int distance { get; private set; }
    /// <summary>
    /// 阵型id
    /// </summary>
    public int monsterFormationId { get; private set; }
    /// <summary>
    /// 掉落组
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> reward { get; private set; }
    /// <summary>
    /// 地图事件
    /// </summary>
    public System.Collections.Generic.List<int> event0 { get; private set; }
    /// <summary>
    /// 怪物id
    /// </summary>
    public int monsterId { get; set; }
    public const int __ID__ = -1762789269;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "assist:" + assist + ","
        + "id:" + id + ","
        + "ruleId:" + ruleId + ","
        + "type:" + type + ","
        + "time:" + Bright.Common.StringUtil.CollectionToString(time) + ","
        + "paraPos:" + paraPos + ","
        + "atk:" + atk + ","
        + "hp:" + hp + ","
        + "num:" + num + ","
        + "limitMax:" + limitMax + ","
        + "interval:" + interval + ","
        + "distance:" + distance + ","
        + "monsterFormationId:" + monsterFormationId + ","
        + "reward:" + Bright.Common.StringUtil.CollectionToString(reward) + ","
        + "event0:" + Bright.Common.StringUtil.CollectionToString(event0) + ","
        + "monsterId:" + monsterId + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}