//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class equip_data :  Bright.Config.BeanBase 
{
    public equip_data(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["pos_id"].IsNumber) { throw new SerializationException(); }  posId = _json["pos_id"]; }
        { if(!_json["quality"].IsNumber) { throw new SerializationException(); }  quality = _json["quality"]; }
        { if(!_json["main_entry_id"].IsNumber) { throw new SerializationException(); }  mainEntryId = _json["main_entry_id"]; }
        { if(!_json["main_entry_init"].IsNumber) { throw new SerializationException(); }  mainEntryInit = _json["main_entry_init"]; }
        { if(!_json["main_entry_grow"].IsNumber) { throw new SerializationException(); }  mainEntryGrow = _json["main_entry_grow"]; }
        { var __json0 = _json["minor_skill_group"]; if(!__json0.IsArray) { throw new SerializationException(); } minorSkillGroup = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  minorSkillGroup.Add(__v0); }   }
        { var __json0 = _json["unlock_skill_group"]; if(!__json0.IsArray) { throw new SerializationException(); } unlockSkillGroup = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  unlockSkillGroup.Add(__v0); }   }
        { if(!_json["s_yn"].IsNumber) { throw new SerializationException(); }  sYn = _json["s_yn"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["icon"].IsString) { throw new SerializationException(); }  icon = _json["icon"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  desc = _json["desc"]; }
        { if(!_json["spine"].IsString) { throw new SerializationException(); }  spine = _json["spine"]; }
        PostInit();
    }

    public equip_data(int id, int pos_id, int quality, int main_entry_id, int main_entry_init, int main_entry_grow, System.Collections.Generic.List<UnityEngine.Vector2> minor_skill_group, System.Collections.Generic.List<int> unlock_skill_group, int s_yn, string name, string icon, string desc, string spine ) 
    {
        this.id = id;
        this.posId = pos_id;
        this.quality = quality;
        this.mainEntryId = main_entry_id;
        this.mainEntryInit = main_entry_init;
        this.mainEntryGrow = main_entry_grow;
        this.minorSkillGroup = minor_skill_group;
        this.unlockSkillGroup = unlock_skill_group;
        this.sYn = s_yn;
        this.name = name;
        this.icon = icon;
        this.desc = desc;
        this.spine = spine;
        
        PostInit();
    }

    public static equip_data Deserializeequip_data(JSONNode _json)
    {
        return new config.equip_data(_json);
    }

    /// <summary>
    /// 装备Id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 部位Id
    /// </summary>
    public int posId { get; private set; }
    /// <summary>
    /// 品质id
    /// </summary>
    public int quality { get; private set; }
    /// <summary>
    /// 主词条id
    /// </summary>
    public int mainEntryId { get; private set; }
    /// <summary>
    /// 主词条初始
    /// </summary>
    public int mainEntryInit { get; private set; }
    /// <summary>
    /// 每级成长
    /// </summary>
    public int mainEntryGrow { get; private set; }
    /// <summary>
    /// 副词条技能组(前端根据品质判定&quot;锁&quot;)
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> minorSkillGroup { get; private set; }
    /// <summary>
    /// 解锁技能组(仅后端传技能)
    /// </summary>
    public System.Collections.Generic.List<int> unlockSkillGroup { get; private set; }
    /// <summary>
    /// 是否为S
    /// </summary>
    public int sYn { get; private set; }
    /// <summary>
    /// 装备名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 装备贴图(图片资源)
    /// </summary>
    public string icon { get; private set; }
    /// <summary>
    /// 装备描述
    /// </summary>
    public string desc { get; private set; }
    /// <summary>
    /// 装备动画
    /// </summary>
    public string spine { get; private set; }
    public const int __ID__ = 200555653;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "posId:" + posId + ","
        + "quality:" + quality + ","
        + "mainEntryId:" + mainEntryId + ","
        + "mainEntryInit:" + mainEntryInit + ","
        + "mainEntryGrow:" + mainEntryGrow + ","
        + "minorSkillGroup:" + Bright.Common.StringUtil.CollectionToString(minorSkillGroup) + ","
        + "unlockSkillGroup:" + Bright.Common.StringUtil.CollectionToString(unlockSkillGroup) + ","
        + "sYn:" + sYn + ","
        + "name:" + name + ","
        + "icon:" + icon + ","
        + "desc:" + desc + ","
        + "spine:" + spine + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}