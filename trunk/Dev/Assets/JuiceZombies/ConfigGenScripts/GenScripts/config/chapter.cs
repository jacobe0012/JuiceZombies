//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class chapter :  Bright.Config.BeanBase 
{
    public chapter(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["level_id"].IsNumber) { throw new SerializationException(); }  levelId = _json["level_id"]; }
        { if(!_json["block_id"].IsNumber) { throw new SerializationException(); }  blockId = _json["block_id"]; }
        { if(!_json["num"].IsNumber) { throw new SerializationException(); }  num = _json["num"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  desc = _json["desc"]; }
        { var __json0 = _json["cost"]; if(!__json0.IsArray) { throw new SerializationException(); } cost = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  cost.Add(__v0); }   }
        { if(!_json["monster_hp"].IsNumber) { throw new SerializationException(); }  monsterHp = _json["monster_hp"]; }
        { if(!_json["monster_atk"].IsNumber) { throw new SerializationException(); }  monsterAtk = _json["monster_atk"]; }
        { if(!_json["hard"].IsNumber) { throw new SerializationException(); }  hard = _json["hard"]; }
        { if(!_json["money"].IsNumber) { throw new SerializationException(); }  money = _json["money"]; }
        { if(!_json["exp"].IsNumber) { throw new SerializationException(); }  exp = _json["exp"]; }
        { if(!_json["patrol_unit"].IsNumber) { throw new SerializationException(); }  patrolUnit = _json["patrol_unit"]; }
        { var __json0 = _json["patrol_once"]; if(!__json0.IsArray) { throw new SerializationException(); } patrolOnce = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  patrolOnce.Add(__v0); }   }
        { var __json0 = _json["sweep_once"]; if(!__json0.IsArray) { throw new SerializationException(); } sweepOnce = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  sweepOnce.Add(__v0); }   }
        { var __json0 = _json["sweep_monster_once"]; if(!__json0.IsArray) { throw new SerializationException(); } sweepMonsterOnce = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  sweepMonsterOnce.Add(__v0); }   }
        PostInit();
    }

    public chapter(int id, int level_id, int block_id, int num, string name, string desc, System.Collections.Generic.List<UnityEngine.Vector3> cost, int monster_hp, int monster_atk, int hard, int money, int exp, int patrol_unit, System.Collections.Generic.List<UnityEngine.Vector3> patrol_once, System.Collections.Generic.List<UnityEngine.Vector3> sweep_once, System.Collections.Generic.List<UnityEngine.Vector3> sweep_monster_once ) 
    {
        this.id = id;
        this.levelId = level_id;
        this.blockId = block_id;
        this.num = num;
        this.name = name;
        this.desc = desc;
        this.cost = cost;
        this.monsterHp = monster_hp;
        this.monsterAtk = monster_atk;
        this.hard = hard;
        this.money = money;
        this.exp = exp;
        this.patrolUnit = patrol_unit;
        this.patrolOnce = patrol_once;
        this.sweepOnce = sweep_once;
        this.sweepMonsterOnce = sweep_monster_once;
        
        PostInit();
    }

    public static chapter Deserializechapter(JSONNode _json)
    {
        return new config.chapter(_json);
    }

    /// <summary>
    /// 关卡id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 关卡id
    /// </summary>
    public int levelId { get; private set; }
    /// <summary>
    /// 街区id
    /// </summary>
    public int blockId { get; private set; }
    /// <summary>
    /// 数字编号
    /// </summary>
    public int num { get; private set; }
    /// <summary>
    /// 关卡名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 关卡描述
    /// </summary>
    public string desc { get; private set; }
    /// <summary>
    /// 消耗
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> cost { get; private set; }
    /// <summary>
    /// 怪物生命值万分比
    /// </summary>
    public int monsterHp { get; private set; }
    /// <summary>
    /// 怪物攻击力万分比
    /// </summary>
    public int monsterAtk { get; private set; }
    /// <summary>
    /// 关卡难度值
    /// </summary>
    public int hard { get; private set; }
    /// <summary>
    /// 10分钟钞票
    /// </summary>
    public int money { get; private set; }
    /// <summary>
    /// 10分钟玩家经验
    /// </summary>
    public int exp { get; private set; }
    /// <summary>
    /// 10分钟收益
    /// </summary>
    public int patrolUnit { get; private set; }
    /// <summary>
    /// 快速分红收益
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> patrolOnce { get; private set; }
    /// <summary>
    /// 整顿奖励
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> sweepOnce { get; private set; }
    /// <summary>
    /// 整顿怪物计数
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> sweepMonsterOnce { get; private set; }
    public const int __ID__ = 355708321;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "levelId:" + levelId + ","
        + "blockId:" + blockId + ","
        + "num:" + num + ","
        + "name:" + name + ","
        + "desc:" + desc + ","
        + "cost:" + Bright.Common.StringUtil.CollectionToString(cost) + ","
        + "monsterHp:" + monsterHp + ","
        + "monsterAtk:" + monsterAtk + ","
        + "hard:" + hard + ","
        + "money:" + money + ","
        + "exp:" + exp + ","
        + "patrolUnit:" + patrolUnit + ","
        + "patrolOnce:" + Bright.Common.StringUtil.CollectionToString(patrolOnce) + ","
        + "sweepOnce:" + Bright.Common.StringUtil.CollectionToString(sweepOnce) + ","
        + "sweepMonsterOnce:" + Bright.Common.StringUtil.CollectionToString(sweepMonsterOnce) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}