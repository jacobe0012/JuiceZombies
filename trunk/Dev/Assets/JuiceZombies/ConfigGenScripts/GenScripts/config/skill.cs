//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class skill :  Bright.Config.BeanBase 
{
    public skill(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  desc = _json["desc"]; }
        { if(!_json["icon"].IsString) { throw new SerializationException(); }  icon = _json["icon"]; }
        { if(!_json["skill_quality_id"].IsNumber) { throw new SerializationException(); }  skillQualityId = _json["skill_quality_id"]; }
        { var __json0 = _json["skill_binding_id"]; if(!__json0.IsArray) { throw new SerializationException(); } skillBindingId = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  skillBindingId.Add(__v0); }   }
        { var __json0 = _json["desc_para"]; if(!__json0.IsArray) { throw new SerializationException(); } descPara = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  descPara.Add(__v0); }   }
        { if(!_json["level"].IsNumber) { throw new SerializationException(); }  level = _json["level"]; }
        { if(!_json["cd"].IsNumber) { throw new SerializationException(); }  cd = _json["cd"]; }
        { if(!_json["reduction_cd"].IsNumber) { throw new SerializationException(); }  reductionCd = _json["reduction_cd"]; }
        { var __json0 = _json["skill_effect_array"]; if(!__json0.IsArray) { throw new SerializationException(); } skillEffectArray = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  skillEffectArray.Add(__v0); }   }
        { var __json0 = _json["skill_event_array"]; if(!__json0.IsArray) { throw new SerializationException(); } skillEventArray = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  skillEventArray.Add(__v0); }   }
        { var __json0 = _json["charged_skill"]; if(!__json0.IsArray) { throw new SerializationException(); } chargedSkill = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  chargedSkill.Add(__v0); }   }
        { if(!_json["binding_rank"].IsNumber) { throw new SerializationException(); }  bindingRank = _json["binding_rank"]; }
        { if(!_json["replace_skill_id"].IsNumber) { throw new SerializationException(); }  replaceSkillId = _json["replace_skill_id"]; }
        { var __json0 = _json["replace_special_effects"]; if(!__json0.IsArray) { throw new SerializationException(); } replaceSpecialEffects = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  replaceSpecialEffects.Add(__v0); }   }
        { if(!_json["battle_shop_skill"].IsNumber) { throw new SerializationException(); }  battleShopSkill = _json["battle_shop_skill"]; }
        { var __json0 = _json["monster_skill_condition"]; if(!__json0.IsArray) { throw new SerializationException(); } monsterSkillCondition = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  monsterSkillCondition.Add(__v0); }   }
        PostInit();
    }

    public skill(int id, int type, string name, string desc, string icon, int skill_quality_id, System.Collections.Generic.List<int> skill_binding_id, System.Collections.Generic.List<string> desc_para, int level, int cd, int reduction_cd, System.Collections.Generic.List<int> skill_effect_array, System.Collections.Generic.List<int> skill_event_array, System.Collections.Generic.List<UnityEngine.Vector3> charged_skill, int binding_rank, int replace_skill_id, System.Collections.Generic.List<int> replace_special_effects, int battle_shop_skill, System.Collections.Generic.List<UnityEngine.Vector2> monster_skill_condition ) 
    {
        this.id = id;
        this.type = type;
        this.name = name;
        this.desc = desc;
        this.icon = icon;
        this.skillQualityId = skill_quality_id;
        this.skillBindingId = skill_binding_id;
        this.descPara = desc_para;
        this.level = level;
        this.cd = cd;
        this.reductionCd = reduction_cd;
        this.skillEffectArray = skill_effect_array;
        this.skillEventArray = skill_event_array;
        this.chargedSkill = charged_skill;
        this.bindingRank = binding_rank;
        this.replaceSkillId = replace_skill_id;
        this.replaceSpecialEffects = replace_special_effects;
        this.battleShopSkill = battle_shop_skill;
        this.monsterSkillCondition = monster_skill_condition;
        
        PostInit();
    }

    public static skill Deserializeskill(JSONNode _json)
    {
        return new config.skill(_json);
    }

    /// <summary>
    /// 技能id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string desc { get; private set; }
    /// <summary>
    /// 图标(图片资源)
    /// </summary>
    public string icon { get; private set; }
    /// <summary>
    /// 技能品质
    /// </summary>
    public int skillQualityId { get; private set; }
    /// <summary>
    /// 所属羁绊
    /// </summary>
    public System.Collections.Generic.List<int> skillBindingId { get; private set; }
    /// <summary>
    /// 描述参数
    /// </summary>
    public System.Collections.Generic.List<string> descPara { get; private set; }
    /// <summary>
    /// 等级
    /// </summary>
    public int level { get; private set; }
    /// <summary>
    /// 技能冷却时间
    /// </summary>
    public int cd { get; private set; }
    /// <summary>
    /// 冷却时间减免系数
    /// </summary>
    public int reductionCd { get; private set; }
    /// <summary>
    /// 技能效果组
    /// </summary>
    public System.Collections.Generic.List<int> skillEffectArray { get; private set; }
    /// <summary>
    /// 全局事件
    /// </summary>
    public System.Collections.Generic.List<int> skillEventArray { get; private set; }
    /// <summary>
    /// 充能技能
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> chargedSkill { get; private set; }
    /// <summary>
    /// 羁绊阶级
    /// </summary>
    public int bindingRank { get; private set; }
    /// <summary>
    /// 替换技能
    /// </summary>
    public int replaceSkillId { get; private set; }
    /// <summary>
    /// 替换特效
    /// </summary>
    public System.Collections.Generic.List<int> replaceSpecialEffects { get; private set; }
    /// <summary>
    /// 战斗商店技能
    /// </summary>
    public int battleShopSkill { get; private set; }
    /// <summary>
    /// boss技能释放条件
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> monsterSkillCondition { get; private set; }
    public const int __ID__ = -860733275;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "type:" + type + ","
        + "name:" + name + ","
        + "desc:" + desc + ","
        + "icon:" + icon + ","
        + "skillQualityId:" + skillQualityId + ","
        + "skillBindingId:" + Bright.Common.StringUtil.CollectionToString(skillBindingId) + ","
        + "descPara:" + Bright.Common.StringUtil.CollectionToString(descPara) + ","
        + "level:" + level + ","
        + "cd:" + cd + ","
        + "reductionCd:" + reductionCd + ","
        + "skillEffectArray:" + Bright.Common.StringUtil.CollectionToString(skillEffectArray) + ","
        + "skillEventArray:" + Bright.Common.StringUtil.CollectionToString(skillEventArray) + ","
        + "chargedSkill:" + Bright.Common.StringUtil.CollectionToString(chargedSkill) + ","
        + "bindingRank:" + bindingRank + ","
        + "replaceSkillId:" + replaceSkillId + ","
        + "replaceSpecialEffects:" + Bright.Common.StringUtil.CollectionToString(replaceSpecialEffects) + ","
        + "battleShopSkill:" + battleShopSkill + ","
        + "monsterSkillCondition:" + Bright.Common.StringUtil.CollectionToString(monsterSkillCondition) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}