//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class attr_self :  Bright.Config.BeanBase 
{
    public attr_self(JSONNode _json) 
    {
        { if(!_json["level"].IsNumber) { throw new SerializationException(); }  level = _json["level"]; }
        { if(!_json["exp"].IsNumber) { throw new SerializationException(); }  exp = _json["exp"]; }
        { if(!_json["expRatios"].IsNumber) { throw new SerializationException(); }  expRatios = _json["expRatios"]; }
        { if(!_json["gold"].IsNumber) { throw new SerializationException(); }  gold = _json["gold"]; }
        { if(!_json["goldRatios"].IsNumber) { throw new SerializationException(); }  goldRatios = _json["goldRatios"]; }
        { if(!_json["paper"].IsNumber) { throw new SerializationException(); }  paper = _json["paper"]; }
        { if(!_json["paperRatios"].IsNumber) { throw new SerializationException(); }  paperRatios = _json["paperRatios"]; }
        { if(!_json["equip"].IsNumber) { throw new SerializationException(); }  equip = _json["equip"]; }
        { if(!_json["equipRatios"].IsNumber) { throw new SerializationException(); }  equipRatios = _json["equipRatios"]; }
        { if(!_json["pickUpRadiusRatios"].IsNumber) { throw new SerializationException(); }  pickUpRadiusRatios = _json["pickUpRadiusRatios"]; }
        { if(!_json["killEnemy"].IsNumber) { throw new SerializationException(); }  killEnemy = _json["killEnemy"]; }
        { if(!_json["maxHp"].IsNumber) { throw new SerializationException(); }  maxHp = _json["maxHp"]; }
        { if(!_json["defaultMaxHp"].IsNumber) { throw new SerializationException(); }  defaultMaxHp = _json["defaultMaxHp"]; }
        { if(!_json["hpRatios"].IsNumber) { throw new SerializationException(); }  hpRatios = _json["hpRatios"]; }
        { if(!_json["hpAdd"].IsNumber) { throw new SerializationException(); }  hpAdd = _json["hpAdd"]; }
        { if(!_json["curHpRatios"].IsNumber) { throw new SerializationException(); }  curHpRatios = _json["curHpRatios"]; }
        { if(!_json["hpRecovery"].IsNumber) { throw new SerializationException(); }  hpRecovery = _json["hpRecovery"]; }
        { if(!_json["defaultHpRecovery"].IsNumber) { throw new SerializationException(); }  defaultHpRecovery = _json["defaultHpRecovery"]; }
        { if(!_json["hpRecoveryRatios"].IsNumber) { throw new SerializationException(); }  hpRecoveryRatios = _json["hpRecoveryRatios"]; }
        { if(!_json["hpRecoveryAdd"].IsNumber) { throw new SerializationException(); }  hpRecoveryAdd = _json["hpRecoveryAdd"]; }
        { if(!_json["propsRecoveryRatios"].IsNumber) { throw new SerializationException(); }  propsRecoveryRatios = _json["propsRecoveryRatios"]; }
        { if(!_json["propsRecoveryAdd"].IsNumber) { throw new SerializationException(); }  propsRecoveryAdd = _json["propsRecoveryAdd"]; }
        { if(!_json["atk"].IsNumber) { throw new SerializationException(); }  atk = _json["atk"]; }
        { if(!_json["defaultAtk"].IsNumber) { throw new SerializationException(); }  defaultAtk = _json["defaultAtk"]; }
        { if(!_json["atkRatios"].IsNumber) { throw new SerializationException(); }  atkRatios = _json["atkRatios"]; }
        { if(!_json["atkAdd"].IsNumber) { throw new SerializationException(); }  atkAdd = _json["atkAdd"]; }
        { if(!_json["rebirthCount"].IsNumber) { throw new SerializationException(); }  rebirthCount = _json["rebirthCount"]; }
        { if(!_json["rebirthCount1"].IsNumber) { throw new SerializationException(); }  rebirthCount1 = _json["rebirthCount1"]; }
        { if(!_json["critical"].IsNumber) { throw new SerializationException(); }  critical = _json["critical"]; }
        { if(!_json["tmpCritical"].IsNumber) { throw new SerializationException(); }  tmpCritical = _json["tmpCritical"]; }
        { if(!_json["criticalDamageRatios"].IsNumber) { throw new SerializationException(); }  criticalDamageRatios = _json["criticalDamageRatios"]; }
        { if(!_json["damageRatios"].IsNumber) { throw new SerializationException(); }  damageRatios = _json["damageRatios"]; }
        { if(!_json["damageAdd"].IsNumber) { throw new SerializationException(); }  damageAdd = _json["damageAdd"]; }
        { if(!_json["reduceHurtRatios"].IsNumber) { throw new SerializationException(); }  reduceHurtRatios = _json["reduceHurtRatios"]; }
        { if(!_json["reduceHurtAdd"].IsNumber) { throw new SerializationException(); }  reduceHurtAdd = _json["reduceHurtAdd"]; }
        { if(!_json["reduceBulletRatios"].IsNumber) { throw new SerializationException(); }  reduceBulletRatios = _json["reduceBulletRatios"]; }
        { if(!_json["changedFromPlayerDamage"].IsNumber) { throw new SerializationException(); }  changedFromPlayerDamage = _json["changedFromPlayerDamage"]; }
        { if(!_json["maxMoveSpeed"].IsNumber) { throw new SerializationException(); }  maxMoveSpeed = _json["maxMoveSpeed"]; }
        { if(!_json["defaultMaxMoveSpeed"].IsNumber) { throw new SerializationException(); }  defaultMaxMoveSpeed = _json["defaultMaxMoveSpeed"]; }
        { if(!_json["maxMoveSpeedRatios"].IsNumber) { throw new SerializationException(); }  maxMoveSpeedRatios = _json["maxMoveSpeedRatios"]; }
        { if(!_json["maxMoveSpeedAdd"].IsNumber) { throw new SerializationException(); }  maxMoveSpeedAdd = _json["maxMoveSpeedAdd"]; }
        { if(!_json["speedRecoveryTime"].IsNumber) { throw new SerializationException(); }  speedRecoveryTime = _json["speedRecoveryTime"]; }
        { if(!_json["mass"].IsNumber) { throw new SerializationException(); }  mass = _json["mass"]; }
        { if(!_json["defaultMass"].IsNumber) { throw new SerializationException(); }  defaultMass = _json["defaultMass"]; }
        { if(!_json["massRatios"].IsNumber) { throw new SerializationException(); }  massRatios = _json["massRatios"]; }
        { if(!_json["pushForce"].IsNumber) { throw new SerializationException(); }  pushForce = _json["pushForce"]; }
        { if(!_json["defaultPushForce"].IsNumber) { throw new SerializationException(); }  defaultPushForce = _json["defaultPushForce"]; }
        { if(!_json["pushForceRatios"].IsNumber) { throw new SerializationException(); }  pushForceRatios = _json["pushForceRatios"]; }
        { if(!_json["pushForceAdd"].IsNumber) { throw new SerializationException(); }  pushForceAdd = _json["pushForceAdd"]; }
        { if(!_json["reduceHitBackRatios"].IsNumber) { throw new SerializationException(); }  reduceHitBackRatios = _json["reduceHitBackRatios"]; }
        { if(!_json["dodge"].IsNumber) { throw new SerializationException(); }  dodge = _json["dodge"]; }
        { if(!_json["shieldCount"].IsNumber) { throw new SerializationException(); }  shieldCount = _json["shieldCount"]; }
        { if(!_json["defaultCoolDown"].IsNumber) { throw new SerializationException(); }  defaultCoolDown = _json["defaultCoolDown"]; }
        { if(!_json["skillFreeBuyCount"].IsNumber) { throw new SerializationException(); }  skillFreeBuyCount = _json["skillFreeBuyCount"]; }
        { if(!_json["buySkillRatios"].IsNumber) { throw new SerializationException(); }  buySkillRatios = _json["buySkillRatios"]; }
        { if(!_json["refreshShopRatios"].IsNumber) { throw new SerializationException(); }  refreshShopRatios = _json["refreshShopRatios"]; }
        { if(!_json["skillRefreshCount"].IsNumber) { throw new SerializationException(); }  skillRefreshCount = _json["skillRefreshCount"]; }
        { if(!_json["skillWeightIncrease1"].IsNumber) { throw new SerializationException(); }  skillWeightIncrease1 = _json["skillWeightIncrease1"]; }
        { if(!_json["skillWeightIncrease2"].IsNumber) { throw new SerializationException(); }  skillWeightIncrease2 = _json["skillWeightIncrease2"]; }
        { if(!_json["skillWeightIncrease3"].IsNumber) { throw new SerializationException(); }  skillWeightIncrease3 = _json["skillWeightIncrease3"]; }
        { if(!_json["skillTempRefreshCount"].IsNumber) { throw new SerializationException(); }  skillTempRefreshCount = _json["skillTempRefreshCount"]; }
        { if(!_json["defaultBulletRangeRatios"].IsNumber) { throw new SerializationException(); }  defaultBulletRangeRatios = _json["defaultBulletRangeRatios"]; }
        { if(!_json["collideDamageRatios"].IsNumber) { throw new SerializationException(); }  collideDamageRatios = _json["collideDamageRatios"]; }
        { if(!_json["continuousCollideDamageRatios"].IsNumber) { throw new SerializationException(); }  continuousCollideDamageRatios = _json["continuousCollideDamageRatios"]; }
        { if(!_json["superPushForceChance"].IsNumber) { throw new SerializationException(); }  superPushForceChance = _json["superPushForceChance"]; }
        { if(!_json["maxPushForceChance"].IsNumber) { throw new SerializationException(); }  maxPushForceChance = _json["maxPushForceChance"]; }
        { if(!_json["normalMonsterDamageRatios"].IsNumber) { throw new SerializationException(); }  normalMonsterDamageRatios = _json["normalMonsterDamageRatios"]; }
        { if(!_json["specialMonsterDamageRatios"].IsNumber) { throw new SerializationException(); }  specialMonsterDamageRatios = _json["specialMonsterDamageRatios"]; }
        { if(!_json["bossMonsterDamageRatios"].IsNumber) { throw new SerializationException(); }  bossMonsterDamageRatios = _json["bossMonsterDamageRatios"]; }
        { if(!_json["weaponSkillExtraCount"].IsNumber) { throw new SerializationException(); }  weaponSkillExtraCount = _json["weaponSkillExtraCount"]; }
        { if(!_json["scaleRatios"].IsNumber) { throw new SerializationException(); }  scaleRatios = _json["scaleRatios"]; }
        PostInit();
    }

    public attr_self(int level, int exp, int expRatios, int gold, int goldRatios, int paper, int paperRatios, int equip, int equipRatios, int pickUpRadiusRatios, int killEnemy, int maxHp, int defaultMaxHp, int hpRatios, int hpAdd, int curHpRatios, int hpRecovery, int defaultHpRecovery, int hpRecoveryRatios, int hpRecoveryAdd, int propsRecoveryRatios, int propsRecoveryAdd, int atk, int defaultAtk, int atkRatios, int atkAdd, int rebirthCount, int rebirthCount1, int critical, int tmpCritical, int criticalDamageRatios, int damageRatios, int damageAdd, int reduceHurtRatios, int reduceHurtAdd, int reduceBulletRatios, int changedFromPlayerDamage, int maxMoveSpeed, int defaultMaxMoveSpeed, int maxMoveSpeedRatios, int maxMoveSpeedAdd, int speedRecoveryTime, int mass, int defaultMass, int massRatios, int pushForce, int defaultPushForce, int pushForceRatios, int pushForceAdd, int reduceHitBackRatios, int dodge, int shieldCount, int defaultCoolDown, int skillFreeBuyCount, int buySkillRatios, int refreshShopRatios, int skillRefreshCount, int skillWeightIncrease1, int skillWeightIncrease2, int skillWeightIncrease3, int skillTempRefreshCount, int defaultBulletRangeRatios, int collideDamageRatios, int continuousCollideDamageRatios, int superPushForceChance, int maxPushForceChance, int normalMonsterDamageRatios, int specialMonsterDamageRatios, int bossMonsterDamageRatios, int weaponSkillExtraCount, int scaleRatios ) 
    {
        this.level = level;
        this.exp = exp;
        this.expRatios = expRatios;
        this.gold = gold;
        this.goldRatios = goldRatios;
        this.paper = paper;
        this.paperRatios = paperRatios;
        this.equip = equip;
        this.equipRatios = equipRatios;
        this.pickUpRadiusRatios = pickUpRadiusRatios;
        this.killEnemy = killEnemy;
        this.maxHp = maxHp;
        this.defaultMaxHp = defaultMaxHp;
        this.hpRatios = hpRatios;
        this.hpAdd = hpAdd;
        this.curHpRatios = curHpRatios;
        this.hpRecovery = hpRecovery;
        this.defaultHpRecovery = defaultHpRecovery;
        this.hpRecoveryRatios = hpRecoveryRatios;
        this.hpRecoveryAdd = hpRecoveryAdd;
        this.propsRecoveryRatios = propsRecoveryRatios;
        this.propsRecoveryAdd = propsRecoveryAdd;
        this.atk = atk;
        this.defaultAtk = defaultAtk;
        this.atkRatios = atkRatios;
        this.atkAdd = atkAdd;
        this.rebirthCount = rebirthCount;
        this.rebirthCount1 = rebirthCount1;
        this.critical = critical;
        this.tmpCritical = tmpCritical;
        this.criticalDamageRatios = criticalDamageRatios;
        this.damageRatios = damageRatios;
        this.damageAdd = damageAdd;
        this.reduceHurtRatios = reduceHurtRatios;
        this.reduceHurtAdd = reduceHurtAdd;
        this.reduceBulletRatios = reduceBulletRatios;
        this.changedFromPlayerDamage = changedFromPlayerDamage;
        this.maxMoveSpeed = maxMoveSpeed;
        this.defaultMaxMoveSpeed = defaultMaxMoveSpeed;
        this.maxMoveSpeedRatios = maxMoveSpeedRatios;
        this.maxMoveSpeedAdd = maxMoveSpeedAdd;
        this.speedRecoveryTime = speedRecoveryTime;
        this.mass = mass;
        this.defaultMass = defaultMass;
        this.massRatios = massRatios;
        this.pushForce = pushForce;
        this.defaultPushForce = defaultPushForce;
        this.pushForceRatios = pushForceRatios;
        this.pushForceAdd = pushForceAdd;
        this.reduceHitBackRatios = reduceHitBackRatios;
        this.dodge = dodge;
        this.shieldCount = shieldCount;
        this.defaultCoolDown = defaultCoolDown;
        this.skillFreeBuyCount = skillFreeBuyCount;
        this.buySkillRatios = buySkillRatios;
        this.refreshShopRatios = refreshShopRatios;
        this.skillRefreshCount = skillRefreshCount;
        this.skillWeightIncrease1 = skillWeightIncrease1;
        this.skillWeightIncrease2 = skillWeightIncrease2;
        this.skillWeightIncrease3 = skillWeightIncrease3;
        this.skillTempRefreshCount = skillTempRefreshCount;
        this.defaultBulletRangeRatios = defaultBulletRangeRatios;
        this.collideDamageRatios = collideDamageRatios;
        this.continuousCollideDamageRatios = continuousCollideDamageRatios;
        this.superPushForceChance = superPushForceChance;
        this.maxPushForceChance = maxPushForceChance;
        this.normalMonsterDamageRatios = normalMonsterDamageRatios;
        this.specialMonsterDamageRatios = specialMonsterDamageRatios;
        this.bossMonsterDamageRatios = bossMonsterDamageRatios;
        this.weaponSkillExtraCount = weaponSkillExtraCount;
        this.scaleRatios = scaleRatios;
        
        PostInit();
    }

    public static attr_self Deserializeattr_self(JSONNode _json)
    {
        return new config.attr_self(_json);
    }

    /// <summary>
    /// 201100_等级_类型:1_是否玩家独有:1
    /// </summary>
    public int level { get; private set; }
    /// <summary>
    /// 201200_经验_类型:1_是否玩家独有:1
    /// </summary>
    public int exp { get; private set; }
    /// <summary>
    /// 201220_经验获取加成_类型:2_是否玩家独有:1
    /// </summary>
    public int expRatios { get; private set; }
    /// <summary>
    /// 201300_金币_类型:1_是否玩家独有:1
    /// </summary>
    public int gold { get; private set; }
    /// <summary>
    /// 201320_金币拾取加成_类型:2_是否玩家独有:1
    /// </summary>
    public int goldRatios { get; private set; }
    /// <summary>
    /// 201400_图纸_类型:1_是否玩家独有:1
    /// </summary>
    public int paper { get; private set; }
    /// <summary>
    /// 201420_图纸掉率加成_类型:2_是否玩家独有:1
    /// </summary>
    public int paperRatios { get; private set; }
    /// <summary>
    /// 201500_装备_类型:1_是否玩家独有:1
    /// </summary>
    public int equip { get; private set; }
    /// <summary>
    /// 201520_装备掉率加成_类型:2_是否玩家独有:1
    /// </summary>
    public int equipRatios { get; private set; }
    /// <summary>
    /// 201600_拾取范围加成_类型:2_是否玩家独有:1
    /// </summary>
    public int pickUpRadiusRatios { get; private set; }
    /// <summary>
    /// 201700_杀敌数_类型:1_是否玩家独有:1
    /// </summary>
    public int killEnemy { get; private set; }
    /// <summary>
    /// 202000_生命值_类型:1_是否玩家独有:0
    /// </summary>
    public int maxHp { get; private set; }
    /// <summary>
    /// 202010_局外生命值_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultMaxHp { get; private set; }
    /// <summary>
    /// 202020_生命值加成_类型:2_是否玩家独有:0
    /// </summary>
    public int hpRatios { get; private set; }
    /// <summary>
    /// 202030_生命值固定加成_类型:1_是否玩家独有:0
    /// </summary>
    public int hpAdd { get; private set; }
    /// <summary>
    /// 202040_当前生命万分比_类型:2_是否玩家独有:0
    /// </summary>
    public int curHpRatios { get; private set; }
    /// <summary>
    /// 202100_生命恢复_类型:1_是否玩家独有:0
    /// </summary>
    public int hpRecovery { get; private set; }
    /// <summary>
    /// 202110_局外生命恢复_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultHpRecovery { get; private set; }
    /// <summary>
    /// 202120_生命恢复加成_类型:2_是否玩家独有:0
    /// </summary>
    public int hpRecoveryRatios { get; private set; }
    /// <summary>
    /// 202130_生命恢复固定加成_类型:1_是否玩家独有:0
    /// </summary>
    public int hpRecoveryAdd { get; private set; }
    /// <summary>
    /// 202140_道具恢复加成_类型:2_是否玩家独有:1
    /// </summary>
    public int propsRecoveryRatios { get; private set; }
    /// <summary>
    /// 202150_道具恢复固定加成_类型:1_是否玩家独有:1
    /// </summary>
    public int propsRecoveryAdd { get; private set; }
    /// <summary>
    /// 203000_攻击力_类型:1_是否玩家独有:0
    /// </summary>
    public int atk { get; private set; }
    /// <summary>
    /// 203010_局外攻击力_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultAtk { get; private set; }
    /// <summary>
    /// 203020_攻击力加成_类型:2_是否玩家独有:0
    /// </summary>
    public int atkRatios { get; private set; }
    /// <summary>
    /// 203030_攻击力固定加成_类型:1_是否玩家独有:0
    /// </summary>
    public int atkAdd { get; private set; }
    /// <summary>
    /// 204000_复活次数_类型:1_是否玩家独有:0
    /// </summary>
    public int rebirthCount { get; private set; }
    /// <summary>
    /// 204010_复活次数小恶魔_类型:1_是否玩家独有:0
    /// </summary>
    public int rebirthCount1 { get; private set; }
    /// <summary>
    /// 205000_暴击率_类型:2_是否玩家独有:0
    /// </summary>
    public int critical { get; private set; }
    /// <summary>
    /// 205010_临时暴击率_类型:2_是否玩家独有:0
    /// </summary>
    public int tmpCritical { get; private set; }
    /// <summary>
    /// 205100_暴击伤害率_类型:2_是否玩家独有:0
    /// </summary>
    public int criticalDamageRatios { get; private set; }
    /// <summary>
    /// 206120_伤害加成_类型:2_是否玩家独有:0
    /// </summary>
    public int damageRatios { get; private set; }
    /// <summary>
    /// 206130_伤害固定加成_类型:1_是否玩家独有:0
    /// </summary>
    public int damageAdd { get; private set; }
    /// <summary>
    /// 206220_伤害减免_类型:2_是否玩家独有:0
    /// </summary>
    public int reduceHurtRatios { get; private set; }
    /// <summary>
    /// 206230_伤害固定减免_类型:1_是否玩家独有:0
    /// </summary>
    public int reduceHurtAdd { get; private set; }
    /// <summary>
    /// 206240_弹幕伤害减免_类型:2_是否玩家独有:0
    /// </summary>
    public int reduceBulletRatios { get; private set; }
    /// <summary>
    /// 206250_受到玩家伤害变更_类型:2_是否玩家独有:0
    /// </summary>
    public int changedFromPlayerDamage { get; private set; }
    /// <summary>
    /// 207000_移动速度_类型:1_是否玩家独有:0
    /// </summary>
    public int maxMoveSpeed { get; private set; }
    /// <summary>
    /// 207010_局外移动速度_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultMaxMoveSpeed { get; private set; }
    /// <summary>
    /// 207020_移动速度加成_类型:2_是否玩家独有:0
    /// </summary>
    public int maxMoveSpeedRatios { get; private set; }
    /// <summary>
    /// 207030_移动速度固定加成_类型:_是否玩家独有:0
    /// </summary>
    public int maxMoveSpeedAdd { get; private set; }
    /// <summary>
    /// 207100_速度恢复时间(0到最大)_类型:1_是否玩家独有:0
    /// </summary>
    public int speedRecoveryTime { get; private set; }
    /// <summary>
    /// 208000_角色质量_类型:1_是否玩家独有:0
    /// </summary>
    public int mass { get; private set; }
    /// <summary>
    /// 208010_局外角色质量_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultMass { get; private set; }
    /// <summary>
    /// 208020_质量加成_类型:2_是否玩家独有:0
    /// </summary>
    public int massRatios { get; private set; }
    /// <summary>
    /// 209000_角色推力_类型:1_是否玩家独有:0
    /// </summary>
    public int pushForce { get; private set; }
    /// <summary>
    /// 209010_局外角色推力_类型:1_是否玩家独有:0
    /// </summary>
    public int defaultPushForce { get; private set; }
    /// <summary>
    /// 209020_推力加成_类型:2_是否玩家独有:0
    /// </summary>
    public int pushForceRatios { get; private set; }
    /// <summary>
    /// 209030_推力固定加成_类型:_是否玩家独有:0
    /// </summary>
    public int pushForceAdd { get; private set; }
    /// <summary>
    /// 210000_击退减免_类型:2_是否玩家独有:0
    /// </summary>
    public int reduceHitBackRatios { get; private set; }
    /// <summary>
    /// 211000_闪避率_类型:2_是否玩家独有:0
    /// </summary>
    public int dodge { get; private set; }
    /// <summary>
    /// 212000_抵挡层数_类型:1_是否玩家独有:0
    /// </summary>
    public int shieldCount { get; private set; }
    /// <summary>
    /// 213000_局外技能冷却减免_类型:2_是否玩家独有:0
    /// </summary>
    public int defaultCoolDown { get; private set; }
    /// <summary>
    /// 214000_技能免费购买次数_类型:1_是否玩家独有:1
    /// </summary>
    public int skillFreeBuyCount { get; private set; }
    /// <summary>
    /// 214100_技能购买价格万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int buySkillRatios { get; private set; }
    /// <summary>
    /// 214200_刷新商店价格万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int refreshShopRatios { get; private set; }
    /// <summary>
    /// 214300_技能商店免费刷新次数_类型:1_是否玩家独有:1
    /// </summary>
    public int skillRefreshCount { get; private set; }
    /// <summary>
    /// 214400_蓝色技能权重提升万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int skillWeightIncrease1 { get; private set; }
    /// <summary>
    /// 214500_紫色技能权重提升万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int skillWeightIncrease2 { get; private set; }
    /// <summary>
    /// 214600_金色技能权重提升万分比_类型:2_是否玩家独有:1
    /// </summary>
    public int skillWeightIncrease3 { get; private set; }
    /// <summary>
    /// 214700_临时免费刷新次数_类型:1_是否玩家独有:1
    /// </summary>
    public int skillTempRefreshCount { get; private set; }
    /// <summary>
    /// 215000_局外弹幕范围加成_类型:2_是否玩家独有:0
    /// </summary>
    public int defaultBulletRangeRatios { get; private set; }
    /// <summary>
    /// 218100_撞击伤害加成_类型:2_是否玩家独有:0
    /// </summary>
    public int collideDamageRatios { get; private set; }
    /// <summary>
    /// 218200_连续撞击伤害加成_类型:2_是否玩家独有:0
    /// </summary>
    public int continuousCollideDamageRatios { get; private set; }
    /// <summary>
    /// 219100_超级推力概率_类型:2_是否玩家独有:1
    /// </summary>
    public int superPushForceChance { get; private set; }
    /// <summary>
    /// 219200_极限推力概率_类型:2_是否玩家独有:1
    /// </summary>
    public int maxPushForceChance { get; private set; }
    /// <summary>
    /// 220100_对普通怪物伤害加成_类型:2_是否玩家独有:1
    /// </summary>
    public int normalMonsterDamageRatios { get; private set; }
    /// <summary>
    /// 220200_对稀有怪物伤害加成_类型:2_是否玩家独有:1
    /// </summary>
    public int specialMonsterDamageRatios { get; private set; }
    /// <summary>
    /// 220300_对boss伤害加成_类型:2_是否玩家独有:1
    /// </summary>
    public int bossMonsterDamageRatios { get; private set; }
    /// <summary>
    /// 221100_武器技能额外次数_类型:1_是否玩家独有:1
    /// </summary>
    public int weaponSkillExtraCount { get; private set; }
    /// <summary>
    /// 222100_体型大小_类型:2_是否玩家独有:0
    /// </summary>
    public int scaleRatios { get; private set; }
    public const int __ID__ = 1013082414;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "level:" + level + ","
        + "exp:" + exp + ","
        + "expRatios:" + expRatios + ","
        + "gold:" + gold + ","
        + "goldRatios:" + goldRatios + ","
        + "paper:" + paper + ","
        + "paperRatios:" + paperRatios + ","
        + "equip:" + equip + ","
        + "equipRatios:" + equipRatios + ","
        + "pickUpRadiusRatios:" + pickUpRadiusRatios + ","
        + "killEnemy:" + killEnemy + ","
        + "maxHp:" + maxHp + ","
        + "defaultMaxHp:" + defaultMaxHp + ","
        + "hpRatios:" + hpRatios + ","
        + "hpAdd:" + hpAdd + ","
        + "curHpRatios:" + curHpRatios + ","
        + "hpRecovery:" + hpRecovery + ","
        + "defaultHpRecovery:" + defaultHpRecovery + ","
        + "hpRecoveryRatios:" + hpRecoveryRatios + ","
        + "hpRecoveryAdd:" + hpRecoveryAdd + ","
        + "propsRecoveryRatios:" + propsRecoveryRatios + ","
        + "propsRecoveryAdd:" + propsRecoveryAdd + ","
        + "atk:" + atk + ","
        + "defaultAtk:" + defaultAtk + ","
        + "atkRatios:" + atkRatios + ","
        + "atkAdd:" + atkAdd + ","
        + "rebirthCount:" + rebirthCount + ","
        + "rebirthCount1:" + rebirthCount1 + ","
        + "critical:" + critical + ","
        + "tmpCritical:" + tmpCritical + ","
        + "criticalDamageRatios:" + criticalDamageRatios + ","
        + "damageRatios:" + damageRatios + ","
        + "damageAdd:" + damageAdd + ","
        + "reduceHurtRatios:" + reduceHurtRatios + ","
        + "reduceHurtAdd:" + reduceHurtAdd + ","
        + "reduceBulletRatios:" + reduceBulletRatios + ","
        + "changedFromPlayerDamage:" + changedFromPlayerDamage + ","
        + "maxMoveSpeed:" + maxMoveSpeed + ","
        + "defaultMaxMoveSpeed:" + defaultMaxMoveSpeed + ","
        + "maxMoveSpeedRatios:" + maxMoveSpeedRatios + ","
        + "maxMoveSpeedAdd:" + maxMoveSpeedAdd + ","
        + "speedRecoveryTime:" + speedRecoveryTime + ","
        + "mass:" + mass + ","
        + "defaultMass:" + defaultMass + ","
        + "massRatios:" + massRatios + ","
        + "pushForce:" + pushForce + ","
        + "defaultPushForce:" + defaultPushForce + ","
        + "pushForceRatios:" + pushForceRatios + ","
        + "pushForceAdd:" + pushForceAdd + ","
        + "reduceHitBackRatios:" + reduceHitBackRatios + ","
        + "dodge:" + dodge + ","
        + "shieldCount:" + shieldCount + ","
        + "defaultCoolDown:" + defaultCoolDown + ","
        + "skillFreeBuyCount:" + skillFreeBuyCount + ","
        + "buySkillRatios:" + buySkillRatios + ","
        + "refreshShopRatios:" + refreshShopRatios + ","
        + "skillRefreshCount:" + skillRefreshCount + ","
        + "skillWeightIncrease1:" + skillWeightIncrease1 + ","
        + "skillWeightIncrease2:" + skillWeightIncrease2 + ","
        + "skillWeightIncrease3:" + skillWeightIncrease3 + ","
        + "skillTempRefreshCount:" + skillTempRefreshCount + ","
        + "defaultBulletRangeRatios:" + defaultBulletRangeRatios + ","
        + "collideDamageRatios:" + collideDamageRatios + ","
        + "continuousCollideDamageRatios:" + continuousCollideDamageRatios + ","
        + "superPushForceChance:" + superPushForceChance + ","
        + "maxPushForceChance:" + maxPushForceChance + ","
        + "normalMonsterDamageRatios:" + normalMonsterDamageRatios + ","
        + "specialMonsterDamageRatios:" + specialMonsterDamageRatios + ","
        + "bossMonsterDamageRatios:" + bossMonsterDamageRatios + ","
        + "weaponSkillExtraCount:" + weaponSkillExtraCount + ","
        + "scaleRatios:" + scaleRatios + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}