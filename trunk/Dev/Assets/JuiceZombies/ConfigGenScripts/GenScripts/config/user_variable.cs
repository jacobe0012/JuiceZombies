//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class user_variable :  Bright.Config.BeanBase 
{
    public user_variable(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["init"].IsNumber) { throw new SerializationException(); }  init = _json["init"]; }
        { if(!_json["quality"].IsNumber) { throw new SerializationException(); }  quality = _json["quality"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["icon"].IsString) { throw new SerializationException(); }  icon = _json["icon"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  desc = _json["desc"]; }
        { if(!_json["lack_title"].IsString) { throw new SerializationException(); }  lackTitle = _json["lack_title"]; }
        { if(!_json["lack_desc"].IsString) { throw new SerializationException(); }  lackDesc = _json["lack_desc"]; }
        { var __json0 = _json["lack_gain"]; if(!__json0.IsArray) { throw new SerializationException(); } lackGain = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  lackGain.Add(__v0); }   }
        { var __json0 = _json["lack_goto"]; if(!__json0.IsArray) { throw new SerializationException(); } lackGoto = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  lackGoto.Add(__v0); }   }
        PostInit();
    }

    public user_variable(int id, int init, int quality, string name, string icon, string desc, string lack_title, string lack_desc, System.Collections.Generic.List<string> lack_gain, System.Collections.Generic.List<string> lack_goto ) 
    {
        this.id = id;
        this.init = init;
        this.quality = quality;
        this.name = name;
        this.icon = icon;
        this.desc = desc;
        this.lackTitle = lack_title;
        this.lackDesc = lack_desc;
        this.lackGain = lack_gain;
        this.lackGoto = lack_goto;
        
        PostInit();
    }

    public static user_variable Deserializeuser_variable(JSONNode _json)
    {
        return new config.user_variable(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 默认值
    /// </summary>
    public int init { get; private set; }
    /// <summary>
    /// 品质
    /// </summary>
    public int quality { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 图标(图片资源)
    /// </summary>
    public string icon { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string desc { get; private set; }
    /// <summary>
    /// 资源不足标题
    /// </summary>
    public string lackTitle { get; private set; }
    /// <summary>
    /// 资源不足描述
    /// </summary>
    public string lackDesc { get; private set; }
    /// <summary>
    /// 获取途径
    /// </summary>
    public System.Collections.Generic.List<string> lackGain { get; private set; }
    /// <summary>
    /// 资源不足跳转
    /// </summary>
    public System.Collections.Generic.List<string> lackGoto { get; private set; }
    public const int __ID__ = 1431441092;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "init:" + init + ","
        + "quality:" + quality + ","
        + "name:" + name + ","
        + "icon:" + icon + ","
        + "desc:" + desc + ","
        + "lackTitle:" + lackTitle + ","
        + "lackDesc:" + lackDesc + ","
        + "lackGain:" + Bright.Common.StringUtil.CollectionToString(lackGain) + ","
        + "lackGoto:" + Bright.Common.StringUtil.CollectionToString(lackGoto) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}