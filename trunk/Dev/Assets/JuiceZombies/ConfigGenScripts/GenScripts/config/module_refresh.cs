//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class module_refresh :  Bright.Config.BeanBase 
{
    public module_refresh(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["group"].IsNumber) { throw new SerializationException(); }  group = _json["group"]; }
        { if(!_json["power"].IsNumber) { throw new SerializationException(); }  power = _json["power"]; }
        { if(!_json["scene_module"].IsNumber) { throw new SerializationException(); }  sceneModule = _json["scene_module"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { var __json0 = _json["coordinate"]; if(!__json0.IsArray) { throw new SerializationException(); } coordinate = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  coordinate.Add(__v0); }   }
        { if(!_json["rand_type"].IsNumber) { throw new SerializationException(); }  randType = _json["rand_type"]; }
        { if(!_json["num"].IsNumber) { throw new SerializationException(); }  num = _json["num"]; }
        { if(!_json["self_yn"].IsNumber) { throw new SerializationException(); }  selfYn = _json["self_yn"]; }
        { var __json0 = _json["angle_range"]; if(!__json0.IsArray) { throw new SerializationException(); } angleRange = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  angleRange.Add(__v0); }   }
        { if(!_json["point_range"].IsNumber) { throw new SerializationException(); }  pointRange = _json["point_range"]; }
        PostInit();
    }

    public module_refresh(int id, int group, int power, int scene_module, int type, System.Collections.Generic.List<UnityEngine.Vector2> coordinate, int rand_type, int num, int self_yn, System.Collections.Generic.List<int> angle_range, int point_range ) 
    {
        this.id = id;
        this.group = group;
        this.power = power;
        this.sceneModule = scene_module;
        this.type = type;
        this.coordinate = coordinate;
        this.randType = rand_type;
        this.num = num;
        this.selfYn = self_yn;
        this.angleRange = angle_range;
        this.pointRange = point_range;
        
        PostInit();
    }

    public static module_refresh Deserializemodule_refresh(JSONNode _json)
    {
        return new config.module_refresh(_json);
    }

    /// <summary>
    /// 刷新组id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 组id
    /// </summary>
    public int group { get; private set; }
    /// <summary>
    /// 组内权重
    /// </summary>
    public int power { get; private set; }
    /// <summary>
    /// 组件id
    /// </summary>
    public int sceneModule { get; private set; }
    /// <summary>
    /// 刷新类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 起始坐标
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> coordinate { get; private set; }
    /// <summary>
    /// 随机生成类型
    /// </summary>
    public int randType { get; private set; }
    /// <summary>
    /// 数量
    /// </summary>
    public int num { get; private set; }
    /// <summary>
    /// 是否独占
    /// </summary>
    public int selfYn { get; private set; }
    /// <summary>
    /// 旋转角度区间
    /// </summary>
    public System.Collections.Generic.List<int> angleRange { get; private set; }
    /// <summary>
    /// 点刷新间距
    /// </summary>
    public int pointRange { get; private set; }
    public const int __ID__ = -69657548;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "group:" + group + ","
        + "power:" + power + ","
        + "sceneModule:" + sceneModule + ","
        + "type:" + type + ","
        + "coordinate:" + Bright.Common.StringUtil.CollectionToString(coordinate) + ","
        + "randType:" + randType + ","
        + "num:" + num + ","
        + "selfYn:" + selfYn + ","
        + "angleRange:" + Bright.Common.StringUtil.CollectionToString(angleRange) + ","
        + "pointRange:" + pointRange + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}