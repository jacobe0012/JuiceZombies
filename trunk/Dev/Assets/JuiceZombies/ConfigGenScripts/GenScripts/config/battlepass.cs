//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class battlepass :  Bright.Config.BeanBase 
{
    public battlepass(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["bg"].IsString) { throw new SerializationException(); }  bg = _json["bg"]; }
        { if(!_json["tag_func"].IsNumber) { throw new SerializationException(); }  tagFunc = _json["tag_func"]; }
        { if(!_json["price"].IsNumber) { throw new SerializationException(); }  price = _json["price"]; }
        { var __json0 = _json["reward_more_1"]; if(!__json0.IsArray) { throw new SerializationException(); } rewardMore1 = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  rewardMore1.Add(__v0); }   }
        { var __json0 = _json["reward_more_2"]; if(!__json0.IsArray) { throw new SerializationException(); } rewardMore2 = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  rewardMore2.Add(__v0); }   }
        PostInit();
    }

    public battlepass(int id, string name, string bg, int tag_func, int price, System.Collections.Generic.List<UnityEngine.Vector3> reward_more_1, System.Collections.Generic.List<UnityEngine.Vector3> reward_more_2 ) 
    {
        this.id = id;
        this.name = name;
        this.bg = bg;
        this.tagFunc = tag_func;
        this.price = price;
        this.rewardMore1 = reward_more_1;
        this.rewardMore2 = reward_more_2;
        
        PostInit();
    }

    public static battlepass Deserializebattlepass(JSONNode _json)
    {
        return new config.battlepass(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 图片(图片资源)
    /// </summary>
    public string bg { get; private set; }
    /// <summary>
    /// 模块id
    /// </summary>
    public int tagFunc { get; private set; }
    /// <summary>
    /// 价格
    /// </summary>
    public int price { get; private set; }
    /// <summary>
    /// 更多奖励-免费线
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> rewardMore1 { get; private set; }
    /// <summary>
    /// 更多奖励-付费线
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> rewardMore2 { get; private set; }
    public const int __ID__ = -1034225931;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "name:" + name + ","
        + "bg:" + bg + ","
        + "tagFunc:" + tagFunc + ","
        + "price:" + price + ","
        + "rewardMore1:" + Bright.Common.StringUtil.CollectionToString(rewardMore1) + ","
        + "rewardMore2:" + Bright.Common.StringUtil.CollectionToString(rewardMore2) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}