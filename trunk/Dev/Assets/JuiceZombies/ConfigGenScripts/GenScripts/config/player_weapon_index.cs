//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class player_weapon_index :  Bright.Config.BeanBase 
{
    public player_weapon_index(JSONNode _json) 
    {
        { if(!_json["role_id"].IsNumber) { throw new SerializationException(); }  roleId = _json["role_id"]; }
        { if(!_json["weapon_id"].IsNumber) { throw new SerializationException(); }  weaponId = _json["weapon_id"]; }
        { var __json0 = _json["monster_weapon_index"]; if(!__json0.IsArray) { throw new SerializationException(); } monsterWeaponIndex = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  monsterWeaponIndex.Add(__v0); }   }
        PostInit();
    }

    public player_weapon_index(int role_id, int weapon_id, System.Collections.Generic.List<int> monster_weapon_index ) 
    {
        this.roleId = role_id;
        this.weaponId = weapon_id;
        this.monsterWeaponIndex = monster_weapon_index;
        
        PostInit();
    }

    public static player_weapon_index Deserializeplayer_weapon_index(JSONNode _json)
    {
        return new config.player_weapon_index(_json);
    }

    /// <summary>
    /// 角色id
    /// </summary>
    public int roleId { get; private set; }
    /// <summary>
    /// 武器id
    /// </summary>
    public int weaponId { get; private set; }
    /// <summary>
    /// 武器挂载坐标
    /// </summary>
    public System.Collections.Generic.List<int> monsterWeaponIndex { get; private set; }
    public const int __ID__ = -1938333471;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "roleId:" + roleId + ","
        + "weaponId:" + weaponId + ","
        + "monsterWeaponIndex:" + Bright.Common.StringUtil.CollectionToString(monsterWeaponIndex) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}