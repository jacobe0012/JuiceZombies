//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class user_avatar :  Bright.Config.BeanBase 
{
    public user_avatar(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["quality"].IsNumber) { throw new SerializationException(); }  quality = _json["quality"]; }
        { if(!_json["sort"].IsNumber) { throw new SerializationException(); }  sort = _json["sort"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  desc = _json["desc"]; }
        { if(!_json["icon"].IsString) { throw new SerializationException(); }  icon = _json["icon"]; }
        { if(!_json["preview"].IsString) { throw new SerializationException(); }  preview = _json["preview"]; }
        PostInit();
    }

    public user_avatar(int id, int type, int quality, int sort, string name, string desc, string icon, string preview ) 
    {
        this.id = id;
        this.type = type;
        this.quality = quality;
        this.sort = sort;
        this.name = name;
        this.desc = desc;
        this.icon = icon;
        this.preview = preview;
        
        PostInit();
    }

    public static user_avatar Deserializeuser_avatar(JSONNode _json)
    {
        return new config.user_avatar(_json);
    }

    /// <summary>
    /// id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 品质
    /// </summary>
    public int quality { get; private set; }
    /// <summary>
    /// 排序
    /// </summary>
    public int sort { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string desc { get; private set; }
    /// <summary>
    /// 图片资源(图片资源)
    /// </summary>
    public string icon { get; private set; }
    /// <summary>
    /// 预览图(图片资源)
    /// </summary>
    public string preview { get; private set; }
    public const int __ID__ = -1926074463;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "type:" + type + ","
        + "quality:" + quality + ","
        + "sort:" + sort + ","
        + "name:" + name + ","
        + "desc:" + desc + ","
        + "icon:" + icon + ","
        + "preview:" + preview + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}