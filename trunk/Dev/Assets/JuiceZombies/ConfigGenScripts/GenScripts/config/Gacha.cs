//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class Gacha :  Bright.Config.BeanBase 
{
    public Gacha(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["time"].IsNumber) { throw new SerializationException(); }  time = _json["time"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  desc = _json["desc"]; }
        { if(!_json["icon"].IsString) { throw new SerializationException(); }  icon = _json["icon"]; }
        { if(!_json["sort"].IsNumber) { throw new SerializationException(); }  sort = _json["sort"]; }
        { if(!_json["price1"].IsNumber) { throw new SerializationException(); }  price1 = _json["price1"]; }
        { if(!_json["price2"].IsNumber) { throw new SerializationException(); }  price2 = _json["price2"]; }
        { var __json0 = _json["power"]; if(!__json0.IsArray) { throw new SerializationException(); } power = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  power.Add(__v0); }   }
        { if(!_json["ensure_count"].IsNumber) { throw new SerializationException(); }  ensureCount = _json["ensure_count"]; }
        PostInit();
    }

    public Gacha(int id, int time, string name, string desc, string icon, int sort, int price1, int price2, System.Collections.Generic.List<UnityEngine.Vector3> power, int ensure_count ) 
    {
        this.id = id;
        this.time = time;
        this.name = name;
        this.desc = desc;
        this.icon = icon;
        this.sort = sort;
        this.price1 = price1;
        this.price2 = price2;
        this.power = power;
        this.ensureCount = ensure_count;
        
        PostInit();
    }

    public static Gacha DeserializeGacha(JSONNode _json)
    {
        return new config.Gacha(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// time
    /// </summary>
    public int time { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string desc { get; private set; }
    /// <summary>
    /// 图标
    /// </summary>
    public string icon { get; private set; }
    /// <summary>
    /// 排序
    /// </summary>
    public int sort { get; private set; }
    /// <summary>
    /// 价格
    /// </summary>
    public int price1 { get; private set; }
    /// <summary>
    /// 价格
    /// </summary>
    public int price2 { get; private set; }
    /// <summary>
    /// 十连抽
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> power { get; private set; }
    /// <summary>
    /// 保底数
    /// </summary>
    public int ensureCount { get; private set; }
    public const int __ID__ = -901672010;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "time:" + time + ","
        + "name:" + name + ","
        + "desc:" + desc + ","
        + "icon:" + icon + ","
        + "sort:" + sort + ","
        + "price1:" + price1 + ","
        + "price2:" + price2 + ","
        + "power:" + Bright.Common.StringUtil.CollectionToString(power) + ","
        + "ensureCount:" + ensureCount + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}