//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class special_effect :  Bright.Config.BeanBase 
{
    public special_effect(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["model"].IsString) { throw new SerializationException(); }  model = _json["model"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["para1"].IsNumber) { throw new SerializationException(); }  para1 = _json["para1"]; }
        { if(!_json["para2"].IsNumber) { throw new SerializationException(); }  para2 = _json["para2"]; }
        { if(!_json["para3"].IsNumber) { throw new SerializationException(); }  para3 = _json["para3"]; }
        { if(!_json["para4"].IsNumber) { throw new SerializationException(); }  para4 = _json["para4"]; }
        { if(!_json["loop_type"].IsNumber) { throw new SerializationException(); }  loopType = _json["loop_type"]; }
        { var __json0 = _json["loop_extra_para"]; if(!__json0.IsArray) { throw new SerializationException(); } loopExtraPara = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  loopExtraPara.Add(__v0); }   }
        { if(!_json["loop_speed"].IsNumber) { throw new SerializationException(); }  loopSpeed = _json["loop_speed"]; }
        { if(!_json["size_x"].IsNumber) { throw new SerializationException(); }  sizeX = _json["size_x"]; }
        { if(!_json["size_y"].IsNumber) { throw new SerializationException(); }  sizeY = _json["size_y"]; }
        { if(!_json["z_sort"].IsNumber) { throw new SerializationException(); }  zSort = _json["z_sort"]; }
        { if(!_json["z_index"].IsNumber) { throw new SerializationException(); }  zIndex = _json["z_index"]; }
        { if(!_json["draw_type"].IsNumber) { throw new SerializationException(); }  drawType = _json["draw_type"]; }
        { if(!_json["offset"].IsNumber) { throw new SerializationException(); }  offset = _json["offset"]; }
        { var __json0 = _json["offset_para"]; if(!__json0.IsArray) { throw new SerializationException(); } offsetPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  offsetPara.Add(__v0); }   }
        { if(!_json["next_id"].IsNumber) { throw new SerializationException(); }  nextId = _json["next_id"]; }
        { if(!_json["max_time"].IsNumber) { throw new SerializationException(); }  maxTime = _json["max_time"]; }
        PostInit();
    }

    public special_effect(int id, string model, int type, int para1, int para2, int para3, int para4, int loop_type, System.Collections.Generic.List<UnityEngine.Vector3> loop_extra_para, int loop_speed, int size_x, int size_y, int z_sort, int z_index, int draw_type, int offset, System.Collections.Generic.List<int> offset_para, int next_id, int max_time ) 
    {
        this.id = id;
        this.model = model;
        this.type = type;
        this.para1 = para1;
        this.para2 = para2;
        this.para3 = para3;
        this.para4 = para4;
        this.loopType = loop_type;
        this.loopExtraPara = loop_extra_para;
        this.loopSpeed = loop_speed;
        this.sizeX = size_x;
        this.sizeY = size_y;
        this.zSort = z_sort;
        this.zIndex = z_index;
        this.drawType = draw_type;
        this.offset = offset;
        this.offsetPara = offset_para;
        this.nextId = next_id;
        this.maxTime = max_time;
        
        PostInit();
    }

    public static special_effect Deserializespecial_effect(JSONNode _json)
    {
        return new config.special_effect(_json);
    }

    /// <summary>
    /// 特效id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 特效名称
    /// </summary>
    public string model { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 特效类型参数1
    /// </summary>
    public int para1 { get; private set; }
    /// <summary>
    /// 特效类型参数2
    /// </summary>
    public int para2 { get; private set; }
    /// <summary>
    /// 特效类型参数3
    /// </summary>
    public int para3 { get; private set; }
    /// <summary>
    /// 特效类型参数4
    /// </summary>
    public int para4 { get; private set; }
    /// <summary>
    /// 循环类型
    /// </summary>
    public int loopType { get; private set; }
    /// <summary>
    /// 循环参数
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> loopExtraPara { get; private set; }
    /// <summary>
    /// 播放时间
    /// </summary>
    public int loopSpeed { get; private set; }
    /// <summary>
    /// 特效x
    /// </summary>
    public int sizeX { get; private set; }
    /// <summary>
    /// 特效y
    /// </summary>
    public int sizeY { get; private set; }
    /// <summary>
    /// 层级排序
    /// </summary>
    public int zSort { get; private set; }
    /// <summary>
    /// 层级
    /// </summary>
    public int zIndex { get; private set; }
    /// <summary>
    /// 拉伸类型
    /// </summary>
    public int drawType { get; private set; }
    /// <summary>
    /// 偏移类型
    /// </summary>
    public int offset { get; private set; }
    /// <summary>
    /// 偏移类型
    /// </summary>
    public System.Collections.Generic.List<int> offsetPara { get; private set; }
    /// <summary>
    /// 继承特效
    /// </summary>
    public int nextId { get; private set; }
    /// <summary>
    /// 最长播放时长
    /// </summary>
    public int maxTime { get; private set; }
    public const int __ID__ = -258913277;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "model:" + model + ","
        + "type:" + type + ","
        + "para1:" + para1 + ","
        + "para2:" + para2 + ","
        + "para3:" + para3 + ","
        + "para4:" + para4 + ","
        + "loopType:" + loopType + ","
        + "loopExtraPara:" + Bright.Common.StringUtil.CollectionToString(loopExtraPara) + ","
        + "loopSpeed:" + loopSpeed + ","
        + "sizeX:" + sizeX + ","
        + "sizeY:" + sizeY + ","
        + "zSort:" + zSort + ","
        + "zIndex:" + zIndex + ","
        + "drawType:" + drawType + ","
        + "offset:" + offset + ","
        + "offsetPara:" + Bright.Common.StringUtil.CollectionToString(offsetPara) + ","
        + "nextId:" + nextId + ","
        + "maxTime:" + maxTime + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}