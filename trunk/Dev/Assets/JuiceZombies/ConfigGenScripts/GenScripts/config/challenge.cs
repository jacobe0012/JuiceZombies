//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class challenge :  Bright.Config.BeanBase 
{
    public challenge(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["block_id"].IsNumber) { throw new SerializationException(); }  blockId = _json["block_id"]; }
        { if(!_json["num"].IsNumber) { throw new SerializationException(); }  num = _json["num"]; }
        { if(!_json["level_id"].IsNumber) { throw new SerializationException(); }  levelId = _json["level_id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["pic"].IsString) { throw new SerializationException(); }  pic = _json["pic"]; }
        { if(!_json["bg"].IsString) { throw new SerializationException(); }  bg = _json["bg"]; }
        { var __json0 = _json["anecdote_group"]; if(!__json0.IsArray) { throw new SerializationException(); } anecdoteGroup = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  anecdoteGroup.Add(__v0); }   }
        { var __json0 = _json["reward"]; if(!__json0.IsArray) { throw new SerializationException(); } reward = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  reward.Add(__v0); }   }
        PostInit();
    }

    public challenge(int id, int type, int block_id, int num, int level_id, string name, string pic, string bg, System.Collections.Generic.List<int> anecdote_group, System.Collections.Generic.List<UnityEngine.Vector3> reward ) 
    {
        this.id = id;
        this.type = type;
        this.blockId = block_id;
        this.num = num;
        this.levelId = level_id;
        this.name = name;
        this.pic = pic;
        this.bg = bg;
        this.anecdoteGroup = anecdote_group;
        this.reward = reward;
        
        PostInit();
    }

    public static challenge Deserializechallenge(JSONNode _json)
    {
        return new config.challenge(_json);
    }

    /// <summary>
    /// 挑战id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 挑战类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 街区id
    /// </summary>
    public int blockId { get; private set; }
    /// <summary>
    /// 地图编号
    /// </summary>
    public int num { get; private set; }
    /// <summary>
    /// 关卡id
    /// </summary>
    public int levelId { get; private set; }
    /// <summary>
    /// 关卡名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 关卡贴图(图片资源)
    /// </summary>
    public string pic { get; private set; }
    /// <summary>
    /// 底板(图片资源)
    /// </summary>
    public string bg { get; private set; }
    /// <summary>
    /// 轶事组
    /// </summary>
    public System.Collections.Generic.List<int> anecdoteGroup { get; private set; }
    /// <summary>
    /// 奖励
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> reward { get; private set; }
    public const int __ID__ = -1883592521;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "type:" + type + ","
        + "blockId:" + blockId + ","
        + "num:" + num + ","
        + "levelId:" + levelId + ","
        + "name:" + name + ","
        + "pic:" + pic + ","
        + "bg:" + bg + ","
        + "anecdoteGroup:" + Bright.Common.StringUtil.CollectionToString(anecdoteGroup) + ","
        + "reward:" + Bright.Common.StringUtil.CollectionToString(reward) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}