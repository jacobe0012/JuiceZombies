//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class quality :  Bright.Config.BeanBase 
{
    public quality(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["frame"].IsString) { throw new SerializationException(); }  frame = _json["frame"]; }
        { if(!_json["font_color"].IsString) { throw new SerializationException(); }  fontColor = _json["font_color"]; }
        { var __json0 = _json["toequip"]; if(!__json0.IsArray) { throw new SerializationException(); } toequip = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  toequip.Add(__v0); }   }
        { if(!_json["num_frame"].IsString) { throw new SerializationException(); }  numFrame = _json["num_frame"]; }
        { if(!_json["pos_frame"].IsString) { throw new SerializationException(); }  posFrame = _json["pos_frame"]; }
        { if(!_json["unlock"].IsString) { throw new SerializationException(); }  unlock = _json["unlock"]; }
        { if(!_json["lock_0"].IsString) { throw new SerializationException(); }  lock0 = _json["lock_0"]; }
        PostInit();
    }

    public quality(int id, string name, string frame, string font_color, System.Collections.Generic.List<int> toequip, string num_frame, string pos_frame, string unlock, string lock_0 ) 
    {
        this.id = id;
        this.name = name;
        this.frame = frame;
        this.fontColor = font_color;
        this.toequip = toequip;
        this.numFrame = num_frame;
        this.posFrame = pos_frame;
        this.unlock = unlock;
        this.lock0 = lock_0;
        
        PostInit();
    }

    public static quality Deserializequality(JSONNode _json)
    {
        return new config.quality(_json);
    }

    /// <summary>
    /// 品质id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 品质框(图片资源)
    /// </summary>
    public string frame { get; private set; }
    /// <summary>
    /// 品质字体颜色
    /// </summary>
    public string fontColor { get; private set; }
    /// <summary>
    /// 装备数据表
    /// </summary>
    public System.Collections.Generic.List<int> toequip { get; private set; }
    /// <summary>
    /// 角标框(图片资源)
    /// </summary>
    public string numFrame { get; private set; }
    /// <summary>
    /// 部位底板(图片资源)
    /// </summary>
    public string posFrame { get; private set; }
    /// <summary>
    /// 技能解锁图标(图片资源)
    /// </summary>
    public string unlock { get; private set; }
    /// <summary>
    /// 技能未解锁图标(图片资源)
    /// </summary>
    public string lock0 { get; private set; }
    public const int __ID__ = 267907667;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "name:" + name + ","
        + "frame:" + frame + ","
        + "fontColor:" + fontColor + ","
        + "toequip:" + Bright.Common.StringUtil.CollectionToString(toequip) + ","
        + "numFrame:" + numFrame + ","
        + "posFrame:" + posFrame + ","
        + "unlock:" + unlock + ","
        + "lock0:" + lock0 + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}