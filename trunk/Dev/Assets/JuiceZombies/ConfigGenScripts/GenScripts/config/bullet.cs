//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class bullet :  Bright.Config.BeanBase 
{
    public bullet(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["start_type"].IsNumber) { throw new SerializationException(); }  startType = _json["start_type"]; }
        { var __json0 = _json["start_para"]; if(!__json0.IsArray) { throw new SerializationException(); } startPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  startPara.Add(__v0); }   }
        { if(!_json["search_type"].IsNumber) { throw new SerializationException(); }  searchType = _json["search_type"]; }
        { var __json0 = _json["search_para"]; if(!__json0.IsArray) { throw new SerializationException(); } searchPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  searchPara.Add(__v0); }   }
        { if(!_json["skill_effect"].IsNumber) { throw new SerializationException(); }  skillEffect = _json["skill_effect"]; }
        { if(!_json["absorb_yn"].IsNumber) { throw new SerializationException(); }  absorbYn = _json["absorb_yn"]; }
        { var __json0 = _json["target"]; if(!__json0.IsArray) { throw new SerializationException(); } target = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  target.Add(__v0); }   }
        { var __json0 = _json["target_lock_on"]; if(!__json0.IsArray) { throw new SerializationException(); } targetLockOn = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  targetLockOn.Add(__v0); }   }
        { if(!_json["dead_effect"].IsNumber) { throw new SerializationException(); }  deadEffect = _json["dead_effect"]; }
        { if(!_json["num"].IsNumber) { throw new SerializationException(); }  num = _json["num"]; }
        { if(!_json["group_num"].IsNumber) { throw new SerializationException(); }  groupNum = _json["group_num"]; }
        { if(!_json["group_search_yn"].IsNumber) { throw new SerializationException(); }  groupSearchYn = _json["group_search_yn"]; }
        { if(!_json["degree"].IsNumber) { throw new SerializationException(); }  degree = _json["degree"]; }
        { if(!_json["interval"].IsNumber) { throw new SerializationException(); }  interval = _json["interval"]; }
        { if(!_json["hp"].IsNumber) { throw new SerializationException(); }  hp = _json["hp"]; }
        { if(!_json["atk_type"].IsNumber) { throw new SerializationException(); }  atkType = _json["atk_type"]; }
        { if(!_json["speed"].IsNumber) { throw new SerializationException(); }  speed = _json["speed"]; }
        { if(!_json["time"].IsNumber) { throw new SerializationException(); }  time = _json["time"]; }
        { if(!_json["speed_add"].IsNumber) { throw new SerializationException(); }  speedAdd = _json["speed_add"]; }
        { if(!_json["sort"].IsNumber) { throw new SerializationException(); }  sort = _json["sort"]; }
        { if(!_json["track_type"].IsNumber) { throw new SerializationException(); }  trackType = _json["track_type"]; }
        { if(!_json["track_type_para1"].IsNumber) { throw new SerializationException(); }  trackTypePara1 = _json["track_type_para1"]; }
        { if(!_json["track_type_para2"].IsNumber) { throw new SerializationException(); }  trackTypePara2 = _json["track_type_para2"]; }
        { if(!_json["track_type_para3"].IsNumber) { throw new SerializationException(); }  trackTypePara3 = _json["track_type_para3"]; }
        { if(!_json["model"].IsString) { throw new SerializationException(); }  model = _json["model"]; }
        { if(!_json["size"].IsNumber) { throw new SerializationException(); }  size = _json["size"]; }
        { if(!_json["rotation_speed"].IsNumber) { throw new SerializationException(); }  rotationSpeed = _json["rotation_speed"]; }
        { if(!_json["rotation_start"].IsNumber) { throw new SerializationException(); }  rotationStart = _json["rotation_start"]; }
        { if(!_json["birth_time"].IsNumber) { throw new SerializationException(); }  birthTime = _json["birth_time"]; }
        { if(!_json["dead_time"].IsNumber) { throw new SerializationException(); }  deadTime = _json["dead_time"]; }
        { if(!_json["video_time"].IsNumber) { throw new SerializationException(); }  videoTime = _json["video_time"]; }
        { if(!_json["rotation_type"].IsNumber) { throw new SerializationException(); }  rotationType = _json["rotation_type"]; }
        PostInit();
    }

    public bullet(int id, int start_type, System.Collections.Generic.List<int> start_para, int search_type, System.Collections.Generic.List<int> search_para, int skill_effect, int absorb_yn, System.Collections.Generic.List<int> target, System.Collections.Generic.List<int> target_lock_on, int dead_effect, int num, int group_num, int group_search_yn, int degree, int interval, int hp, int atk_type, int speed, int time, int speed_add, int sort, int track_type, int track_type_para1, int track_type_para2, int track_type_para3, string model, int size, int rotation_speed, int rotation_start, int birth_time, int dead_time, int video_time, int rotation_type ) 
    {
        this.id = id;
        this.startType = start_type;
        this.startPara = start_para;
        this.searchType = search_type;
        this.searchPara = search_para;
        this.skillEffect = skill_effect;
        this.absorbYn = absorb_yn;
        this.target = target;
        this.targetLockOn = target_lock_on;
        this.deadEffect = dead_effect;
        this.num = num;
        this.groupNum = group_num;
        this.groupSearchYn = group_search_yn;
        this.degree = degree;
        this.interval = interval;
        this.hp = hp;
        this.atkType = atk_type;
        this.speed = speed;
        this.time = time;
        this.speedAdd = speed_add;
        this.sort = sort;
        this.trackType = track_type;
        this.trackTypePara1 = track_type_para1;
        this.trackTypePara2 = track_type_para2;
        this.trackTypePara3 = track_type_para3;
        this.model = model;
        this.size = size;
        this.rotationSpeed = rotation_speed;
        this.rotationStart = rotation_start;
        this.birthTime = birth_time;
        this.deadTime = dead_time;
        this.videoTime = video_time;
        this.rotationType = rotation_type;
        
        PostInit();
    }

    public static bullet Deserializebullet(JSONNode _json)
    {
        return new config.bullet(_json);
    }

    /// <summary>
    /// 弹幕id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 发射起点类型
    /// </summary>
    public int startType { get; private set; }
    /// <summary>
    /// 发射起点类型参数
    /// </summary>
    public System.Collections.Generic.List<int> startPara { get; private set; }
    /// <summary>
    /// 索敌类型
    /// </summary>
    public int searchType { get; private set; }
    /// <summary>
    /// 索敌类型参数
    /// </summary>
    public System.Collections.Generic.List<int> searchPara { get; private set; }
    /// <summary>
    /// 触发效果
    /// </summary>
    public int skillEffect { get; private set; }
    /// <summary>
    /// 是否被障碍物吸收
    /// </summary>
    public int absorbYn { get; private set; }
    /// <summary>
    /// 生效目标
    /// </summary>
    public System.Collections.Generic.List<int> target { get; private set; }
    /// <summary>
    /// 索敌目标
    /// </summary>
    public System.Collections.Generic.List<int> targetLockOn { get; private set; }
    /// <summary>
    /// 死亡效果
    /// </summary>
    public int deadEffect { get; private set; }
    /// <summary>
    /// 发射数量
    /// </summary>
    public int num { get; private set; }
    /// <summary>
    /// 每组发射数量
    /// </summary>
    public int groupNum { get; private set; }
    /// <summary>
    /// 每组是否重新索敌
    /// </summary>
    public int groupSearchYn { get; private set; }
    /// <summary>
    /// 发射角度偏移
    /// </summary>
    public int degree { get; private set; }
    /// <summary>
    /// 每组弹幕发射间隔
    /// </summary>
    public int interval { get; private set; }
    /// <summary>
    /// 弹幕生命
    /// </summary>
    public int hp { get; private set; }
    /// <summary>
    /// 触发类型
    /// </summary>
    public int atkType { get; private set; }
    /// <summary>
    /// 飞行速度
    /// </summary>
    public int speed { get; private set; }
    /// <summary>
    /// 飞行时间
    /// </summary>
    public int time { get; private set; }
    /// <summary>
    /// 定时加速
    /// </summary>
    public int speedAdd { get; private set; }
    /// <summary>
    /// 层级
    /// </summary>
    public int sort { get; private set; }
    /// <summary>
    /// 轨迹类型
    /// </summary>
    public int trackType { get; private set; }
    /// <summary>
    /// 轨迹类型参数1
    /// </summary>
    public int trackTypePara1 { get; private set; }
    /// <summary>
    /// 轨迹类型参数2
    /// </summary>
    public int trackTypePara2 { get; private set; }
    /// <summary>
    /// 轨迹类型参数3
    /// </summary>
    public int trackTypePara3 { get; private set; }
    /// <summary>
    /// 弹幕模型
    /// </summary>
    public string model { get; private set; }
    /// <summary>
    /// 弹幕大小
    /// </summary>
    public int size { get; private set; }
    /// <summary>
    /// 旋转速率
    /// </summary>
    public int rotationSpeed { get; private set; }
    /// <summary>
    /// 初始角度
    /// </summary>
    public int rotationStart { get; private set; }
    /// <summary>
    /// 出生时间
    /// </summary>
    public int birthTime { get; private set; }
    /// <summary>
    /// 死亡延迟
    /// </summary>
    public int deadTime { get; private set; }
    /// <summary>
    /// 周期时间
    /// </summary>
    public int videoTime { get; private set; }
    /// <summary>
    /// 弹幕旋转类型
    /// </summary>
    public int rotationType { get; private set; }
    public const int __ID__ = -1390298834;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "startType:" + startType + ","
        + "startPara:" + Bright.Common.StringUtil.CollectionToString(startPara) + ","
        + "searchType:" + searchType + ","
        + "searchPara:" + Bright.Common.StringUtil.CollectionToString(searchPara) + ","
        + "skillEffect:" + skillEffect + ","
        + "absorbYn:" + absorbYn + ","
        + "target:" + Bright.Common.StringUtil.CollectionToString(target) + ","
        + "targetLockOn:" + Bright.Common.StringUtil.CollectionToString(targetLockOn) + ","
        + "deadEffect:" + deadEffect + ","
        + "num:" + num + ","
        + "groupNum:" + groupNum + ","
        + "groupSearchYn:" + groupSearchYn + ","
        + "degree:" + degree + ","
        + "interval:" + interval + ","
        + "hp:" + hp + ","
        + "atkType:" + atkType + ","
        + "speed:" + speed + ","
        + "time:" + time + ","
        + "speedAdd:" + speedAdd + ","
        + "sort:" + sort + ","
        + "trackType:" + trackType + ","
        + "trackTypePara1:" + trackTypePara1 + ","
        + "trackTypePara2:" + trackTypePara2 + ","
        + "trackTypePara3:" + trackTypePara3 + ","
        + "model:" + model + ","
        + "size:" + size + ","
        + "rotationSpeed:" + rotationSpeed + ","
        + "rotationStart:" + rotationStart + ","
        + "birthTime:" + birthTime + ","
        + "deadTime:" + deadTime + ","
        + "videoTime:" + videoTime + ","
        + "rotationType:" + rotationType + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}