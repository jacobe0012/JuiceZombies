//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class font :  Bright.Config.BeanBase 
{
    public font(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["size"].IsNumber) { throw new SerializationException(); }  size = _json["size"]; }
        { if(!_json["color"].IsString) { throw new SerializationException(); }  color = _json["color"]; }
        { if(!_json["proj"].IsString) { throw new SerializationException(); }  proj = _json["proj"]; }
        PostInit();
    }

    public font(int id, int type, int size, string color, string proj ) 
    {
        this.id = id;
        this.type = type;
        this.size = size;
        this.color = color;
        this.proj = proj;
        
        PostInit();
    }

    public static font Deserializefont(JSONNode _json)
    {
        return new config.font(_json);
    }

    /// <summary>
    /// 字体Id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 字体id
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// unity字号
    /// </summary>
    public int size { get; private set; }
    /// <summary>
    /// 字色
    /// </summary>
    public string color { get; private set; }
    /// <summary>
    /// 投影颜色
    /// </summary>
    public string proj { get; private set; }
    public const int __ID__ = -28148869;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "type:" + type + ","
        + "size:" + size + ","
        + "color:" + color + ","
        + "proj:" + proj + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}