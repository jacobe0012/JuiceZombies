//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class level :  Bright.Config.BeanBase 
{
    public level(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["num"].IsString) { throw new SerializationException(); }  num = _json["num"]; }
        { if(!_json["scene_id"].IsNumber) { throw new SerializationException(); }  sceneId = _json["scene_id"]; }
        { var __json0 = _json["reward_drop"]; if(!__json0.IsArray) { throw new SerializationException(); } rewardDrop = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  rewardDrop.Add(__v0); }   }
        { var __json0 = _json["reward_time"]; if(!__json0.IsArray) { throw new SerializationException(); } rewardTime = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  rewardTime.Add(__v0); }   }
        { if(!_json["atk"].IsNumber) { throw new SerializationException(); }  atk = _json["atk"]; }
        { if(!_json["hp"].IsNumber) { throw new SerializationException(); }  hp = _json["hp"]; }
        { var __json0 = _json["skill_group_limit"]; if(!__json0.IsArray) { throw new SerializationException(); } skillGroupLimit = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  skillGroupLimit.Add(__v0); }   }
        { var __json0 = _json["revive_num"]; if(!__json0.IsArray) { throw new SerializationException(); } reviveNum = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  reviveNum.Add(__v0); }   }
        { var __json0 = _json["success"]; if(!__json0.IsArray) { throw new SerializationException(); } success = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  success.Add(__v0); }   }
        { var __json0 = _json["fail"]; if(!__json0.IsArray) { throw new SerializationException(); } fail = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  fail.Add(__v0); }   }
        { if(!_json["unlock"].IsNumber) { throw new SerializationException(); }  unlock = _json["unlock"]; }
        PostInit();
    }

    public level(int id, int type, string num, int scene_id, System.Collections.Generic.List<int> reward_drop, System.Collections.Generic.List<UnityEngine.Vector3> reward_time, int atk, int hp, System.Collections.Generic.List<int> skill_group_limit, System.Collections.Generic.List<UnityEngine.Vector2> revive_num, System.Collections.Generic.List<UnityEngine.Vector3> success, System.Collections.Generic.List<UnityEngine.Vector3> fail, int unlock ) 
    {
        this.id = id;
        this.type = type;
        this.num = num;
        this.sceneId = scene_id;
        this.rewardDrop = reward_drop;
        this.rewardTime = reward_time;
        this.atk = atk;
        this.hp = hp;
        this.skillGroupLimit = skill_group_limit;
        this.reviveNum = revive_num;
        this.success = success;
        this.fail = fail;
        this.unlock = unlock;
        
        PostInit();
    }

    public static level Deserializelevel(JSONNode _json)
    {
        return new config.level(_json);
    }

    /// <summary>
    /// 关卡id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 关卡类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 数字编号
    /// </summary>
    public string num { get; private set; }
    /// <summary>
    /// 场景id
    /// </summary>
    public int sceneId { get; private set; }
    /// <summary>
    ///  击杀掉落串
    /// </summary>
    public System.Collections.Generic.List<int> rewardDrop { get; private set; }
    /// <summary>
    /// 生存掉落
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> rewardTime { get; private set; }
    /// <summary>
    /// 攻击力系数
    /// </summary>
    public int atk { get; private set; }
    /// <summary>
    /// 生命系数
    /// </summary>
    public int hp { get; private set; }
    /// <summary>
    /// 技能限制
    /// </summary>
    public System.Collections.Generic.List<int> skillGroupLimit { get; private set; }
    /// <summary>
    /// 复活次数
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> reviveNum { get; private set; }
    /// <summary>
    /// 通关条件
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> success { get; private set; }
    /// <summary>
    /// 失败条件
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> fail { get; private set; }
    /// <summary>
    /// 解锁条件
    /// </summary>
    public int unlock { get; private set; }
    public const int __ID__ = -867364392;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "type:" + type + ","
        + "num:" + num + ","
        + "sceneId:" + sceneId + ","
        + "rewardDrop:" + Bright.Common.StringUtil.CollectionToString(rewardDrop) + ","
        + "rewardTime:" + Bright.Common.StringUtil.CollectionToString(rewardTime) + ","
        + "atk:" + atk + ","
        + "hp:" + hp + ","
        + "skillGroupLimit:" + Bright.Common.StringUtil.CollectionToString(skillGroupLimit) + ","
        + "reviveNum:" + Bright.Common.StringUtil.CollectionToString(reviveNum) + ","
        + "success:" + Bright.Common.StringUtil.CollectionToString(success) + ","
        + "fail:" + Bright.Common.StringUtil.CollectionToString(fail) + ","
        + "unlock:" + unlock + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}