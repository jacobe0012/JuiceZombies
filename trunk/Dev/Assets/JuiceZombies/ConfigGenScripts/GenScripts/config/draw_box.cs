//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class draw_box :  Bright.Config.BeanBase 
{
    public draw_box(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["tag_func"].IsNumber) { throw new SerializationException(); }  tagFunc = _json["tag_func"]; }
        { if(!_json["sort"].IsNumber) { throw new SerializationException(); }  sort = _json["sort"]; }
        { if(!_json["limit_type"].IsNumber) { throw new SerializationException(); }  limitType = _json["limit_type"]; }
        { if(!_json["date_limit"].IsNumber) { throw new SerializationException(); }  dateLimit = _json["date_limit"]; }
        { if(!_json["times_limit"].IsNumber) { throw new SerializationException(); }  timesLimit = _json["times_limit"]; }
        { if(!_json["drop_banner_id"].IsNumber) { throw new SerializationException(); }  dropBannerId = _json["drop_banner_id"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["pic"].IsString) { throw new SerializationException(); }  pic = _json["pic"]; }
        { if(!_json["money"].IsNumber) { throw new SerializationException(); }  money = _json["money"]; }
        { var __json0 = _json["desc_para"]; if(!__json0.IsArray) { throw new SerializationException(); } descPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  descPara.Add(__v0); }   }
        { var __json0 = _json["guarantee_para"]; if(!__json0.IsArray) { throw new SerializationException(); } guaranteePara = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  guaranteePara.Add(__v0); }   }
        { if(!_json["draw_type"].IsNumber) { throw new SerializationException(); }  drawType = _json["draw_type"]; }
        { if(!_json["ad_cd"].IsNumber) { throw new SerializationException(); }  adCd = _json["ad_cd"]; }
        { if(!_json["item"].IsNumber) { throw new SerializationException(); }  item = _json["item"]; }
        { if(!_json["one"].IsNumber) { throw new SerializationException(); }  one = _json["one"]; }
        { if(!_json["ten"].IsNumber) { throw new SerializationException(); }  ten = _json["ten"]; }
        PostInit();
    }

    public draw_box(int id, int tag_func, int sort, int limit_type, int date_limit, int times_limit, int drop_banner_id, string name, string pic, int money, System.Collections.Generic.List<int> desc_para, System.Collections.Generic.List<UnityEngine.Vector2> guarantee_para, int draw_type, int ad_cd, int item, int one, int ten ) 
    {
        this.id = id;
        this.tagFunc = tag_func;
        this.sort = sort;
        this.limitType = limit_type;
        this.dateLimit = date_limit;
        this.timesLimit = times_limit;
        this.dropBannerId = drop_banner_id;
        this.name = name;
        this.pic = pic;
        this.money = money;
        this.descPara = desc_para;
        this.guaranteePara = guarantee_para;
        this.drawType = draw_type;
        this.adCd = ad_cd;
        this.item = item;
        this.one = one;
        this.ten = ten;
        
        PostInit();
    }

    public static draw_box Deserializedraw_box(JSONNode _json)
    {
        return new config.draw_box(_json);
    }

    /// <summary>
    /// 盲盒id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 所属模块id
    /// </summary>
    public int tagFunc { get; private set; }
    /// <summary>
    /// 排序
    /// </summary>
    public int sort { get; private set; }
    /// <summary>
    /// 限制类型
    /// </summary>
    public int limitType { get; private set; }
    /// <summary>
    /// 限时时间(有效期)
    /// </summary>
    public int dateLimit { get; private set; }
    /// <summary>
    /// 限次次数
    /// </summary>
    public int timesLimit { get; private set; }
    /// <summary>
    /// 卡池预览
    /// </summary>
    public int dropBannerId { get; private set; }
    /// <summary>
    /// 盲盒名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 盲盒图片(图片资源)
    /// </summary>
    public string pic { get; private set; }
    /// <summary>
    /// 获得金币
    /// </summary>
    public int money { get; private set; }
    /// <summary>
    /// 品质参数
    /// </summary>
    public System.Collections.Generic.List<int> descPara { get; private set; }
    /// <summary>
    /// 保底参数
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> guaranteePara { get; private set; }
    /// <summary>
    /// 逻辑类型
    /// </summary>
    public int drawType { get; private set; }
    /// <summary>
    /// 广告cd
    /// </summary>
    public int adCd { get; private set; }
    /// <summary>
    /// 抽奖物品id
    /// </summary>
    public int item { get; private set; }
    /// <summary>
    /// 单抽消耗钻石
    /// </summary>
    public int one { get; private set; }
    /// <summary>
    /// 十抽消耗钻石
    /// </summary>
    public int ten { get; private set; }
    public const int __ID__ = 175804796;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "tagFunc:" + tagFunc + ","
        + "sort:" + sort + ","
        + "limitType:" + limitType + ","
        + "dateLimit:" + dateLimit + ","
        + "timesLimit:" + timesLimit + ","
        + "dropBannerId:" + dropBannerId + ","
        + "name:" + name + ","
        + "pic:" + pic + ","
        + "money:" + money + ","
        + "descPara:" + Bright.Common.StringUtil.CollectionToString(descPara) + ","
        + "guaranteePara:" + Bright.Common.StringUtil.CollectionToString(guaranteePara) + ","
        + "drawType:" + drawType + ","
        + "adCd:" + adCd + ","
        + "item:" + item + ","
        + "one:" + one + ","
        + "ten:" + ten + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}