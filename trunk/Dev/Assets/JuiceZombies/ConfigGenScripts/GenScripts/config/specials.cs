//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class specials :  Bright.Config.BeanBase 
{
    public specials(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { var __json0 = _json["free_rule"]; if(!__json0.IsArray) { throw new SerializationException(); } freeRule = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  freeRule.Add(__v0); }   }
        { if(!_json["price"].IsNumber) { throw new SerializationException(); }  price = _json["price"]; }
        { if(!_json["ratio"].IsNumber) { throw new SerializationException(); }  ratio = _json["ratio"]; }
        { var __json0 = _json["reward"]; if(!__json0.IsArray) { throw new SerializationException(); } reward = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  reward.Add(__v0); }   }
        { if(!_json["sort"].IsNumber) { throw new SerializationException(); }  sort = _json["sort"]; }
        PostInit();
    }

    public specials(int id, int type, System.Collections.Generic.List<UnityEngine.Vector2> free_rule, int price, int ratio, System.Collections.Generic.List<UnityEngine.Vector3> reward, int sort ) 
    {
        this.id = id;
        this.type = type;
        this.freeRule = free_rule;
        this.price = price;
        this.ratio = ratio;
        this.reward = reward;
        this.sort = sort;
        
        PostInit();
    }

    public static specials Deserializespecials(JSONNode _json)
    {
        return new config.specials(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 免费规则
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> freeRule { get; private set; }
    /// <summary>
    /// 价格档位
    /// </summary>
    public int price { get; private set; }
    /// <summary>
    /// 返利比
    /// </summary>
    public int ratio { get; private set; }
    /// <summary>
    /// 奖励
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> reward { get; private set; }
    /// <summary>
    /// 排序
    /// </summary>
    public int sort { get; private set; }
    public const int __ID__ = -1130508282;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "type:" + type + ","
        + "freeRule:" + Bright.Common.StringUtil.CollectionToString(freeRule) + ","
        + "price:" + price + ","
        + "ratio:" + ratio + ","
        + "reward:" + Bright.Common.StringUtil.CollectionToString(reward) + ","
        + "sort:" + sort + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}