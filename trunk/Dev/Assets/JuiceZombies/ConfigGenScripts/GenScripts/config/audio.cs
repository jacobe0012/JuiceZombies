//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class audio :  Bright.Config.BeanBase 
{
    public audio(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["group"].IsString) { throw new SerializationException(); }  group = _json["group"]; }
        { var __json0 = _json["resource"]; if(!__json0.IsArray) { throw new SerializationException(); } resource = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  resource.Add(__v0); }   }
        { if(!_json["volume"].IsNumber) { throw new SerializationException(); }  volume = _json["volume"]; }
        { if(!_json["loop_type"].IsNumber) { throw new SerializationException(); }  loopType = _json["loop_type"]; }
        PostInit();
    }

    public audio(int id, string group, System.Collections.Generic.List<string> resource, int volume, int loop_type ) 
    {
        this.id = id;
        this.group = group;
        this.resource = resource;
        this.volume = volume;
        this.loopType = loop_type;
        
        PostInit();
    }

    public static audio Deserializeaudio(JSONNode _json)
    {
        return new config.audio(_json);
    }

    /// <summary>
    /// 组id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 音效组
    /// </summary>
    public string group { get; private set; }
    /// <summary>
    /// 音效资源
    /// </summary>
    public System.Collections.Generic.List<string> resource { get; private set; }
    /// <summary>
    /// 音量大小
    /// </summary>
    public int volume { get; private set; }
    /// <summary>
    /// 循环类型
    /// </summary>
    public int loopType { get; private set; }
    public const int __ID__ = -877063638;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "group:" + group + ","
        + "resource:" + Bright.Common.StringUtil.CollectionToString(resource) + ","
        + "volume:" + volume + ","
        + "loopType:" + loopType + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}