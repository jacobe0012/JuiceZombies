//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class Items :  Bright.Config.BeanBase 
{
    public Items(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["type"].IsNumber) { throw new SerializationException(); }  type = _json["type"]; }
        { if(!_json["quality"].IsNumber) { throw new SerializationException(); }  quality = _json["quality"]; }
        { if(!_json["use_yn"].IsNumber) { throw new SerializationException(); }  useYn = _json["use_yn"]; }
        { var __json0 = _json["use_drop"]; if(!__json0.IsArray) { throw new SerializationException(); } useDrop = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  useDrop.Add(__v0); }   }
        { if(!_json["pile_yn"].IsNumber) { throw new SerializationException(); }  pileYn = _json["pile_yn"]; }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  desc = _json["desc"]; }
        { var __json0 = _json["desc_value"]; if(!__json0.IsArray) { throw new SerializationException(); } descValue = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  descValue.Add(__v0); }   }
        { if(!_json["icon"].IsString) { throw new SerializationException(); }  icon = _json["icon"]; }
        { if(!_json["sort"].IsNumber) { throw new SerializationException(); }  sort = _json["sort"]; }
        PostInit();
    }

    public Items(int id, int type, int quality, int use_yn, System.Collections.Generic.List<UnityEngine.Vector3> use_drop, int pile_yn, string name, string desc, System.Collections.Generic.List<int> desc_value, string icon, int sort ) 
    {
        this.id = id;
        this.type = type;
        this.quality = quality;
        this.useYn = use_yn;
        this.useDrop = use_drop;
        this.pileYn = pile_yn;
        this.name = name;
        this.desc = desc;
        this.descValue = desc_value;
        this.icon = icon;
        this.sort = sort;
        
        PostInit();
    }

    public static Items DeserializeItems(JSONNode _json)
    {
        return new config.Items(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 道具类型
    /// </summary>
    public int type { get; private set; }
    /// <summary>
    /// 道具品质
    /// </summary>
    public int quality { get; private set; }
    /// <summary>
    /// 可否使用
    /// </summary>
    public int useYn { get; private set; }
    /// <summary>
    /// 使用获得
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> useDrop { get; private set; }
    /// <summary>
    /// 可否堆叠
    /// </summary>
    public int pileYn { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 道具描述
    /// </summary>
    public string desc { get; private set; }
    /// <summary>
    /// 物品描述变量
    /// </summary>
    public System.Collections.Generic.List<int> descValue { get; private set; }
    /// <summary>
    /// 图标
    /// </summary>
    public string icon { get; private set; }
    /// <summary>
    /// 排序
    /// </summary>
    public int sort { get; private set; }
    public const int __ID__ = -899256844;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "type:" + type + ","
        + "quality:" + quality + ","
        + "useYn:" + useYn + ","
        + "useDrop:" + Bright.Common.StringUtil.CollectionToString(useDrop) + ","
        + "pileYn:" + pileYn + ","
        + "name:" + name + ","
        + "desc:" + desc + ","
        + "descValue:" + Bright.Common.StringUtil.CollectionToString(descValue) + ","
        + "icon:" + icon + ","
        + "sort:" + sort + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}