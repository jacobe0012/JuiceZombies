//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class monster_model :  Bright.Config.BeanBase 
{
    public monster_model(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["book_type"].IsNumber) { throw new SerializationException(); }  bookType = _json["book_type"]; }
        { if(!_json["power_id"].IsNumber) { throw new SerializationException(); }  powerId = _json["power_id"]; }
        { if(!_json["racist_id"].IsNumber) { throw new SerializationException(); }  racistId = _json["racist_id"]; }
        { if(!_json["diamond"].IsNumber) { throw new SerializationException(); }  diamond = _json["diamond"]; }
        { if(!_json["thumb_pic"].IsString) { throw new SerializationException(); }  thumbPic = _json["thumb_pic"]; }
        { if(!_json["book_pic"].IsString) { throw new SerializationException(); }  bookPic = _json["book_pic"]; }
        { var __json0 = _json["pic_cut_para"]; if(!__json0.IsArray) { throw new SerializationException(); } picCutPara = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  picCutPara.Add(__v0); }   }
        { var __json0 = _json["pic_pos_para"]; if(!__json0.IsArray) { throw new SerializationException(); } picPosPara = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  picPosPara.Add(__v0); }   }
        { var __json0 = _json["feature_id"]; if(!__json0.IsArray) { throw new SerializationException(); } featureId = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  featureId.Add(__v0); }   }
        { if(!_json["name"].IsString) { throw new SerializationException(); }  name = _json["name"]; }
        { if(!_json["desc"].IsString) { throw new SerializationException(); }  desc = _json["desc"]; }
        { if(!_json["model"].IsString) { throw new SerializationException(); }  model = _json["model"]; }
        { if(!_json["spine"].IsString) { throw new SerializationException(); }  spine = _json["spine"]; }
        { var __json0 = _json["spine_pos_para"]; if(!__json0.IsArray) { throw new SerializationException(); } spinePosPara = new System.Collections.Generic.List<UnityEngine.Vector3>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector3 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  __v0 = new UnityEngine.Vector3(__x, __y,__z); }  spinePosPara.Add(__v0); }   }
        { var __json0 = _json["challenge_text"]; if(!__json0.IsArray) { throw new SerializationException(); } challengeText = new System.Collections.Generic.List<string>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { string __v0;  { if(!__e0.IsString) { throw new SerializationException(); }  __v0 = __e0; }  challengeText.Add(__v0); }   }
        PostInit();
    }

    public monster_model(int id, int book_type, int power_id, int racist_id, int diamond, string thumb_pic, string book_pic, System.Collections.Generic.List<UnityEngine.Vector2> pic_cut_para, System.Collections.Generic.List<UnityEngine.Vector3> pic_pos_para, System.Collections.Generic.List<int> feature_id, string name, string desc, string model, string spine, System.Collections.Generic.List<UnityEngine.Vector3> spine_pos_para, System.Collections.Generic.List<string> challenge_text ) 
    {
        this.id = id;
        this.bookType = book_type;
        this.powerId = power_id;
        this.racistId = racist_id;
        this.diamond = diamond;
        this.thumbPic = thumb_pic;
        this.bookPic = book_pic;
        this.picCutPara = pic_cut_para;
        this.picPosPara = pic_pos_para;
        this.featureId = feature_id;
        this.name = name;
        this.desc = desc;
        this.model = model;
        this.spine = spine;
        this.spinePosPara = spine_pos_para;
        this.challengeText = challenge_text;
        
        PostInit();
    }

    public static monster_model Deserializemonster_model(JSONNode _json)
    {
        return new config.monster_model(_json);
    }

    /// <summary>
    /// 模型id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 图鉴类型
    /// </summary>
    public int bookType { get; private set; }
    /// <summary>
    /// 图鉴-势力id
    /// </summary>
    public int powerId { get; private set; }
    /// <summary>
    /// 图鉴-种族id
    /// </summary>
    public int racistId { get; private set; }
    /// <summary>
    /// 图鉴-解锁领取比特币
    /// </summary>
    public int diamond { get; private set; }
    /// <summary>
    /// 缩略图(图片资源)
    /// </summary>
    public string thumbPic { get; private set; }
    /// <summary>
    /// 图鉴的图(图片资源)
    /// </summary>
    public string bookPic { get; private set; }
    /// <summary>
    /// 图鉴-裁剪参数
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> picCutPara { get; private set; }
    /// <summary>
    /// 图鉴-图片位置参数
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> picPosPara { get; private set; }
    /// <summary>
    /// 特性id
    /// </summary>
    public System.Collections.Generic.List<int> featureId { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string name { get; private set; }
    /// <summary>
    /// 描述
    /// </summary>
    public string desc { get; private set; }
    /// <summary>
    /// 怪物模型
    /// </summary>
    public string model { get; private set; }
    /// <summary>
    /// 动画
    /// </summary>
    public string spine { get; private set; }
    /// <summary>
    /// 动画位置参数
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector3> spinePosPara { get; private set; }
    /// <summary>
    /// 挑战文本
    /// </summary>
    public System.Collections.Generic.List<string> challengeText { get; private set; }
    public const int __ID__ = -1718829864;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "bookType:" + bookType + ","
        + "powerId:" + powerId + ","
        + "racistId:" + racistId + ","
        + "diamond:" + diamond + ","
        + "thumbPic:" + thumbPic + ","
        + "bookPic:" + bookPic + ","
        + "picCutPara:" + Bright.Common.StringUtil.CollectionToString(picCutPara) + ","
        + "picPosPara:" + Bright.Common.StringUtil.CollectionToString(picPosPara) + ","
        + "featureId:" + Bright.Common.StringUtil.CollectionToString(featureId) + ","
        + "name:" + name + ","
        + "desc:" + desc + ","
        + "model:" + model + ","
        + "spine:" + spine + ","
        + "spinePosPara:" + Bright.Common.StringUtil.CollectionToString(spinePosPara) + ","
        + "challengeText:" + Bright.Common.StringUtil.CollectionToString(challengeText) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}