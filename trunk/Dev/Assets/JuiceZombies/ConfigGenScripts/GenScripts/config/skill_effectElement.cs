//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class skill_effectElement :  Bright.Config.BeanBase 
{
    public skill_effectElement(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["element_type"].IsNumber) { throw new SerializationException(); }  elementType = _json["element_type"]; }
        { if(!_json["output_type"].IsNumber) { throw new SerializationException(); }  outputType = _json["output_type"]; }
        { var __json0 = _json["output_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } outputTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  outputTypePara.Add(__v0); }   }
        { if(!_json["bonus_type"].IsNumber) { throw new SerializationException(); }  bonusType = _json["bonus_type"]; }
        { var __json0 = _json["bonus_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } bonusTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  bonusTypePara.Add(__v0); }   }
        { if(!_json["calc_type"].IsNumber) { throw new SerializationException(); }  calcType = _json["calc_type"]; }
        { var __json0 = _json["calc_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } calcTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  calcTypePara.Add(__v0); }   }
        { if(!_json["state_type"].IsNumber) { throw new SerializationException(); }  stateType = _json["state_type"]; }
        { var __json0 = _json["state_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } stateTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  stateTypePara.Add(__v0); }   }
        { if(!_json["attr_id"].IsNumber) { throw new SerializationException(); }  attrId = _json["attr_id"]; }
        { var __json0 = _json["attr_id_para"]; if(!__json0.IsArray) { throw new SerializationException(); } attrIdPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  attrIdPara.Add(__v0); }   }
        { if(!_json["control_type"].IsNumber) { throw new SerializationException(); }  controlType = _json["control_type"]; }
        { var __json0 = _json["control_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } controlTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  controlTypePara.Add(__v0); }   }
        { if(!_json["change_type"].IsNumber) { throw new SerializationException(); }  changeType = _json["change_type"]; }
        { var __json0 = _json["change_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } changeTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  changeTypePara.Add(__v0); }   }
        { if(!_json["clear_type"].IsNumber) { throw new SerializationException(); }  clearType = _json["clear_type"]; }
        { var __json0 = _json["clear_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } clearTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  clearTypePara.Add(__v0); }   }
        { if(!_json["immune_type"].IsNumber) { throw new SerializationException(); }  immuneType = _json["immune_type"]; }
        { var __json0 = _json["immune_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } immuneTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  immuneTypePara.Add(__v0); }   }
        { if(!_json["displace_from"].IsNumber) { throw new SerializationException(); }  displaceFrom = _json["displace_from"]; }
        { var __json0 = _json["displace_from_para"]; if(!__json0.IsArray) { throw new SerializationException(); } displaceFromPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  displaceFromPara.Add(__v0); }   }
        { if(!_json["point_type"].IsNumber) { throw new SerializationException(); }  pointType = _json["point_type"]; }
        { var __json0 = _json["point_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } pointTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  pointTypePara.Add(__v0); }   }
        { if(!_json["power"].IsNumber) { throw new SerializationException(); }  power = _json["power"]; }
        { if(!_json["pass_type"].IsNumber) { throw new SerializationException(); }  passType = _json["pass_type"]; }
        { if(!_json["bonus_other_type"].IsNumber) { throw new SerializationException(); }  bonusOtherType = _json["bonus_other_type"]; }
        { var __json0 = _json["bonus_other_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } bonusOtherTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  bonusOtherTypePara.Add(__v0); }   }
        { if(!_json["direction_type"].IsNumber) { throw new SerializationException(); }  directionType = _json["direction_type"]; }
        { var __json0 = _json["direction_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } directionTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  directionTypePara.Add(__v0); }   }
        { if(!_json["hit_type"].IsNumber) { throw new SerializationException(); }  hitType = _json["hit_type"]; }
        { var __json0 = _json["hit_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } hitTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  hitTypePara.Add(__v0); }   }
        { var __json0 = _json["pass_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } passTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  passTypePara.Add(__v0); }   }
        PostInit();
    }

    public skill_effectElement(int id, int element_type, int output_type, System.Collections.Generic.List<int> output_type_para, int bonus_type, System.Collections.Generic.List<int> bonus_type_para, int calc_type, System.Collections.Generic.List<int> calc_type_para, int state_type, System.Collections.Generic.List<int> state_type_para, int attr_id, System.Collections.Generic.List<int> attr_id_para, int control_type, System.Collections.Generic.List<int> control_type_para, int change_type, System.Collections.Generic.List<int> change_type_para, int clear_type, System.Collections.Generic.List<int> clear_type_para, int immune_type, System.Collections.Generic.List<int> immune_type_para, int displace_from, System.Collections.Generic.List<int> displace_from_para, int point_type, System.Collections.Generic.List<int> point_type_para, int power, int pass_type, int bonus_other_type, System.Collections.Generic.List<int> bonus_other_type_para, int direction_type, System.Collections.Generic.List<int> direction_type_para, int hit_type, System.Collections.Generic.List<int> hit_type_para, System.Collections.Generic.List<int> pass_type_para ) 
    {
        this.id = id;
        this.elementType = element_type;
        this.outputType = output_type;
        this.outputTypePara = output_type_para;
        this.bonusType = bonus_type;
        this.bonusTypePara = bonus_type_para;
        this.calcType = calc_type;
        this.calcTypePara = calc_type_para;
        this.stateType = state_type;
        this.stateTypePara = state_type_para;
        this.attrId = attr_id;
        this.attrIdPara = attr_id_para;
        this.controlType = control_type;
        this.controlTypePara = control_type_para;
        this.changeType = change_type;
        this.changeTypePara = change_type_para;
        this.clearType = clear_type;
        this.clearTypePara = clear_type_para;
        this.immuneType = immune_type;
        this.immuneTypePara = immune_type_para;
        this.displaceFrom = displace_from;
        this.displaceFromPara = displace_from_para;
        this.pointType = point_type;
        this.pointTypePara = point_type_para;
        this.power = power;
        this.passType = pass_type;
        this.bonusOtherType = bonus_other_type;
        this.bonusOtherTypePara = bonus_other_type_para;
        this.directionType = direction_type;
        this.directionTypePara = direction_type_para;
        this.hitType = hit_type;
        this.hitTypePara = hit_type_para;
        this.passTypePara = pass_type_para;
        
        PostInit();
    }

    public static skill_effectElement Deserializeskill_effectElement(JSONNode _json)
    {
        return new config.skill_effectElement(_json);
    }

    /// <summary>
    /// 元素id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 元素类型
    /// </summary>
    public int elementType { get; private set; }
    /// <summary>
    /// 输出类型
    /// </summary>
    public int outputType { get; private set; }
    /// <summary>
    /// 输出类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> outputTypePara { get; private set; }
    /// <summary>
    /// 受属性影响类型
    /// </summary>
    public int bonusType { get; private set; }
    /// <summary>
    /// 受属性影响类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> bonusTypePara { get; private set; }
    /// <summary>
    /// 计算类型
    /// </summary>
    public int calcType { get; private set; }
    /// <summary>
    /// 计算类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> calcTypePara { get; private set; }
    /// <summary>
    /// 正负面类型
    /// </summary>
    public int stateType { get; private set; }
    /// <summary>
    /// 正负面类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> stateTypePara { get; private set; }
    /// <summary>
    /// 变更属性ID
    /// </summary>
    public int attrId { get; private set; }
    /// <summary>
    /// 变更属性ID参数值
    /// </summary>
    public System.Collections.Generic.List<int> attrIdPara { get; private set; }
    /// <summary>
    /// 控制类型
    /// </summary>
    public int controlType { get; private set; }
    /// <summary>
    /// 控制类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> controlTypePara { get; private set; }
    /// <summary>
    /// 替换类型
    /// </summary>
    public int changeType { get; private set; }
    /// <summary>
    /// 替换类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> changeTypePara { get; private set; }
    /// <summary>
    /// 清除类型
    /// </summary>
    public int clearType { get; private set; }
    /// <summary>
    /// 清除类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> clearTypePara { get; private set; }
    /// <summary>
    /// 免疫类型
    /// </summary>
    public int immuneType { get; private set; }
    /// <summary>
    /// 免疫类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> immuneTypePara { get; private set; }
    /// <summary>
    /// 强制位移依据
    /// </summary>
    public int displaceFrom { get; private set; }
    /// <summary>
    /// 强制位移依据参数值
    /// </summary>
    public System.Collections.Generic.List<int> displaceFromPara { get; private set; }
    /// <summary>
    /// 选点类型
    /// </summary>
    public int pointType { get; private set; }
    /// <summary>
    /// 选点类型参数值
    /// </summary>
    public System.Collections.Generic.List<int> pointTypePara { get; private set; }
    /// <summary>
    /// 概率权重
    /// </summary>
    public int power { get; private set; }
    /// <summary>
    /// 穿墙类型
    /// </summary>
    public int passType { get; private set; }
    /// <summary>
    /// 受其他影响类型
    /// </summary>
    public int bonusOtherType { get; private set; }
    /// <summary>
    /// 受其他影响类型参数
    /// </summary>
    public System.Collections.Generic.List<int> bonusOtherTypePara { get; private set; }
    /// <summary>
    /// 方向类型
    /// </summary>
    public int directionType { get; private set; }
    /// <summary>
    /// 方向类型参数
    /// </summary>
    public System.Collections.Generic.List<int> directionTypePara { get; private set; }
    /// <summary>
    /// 方向类型
    /// </summary>
    public int hitType { get; private set; }
    /// <summary>
    /// 方向类型参数
    /// </summary>
    public System.Collections.Generic.List<int> hitTypePara { get; private set; }
    /// <summary>
    /// 穿墙类型参数
    /// </summary>
    public System.Collections.Generic.List<int> passTypePara { get; private set; }
    public const int __ID__ = -1968646639;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "elementType:" + elementType + ","
        + "outputType:" + outputType + ","
        + "outputTypePara:" + Bright.Common.StringUtil.CollectionToString(outputTypePara) + ","
        + "bonusType:" + bonusType + ","
        + "bonusTypePara:" + Bright.Common.StringUtil.CollectionToString(bonusTypePara) + ","
        + "calcType:" + calcType + ","
        + "calcTypePara:" + Bright.Common.StringUtil.CollectionToString(calcTypePara) + ","
        + "stateType:" + stateType + ","
        + "stateTypePara:" + Bright.Common.StringUtil.CollectionToString(stateTypePara) + ","
        + "attrId:" + attrId + ","
        + "attrIdPara:" + Bright.Common.StringUtil.CollectionToString(attrIdPara) + ","
        + "controlType:" + controlType + ","
        + "controlTypePara:" + Bright.Common.StringUtil.CollectionToString(controlTypePara) + ","
        + "changeType:" + changeType + ","
        + "changeTypePara:" + Bright.Common.StringUtil.CollectionToString(changeTypePara) + ","
        + "clearType:" + clearType + ","
        + "clearTypePara:" + Bright.Common.StringUtil.CollectionToString(clearTypePara) + ","
        + "immuneType:" + immuneType + ","
        + "immuneTypePara:" + Bright.Common.StringUtil.CollectionToString(immuneTypePara) + ","
        + "displaceFrom:" + displaceFrom + ","
        + "displaceFromPara:" + Bright.Common.StringUtil.CollectionToString(displaceFromPara) + ","
        + "pointType:" + pointType + ","
        + "pointTypePara:" + Bright.Common.StringUtil.CollectionToString(pointTypePara) + ","
        + "power:" + power + ","
        + "passType:" + passType + ","
        + "bonusOtherType:" + bonusOtherType + ","
        + "bonusOtherTypePara:" + Bright.Common.StringUtil.CollectionToString(bonusOtherTypePara) + ","
        + "directionType:" + directionType + ","
        + "directionTypePara:" + Bright.Common.StringUtil.CollectionToString(directionTypePara) + ","
        + "hitType:" + hitType + ","
        + "hitTypePara:" + Bright.Common.StringUtil.CollectionToString(hitTypePara) + ","
        + "passTypePara:" + Bright.Common.StringUtil.CollectionToString(passTypePara) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}