//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg.config
{ 

public sealed partial class skill_effectNew :  Bright.Config.BeanBase 
{
    public skill_effectNew(JSONNode _json) 
    {
        { if(!_json["id"].IsNumber) { throw new SerializationException(); }  id = _json["id"]; }
        { if(!_json["skill_id"].IsNumber) { throw new SerializationException(); }  skillId = _json["skill_id"]; }
        { if(!_json["element_id"].IsNumber) { throw new SerializationException(); }  elementId = _json["element_id"]; }
        { var __json0 = _json["battle_status"]; if(!__json0.IsArray) { throw new SerializationException(); } battleStatus = new System.Collections.Generic.List<UnityEngine.Vector2>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { UnityEngine.Vector2 __v0;  { var _json2 = __e0; if(!_json2.IsObject) { throw new SerializationException(); }  float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } __v0 = new UnityEngine.Vector2(__x, __y); }  battleStatus.Add(__v0); }   }
        { if(!_json["animation"].IsString) { throw new SerializationException(); }  animation = _json["animation"]; }
        { if(!_json["animation_speed"].IsNumber) { throw new SerializationException(); }  animationSpeed = _json["animation_speed"]; }
        { var __json0 = _json["special_effects"]; if(!__json0.IsArray) { throw new SerializationException(); } specialEffects = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  specialEffects.Add(__v0); }   }
        { var __json0 = _json["audio"]; if(!__json0.IsArray) { throw new SerializationException(); } audio = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  audio.Add(__v0); }   }
        { var __json0 = _json["audio_close"]; if(!__json0.IsArray) { throw new SerializationException(); } audioClose = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  audioClose.Add(__v0); }   }
        { if(!_json["trigger_type"].IsNumber) { throw new SerializationException(); }  triggerType = _json["trigger_type"]; }
        { var __json0 = _json["trigger_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } triggerTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  triggerTypePara.Add(__v0); }   }
        { if(!_json["condition_type"].IsNumber) { throw new SerializationException(); }  conditionType = _json["condition_type"]; }
        { var __json0 = _json["condition_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } conditionTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  conditionTypePara.Add(__v0); }   }
        { if(!_json["compare_type"].IsNumber) { throw new SerializationException(); }  compareType = _json["compare_type"]; }
        { var __json0 = _json["compare_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } compareTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  compareTypePara.Add(__v0); }   }
        { if(!_json["delay_type"].IsNumber) { throw new SerializationException(); }  delayType = _json["delay_type"]; }
        { var __json0 = _json["delay_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } delayTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  delayTypePara.Add(__v0); }   }
        { if(!_json["calc_type"].IsNumber) { throw new SerializationException(); }  calcType = _json["calc_type"]; }
        { var __json0 = _json["calc_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } calcTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  calcTypePara.Add(__v0); }   }
        { if(!_json["extra_type"].IsNumber) { throw new SerializationException(); }  extraType = _json["extra_type"]; }
        { var __json0 = _json["extra_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } extraTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  extraTypePara.Add(__v0); }   }
        { if(!_json["search_type"].IsNumber) { throw new SerializationException(); }  searchType = _json["search_type"]; }
        { var __json0 = _json["search_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } searchTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  searchTypePara.Add(__v0); }   }
        { if(!_json["range_type"].IsNumber) { throw new SerializationException(); }  rangeType = _json["range_type"]; }
        { var __json0 = _json["range_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } rangeTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  rangeTypePara.Add(__v0); }   }
        { if(!_json["deviate_type"].IsNumber) { throw new SerializationException(); }  deviateType = _json["deviate_type"]; }
        { var __json0 = _json["deviate_type_para"]; if(!__json0.IsArray) { throw new SerializationException(); } deviateTypePara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  deviateTypePara.Add(__v0); }   }
        { if(!_json["target"].IsNumber) { throw new SerializationException(); }  target = _json["target"]; }
        { var __json0 = _json["target_para"]; if(!__json0.IsArray) { throw new SerializationException(); } targetPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  targetPara.Add(__v0); }   }
        { var __json0 = _json["element_trigger"]; if(!__json0.IsArray) { throw new SerializationException(); } elementTrigger = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  elementTrigger.Add(__v0); }   }
        { var __json0 = _json["element_list"]; if(!__json0.IsArray) { throw new SerializationException(); } elementList = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  elementList.Add(__v0); }   }
        { if(!_json["power"].IsNumber) { throw new SerializationException(); }  power = _json["power"]; }
        { if(!_json["effect_type"].IsNumber) { throw new SerializationException(); }  effectType = _json["effect_type"]; }
        { if(!_json["attr_id"].IsNumber) { throw new SerializationException(); }  attrId = _json["attr_id"]; }
        { var __json0 = _json["attr_id_para"]; if(!__json0.IsArray) { throw new SerializationException(); } attrIdPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  attrIdPara.Add(__v0); }   }
        { if(!_json["target_lock_on"].IsNumber) { throw new SerializationException(); }  targetLockOn = _json["target_lock_on"]; }
        { var __json0 = _json["target_lock_on_para"]; if(!__json0.IsArray) { throw new SerializationException(); } targetLockOnPara = new System.Collections.Generic.List<int>(__json0.Count); foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  targetLockOnPara.Add(__v0); }   }
        PostInit();
    }

    public skill_effectNew(int id, int skill_id, int element_id, System.Collections.Generic.List<UnityEngine.Vector2> battle_status, string animation, int animation_speed, System.Collections.Generic.List<int> special_effects, System.Collections.Generic.List<int> audio, System.Collections.Generic.List<int> audio_close, int trigger_type, System.Collections.Generic.List<int> trigger_type_para, int condition_type, System.Collections.Generic.List<int> condition_type_para, int compare_type, System.Collections.Generic.List<int> compare_type_para, int delay_type, System.Collections.Generic.List<int> delay_type_para, int calc_type, System.Collections.Generic.List<int> calc_type_para, int extra_type, System.Collections.Generic.List<int> extra_type_para, int search_type, System.Collections.Generic.List<int> search_type_para, int range_type, System.Collections.Generic.List<int> range_type_para, int deviate_type, System.Collections.Generic.List<int> deviate_type_para, int target, System.Collections.Generic.List<int> target_para, System.Collections.Generic.List<int> element_trigger, System.Collections.Generic.List<int> element_list, int power, int effect_type, int attr_id, System.Collections.Generic.List<int> attr_id_para, int target_lock_on, System.Collections.Generic.List<int> target_lock_on_para ) 
    {
        this.id = id;
        this.skillId = skill_id;
        this.elementId = element_id;
        this.battleStatus = battle_status;
        this.animation = animation;
        this.animationSpeed = animation_speed;
        this.specialEffects = special_effects;
        this.audio = audio;
        this.audioClose = audio_close;
        this.triggerType = trigger_type;
        this.triggerTypePara = trigger_type_para;
        this.conditionType = condition_type;
        this.conditionTypePara = condition_type_para;
        this.compareType = compare_type;
        this.compareTypePara = compare_type_para;
        this.delayType = delay_type;
        this.delayTypePara = delay_type_para;
        this.calcType = calc_type;
        this.calcTypePara = calc_type_para;
        this.extraType = extra_type;
        this.extraTypePara = extra_type_para;
        this.searchType = search_type;
        this.searchTypePara = search_type_para;
        this.rangeType = range_type;
        this.rangeTypePara = range_type_para;
        this.deviateType = deviate_type;
        this.deviateTypePara = deviate_type_para;
        this.target = target;
        this.targetPara = target_para;
        this.elementTrigger = element_trigger;
        this.elementList = element_list;
        this.power = power;
        this.effectType = effect_type;
        this.attrId = attr_id;
        this.attrIdPara = attr_id_para;
        this.targetLockOn = target_lock_on;
        this.targetLockOnPara = target_lock_on_para;
        
        PostInit();
    }

    public static skill_effectNew Deserializeskill_effectNew(JSONNode _json)
    {
        return new config.skill_effectNew(_json);
    }

    /// <summary>
    /// 效果id
    /// </summary>
    public int id { get; private set; }
    /// <summary>
    /// 技能id
    /// </summary>
    public int skillId { get; private set; }
    /// <summary>
    /// 元素id
    /// </summary>
    public int elementId { get; private set; }
    /// <summary>
    /// 状态
    /// </summary>
    public System.Collections.Generic.List<UnityEngine.Vector2> battleStatus { get; private set; }
    /// <summary>
    /// 动画资源
    /// </summary>
    public string animation { get; private set; }
    /// <summary>
    /// 动画播放速率
    /// </summary>
    public int animationSpeed { get; private set; }
    /// <summary>
    /// 特效id
    /// </summary>
    public System.Collections.Generic.List<int> specialEffects { get; private set; }
    /// <summary>
    /// 音效
    /// </summary>
    public System.Collections.Generic.List<int> audio { get; private set; }
    /// <summary>
    /// 关闭音效
    /// </summary>
    public System.Collections.Generic.List<int> audioClose { get; private set; }
    /// <summary>
    /// 触发效果类型
    /// </summary>
    public int triggerType { get; private set; }
    /// <summary>
    /// 触发效果类型参数
    /// </summary>
    public System.Collections.Generic.List<int> triggerTypePara { get; private set; }
    /// <summary>
    /// 条件类型
    /// </summary>
    public int conditionType { get; private set; }
    /// <summary>
    /// 条件类型参数
    /// </summary>
    public System.Collections.Generic.List<int> conditionTypePara { get; private set; }
    /// <summary>
    /// 比较类型
    /// </summary>
    public int compareType { get; private set; }
    /// <summary>
    /// 比较类型参数
    /// </summary>
    public System.Collections.Generic.List<int> compareTypePara { get; private set; }
    /// <summary>
    /// 延迟类型
    /// </summary>
    public int delayType { get; private set; }
    /// <summary>
    /// 延迟类型参数
    /// </summary>
    public System.Collections.Generic.List<int> delayTypePara { get; private set; }
    /// <summary>
    /// 计算类型
    /// </summary>
    public int calcType { get; private set; }
    /// <summary>
    /// 计算类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> calcTypePara { get; private set; }
    /// <summary>
    /// 额外类型
    /// </summary>
    public int extraType { get; private set; }
    /// <summary>
    /// 额外类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> extraTypePara { get; private set; }
    /// <summary>
    /// 索敌类型
    /// </summary>
    public int searchType { get; private set; }
    /// <summary>
    /// 索敌类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> searchTypePara { get; private set; }
    /// <summary>
    /// 范围类型
    /// </summary>
    public int rangeType { get; private set; }
    /// <summary>
    /// 范围类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> rangeTypePara { get; private set; }
    /// <summary>
    /// 偏移类型
    /// </summary>
    public int deviateType { get; private set; }
    /// <summary>
    /// 偏移类型参数 
    /// </summary>
    public System.Collections.Generic.List<int> deviateTypePara { get; private set; }
    /// <summary>
    /// 作用对象
    /// </summary>
    public int target { get; private set; }
    /// <summary>
    /// 作用对象参数 
    /// </summary>
    public System.Collections.Generic.List<int> targetPara { get; private set; }
    /// <summary>
    /// 自加的元素类触发器 
    /// </summary>
    public System.Collections.Generic.List<int> elementTrigger { get; private set; }
    /// <summary>
    /// 元素列表
    /// </summary>
    public System.Collections.Generic.List<int> elementList { get; private set; }
    /// <summary>
    /// 概率权重
    /// </summary>
    public int power { get; private set; }
    /// <summary>
    /// 效果类型
    /// </summary>
    public int effectType { get; private set; }
    /// <summary>
    /// 变更属性ID
    /// </summary>
    public int attrId { get; private set; }
    /// <summary>
    /// 变更属性ID参数值
    /// </summary>
    public System.Collections.Generic.List<int> attrIdPara { get; private set; }
    /// <summary>
    /// 索敌目标
    /// </summary>
    public int targetLockOn { get; private set; }
    /// <summary>
    /// 索敌目标参数 
    /// </summary>
    public System.Collections.Generic.List<int> targetLockOnPara { get; private set; }
    public const int __ID__ = -1979698379;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + id + ","
        + "skillId:" + skillId + ","
        + "elementId:" + elementId + ","
        + "battleStatus:" + Bright.Common.StringUtil.CollectionToString(battleStatus) + ","
        + "animation:" + animation + ","
        + "animationSpeed:" + animationSpeed + ","
        + "specialEffects:" + Bright.Common.StringUtil.CollectionToString(specialEffects) + ","
        + "audio:" + Bright.Common.StringUtil.CollectionToString(audio) + ","
        + "audioClose:" + Bright.Common.StringUtil.CollectionToString(audioClose) + ","
        + "triggerType:" + triggerType + ","
        + "triggerTypePara:" + Bright.Common.StringUtil.CollectionToString(triggerTypePara) + ","
        + "conditionType:" + conditionType + ","
        + "conditionTypePara:" + Bright.Common.StringUtil.CollectionToString(conditionTypePara) + ","
        + "compareType:" + compareType + ","
        + "compareTypePara:" + Bright.Common.StringUtil.CollectionToString(compareTypePara) + ","
        + "delayType:" + delayType + ","
        + "delayTypePara:" + Bright.Common.StringUtil.CollectionToString(delayTypePara) + ","
        + "calcType:" + calcType + ","
        + "calcTypePara:" + Bright.Common.StringUtil.CollectionToString(calcTypePara) + ","
        + "extraType:" + extraType + ","
        + "extraTypePara:" + Bright.Common.StringUtil.CollectionToString(extraTypePara) + ","
        + "searchType:" + searchType + ","
        + "searchTypePara:" + Bright.Common.StringUtil.CollectionToString(searchTypePara) + ","
        + "rangeType:" + rangeType + ","
        + "rangeTypePara:" + Bright.Common.StringUtil.CollectionToString(rangeTypePara) + ","
        + "deviateType:" + deviateType + ","
        + "deviateTypePara:" + Bright.Common.StringUtil.CollectionToString(deviateTypePara) + ","
        + "target:" + target + ","
        + "targetPara:" + Bright.Common.StringUtil.CollectionToString(targetPara) + ","
        + "elementTrigger:" + Bright.Common.StringUtil.CollectionToString(elementTrigger) + ","
        + "elementList:" + Bright.Common.StringUtil.CollectionToString(elementList) + ","
        + "power:" + power + ","
        + "effectType:" + effectType + ","
        + "attrId:" + attrId + ","
        + "attrIdPara:" + Bright.Common.StringUtil.CollectionToString(attrIdPara) + ","
        + "targetLockOn:" + targetLockOn + ","
        + "targetLockOnPara:" + Bright.Common.StringUtil.CollectionToString(targetLockOnPara) + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}