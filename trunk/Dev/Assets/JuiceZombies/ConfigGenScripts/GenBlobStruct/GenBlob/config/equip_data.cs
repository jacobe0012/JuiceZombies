//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbequip_data
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbequip_data> configTbequip_datas,Tables tables)
    { 
        configTbequip_datas[i].id = tables.Tbequip_data.DataList[i].id;
        configTbequip_datas[i].posId = tables.Tbequip_data.DataList[i].posId;
        configTbequip_datas[i].quality = tables.Tbequip_data.DataList[i].quality;
        configTbequip_datas[i].mainEntryId = tables.Tbequip_data.DataList[i].mainEntryId;
        configTbequip_datas[i].mainEntryInit = tables.Tbequip_data.DataList[i].mainEntryInit;
        configTbequip_datas[i].mainEntryGrow = tables.Tbequip_data.DataList[i].mainEntryGrow;
        var allocateminorSkillGroups =
        builder.Allocate(ref configTbequip_datas[i].minorSkillGroup,
        tables.Tbequip_data.DataList[i].minorSkillGroup.Count);
        for (var minorSkillGroups = 0; minorSkillGroups < tables.Tbequip_data.DataList[i].minorSkillGroup.Count; minorSkillGroups++)
        {
            allocateminorSkillGroups[minorSkillGroups] = (int2) math.round(tables.Tbequip_data.DataList[i].minorSkillGroup[minorSkillGroups]);
        }
        var allocateunlockSkillGroups =
        builder.Allocate(ref configTbequip_datas[i].unlockSkillGroup,
        tables.Tbequip_data.DataList[i].unlockSkillGroup.Count);
        for (var unlockSkillGroups = 0; unlockSkillGroups < tables.Tbequip_data.DataList[i].unlockSkillGroup.Count; unlockSkillGroups++)
        {
            allocateunlockSkillGroups[unlockSkillGroups] = tables.Tbequip_data.DataList[i].unlockSkillGroup[unlockSkillGroups];
        }
        configTbequip_datas[i].sYn = tables.Tbequip_data.DataList[i].sYn;
        configTbequip_datas[i].name = tables.Tbequip_data.DataList[i].name;
        configTbequip_datas[i].icon = tables.Tbequip_data.DataList[i].icon;
        configTbequip_datas[i].desc = tables.Tbequip_data.DataList[i].desc;
        configTbequip_datas[i].spine = tables.Tbequip_data.DataList[i].spine;
    }


    /// <summary>
    /// 装备Id
    /// </summary>
    public int id;
    /// <summary>
    /// 部位Id
    /// </summary>
    public int posId;
    /// <summary>
    /// 品质id
    /// </summary>
    public int quality;
    /// <summary>
    /// 主词条id
    /// </summary>
    public int mainEntryId;
    /// <summary>
    /// 主词条初始
    /// </summary>
    public int mainEntryInit;
    /// <summary>
    /// 每级成长
    /// </summary>
    public int mainEntryGrow;
    /// <summary>
    /// 副词条技能组(前端根据品质判定&quot;锁&quot;)
    /// </summary>
    public BlobArray<int2> minorSkillGroup;  
    /// <summary>
    /// 解锁技能组(仅后端传技能)
    /// </summary>
    public BlobArray<int> unlockSkillGroup;    
    /// <summary>
    /// 是否为S
    /// </summary>
    public int sYn;
    /// <summary>
    /// 装备名称
    /// </summary>
    public FixedString128Bytes name;
    /// <summary>
    /// 装备贴图(图片资源)
    /// </summary>
    public FixedString128Bytes icon;
    /// <summary>
    /// 装备描述
    /// </summary>
    public FixedString128Bytes desc;
    /// <summary>
    /// 装备动画
    /// </summary>
    public FixedString128Bytes spine;
}
}