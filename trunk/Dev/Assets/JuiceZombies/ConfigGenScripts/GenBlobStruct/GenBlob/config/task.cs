//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbtask
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbtask> configTbtasks,Tables tables)
    { 
        configTbtasks[i].id = tables.Tbtask.DataList[i].id;
        configTbtasks[i].group = tables.Tbtask.DataList[i].group;
        configTbtasks[i].sort = tables.Tbtask.DataList[i].sort;
        var allocateconditions =
        builder.Allocate(ref configTbtasks[i].condition,
        tables.Tbtask.DataList[i].condition.Count);
        for (var conditions = 0; conditions < tables.Tbtask.DataList[i].condition.Count; conditions++)
        {
            allocateconditions[conditions] = (int3) math.round(tables.Tbtask.DataList[i].condition[conditions]);
        }
        configTbtasks[i].pre = tables.Tbtask.DataList[i].pre;
        var allocaterewards =
        builder.Allocate(ref configTbtasks[i].reward,
        tables.Tbtask.DataList[i].reward.Count);
        for (var rewards = 0; rewards < tables.Tbtask.DataList[i].reward.Count; rewards++)
        {
            allocaterewards[rewards] = (int3) math.round(tables.Tbtask.DataList[i].reward[rewards]);
        }
        configTbtasks[i].type = tables.Tbtask.DataList[i].type;
        var allocateparas =
        builder.Allocate(ref configTbtasks[i].para,
        tables.Tbtask.DataList[i].para.Count);
        for (var paras = 0; paras < tables.Tbtask.DataList[i].para.Count; paras++)
        {
            allocateparas[paras] = tables.Tbtask.DataList[i].para[paras];
        }
        configTbtasks[i].score = tables.Tbtask.DataList[i].score;
    }


    /// <summary>
    /// 任务id
    /// </summary>
    public int id;
    /// <summary>
    /// 所属组
    /// </summary>
    public int group;
    /// <summary>
    /// 组内排序
    /// </summary>
    public int sort;
    /// <summary>
    /// 任务接取条件
    /// </summary>
    public BlobArray<int3> condition;  
    /// <summary>
    /// 前置任务id
    /// </summary>
    public int pre;
    /// <summary>
    /// 任务奖励
    /// </summary>
    public BlobArray<int3> reward;  
    /// <summary>
    /// 任务类型
    /// </summary>
    public int type;
    /// <summary>
    /// 任务参数
    /// </summary>
    public BlobArray<int> para;    
    /// <summary>
    /// 点数
    /// </summary>
    public int score;
}
}