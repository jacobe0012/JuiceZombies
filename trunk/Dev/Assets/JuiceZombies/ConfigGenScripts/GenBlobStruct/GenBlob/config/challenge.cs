//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbchallenge
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbchallenge> configTbchallenges,Tables tables)
    { 
        configTbchallenges[i].id = tables.Tbchallenge.DataList[i].id;
        configTbchallenges[i].type = tables.Tbchallenge.DataList[i].type;
        configTbchallenges[i].blockId = tables.Tbchallenge.DataList[i].blockId;
        configTbchallenges[i].num = tables.Tbchallenge.DataList[i].num;
        configTbchallenges[i].levelId = tables.Tbchallenge.DataList[i].levelId;
        configTbchallenges[i].name = tables.Tbchallenge.DataList[i].name;
        configTbchallenges[i].pic = tables.Tbchallenge.DataList[i].pic;
        configTbchallenges[i].bg = tables.Tbchallenge.DataList[i].bg;
        var allocateanecdoteGroups =
        builder.Allocate(ref configTbchallenges[i].anecdoteGroup,
        tables.Tbchallenge.DataList[i].anecdoteGroup.Count);
        for (var anecdoteGroups = 0; anecdoteGroups < tables.Tbchallenge.DataList[i].anecdoteGroup.Count; anecdoteGroups++)
        {
            allocateanecdoteGroups[anecdoteGroups] = tables.Tbchallenge.DataList[i].anecdoteGroup[anecdoteGroups];
        }
        var allocaterewards =
        builder.Allocate(ref configTbchallenges[i].reward,
        tables.Tbchallenge.DataList[i].reward.Count);
        for (var rewards = 0; rewards < tables.Tbchallenge.DataList[i].reward.Count; rewards++)
        {
            allocaterewards[rewards] = (int3) math.round(tables.Tbchallenge.DataList[i].reward[rewards]);
        }
    }


    /// <summary>
    /// 挑战id
    /// </summary>
    public int id;
    /// <summary>
    /// 挑战类型
    /// </summary>
    public int type;
    /// <summary>
    /// 街区id
    /// </summary>
    public int blockId;
    /// <summary>
    /// 地图编号
    /// </summary>
    public int num;
    /// <summary>
    /// 关卡id
    /// </summary>
    public int levelId;
    /// <summary>
    /// 关卡名称
    /// </summary>
    public FixedString128Bytes name;
    /// <summary>
    /// 关卡贴图(图片资源)
    /// </summary>
    public FixedString128Bytes pic;
    /// <summary>
    /// 底板(图片资源)
    /// </summary>
    public FixedString128Bytes bg;
    /// <summary>
    /// 轶事组
    /// </summary>
    public BlobArray<int> anecdoteGroup;    
    /// <summary>
    /// 奖励
    /// </summary>
    public BlobArray<int3> reward;  
}
}