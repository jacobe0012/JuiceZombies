//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbdraw_box
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbdraw_box> configTbdraw_boxs,Tables tables)
    { 
        configTbdraw_boxs[i].id = tables.Tbdraw_box.DataList[i].id;
        configTbdraw_boxs[i].tagFunc = tables.Tbdraw_box.DataList[i].tagFunc;
        configTbdraw_boxs[i].sort = tables.Tbdraw_box.DataList[i].sort;
        configTbdraw_boxs[i].limitType = tables.Tbdraw_box.DataList[i].limitType;
        configTbdraw_boxs[i].dateLimit = tables.Tbdraw_box.DataList[i].dateLimit;
        configTbdraw_boxs[i].timesLimit = tables.Tbdraw_box.DataList[i].timesLimit;
        configTbdraw_boxs[i].dropBannerId = tables.Tbdraw_box.DataList[i].dropBannerId;
        configTbdraw_boxs[i].name = tables.Tbdraw_box.DataList[i].name;
        configTbdraw_boxs[i].pic = tables.Tbdraw_box.DataList[i].pic;
        configTbdraw_boxs[i].money = tables.Tbdraw_box.DataList[i].money;
        var allocatedescParas =
        builder.Allocate(ref configTbdraw_boxs[i].descPara,
        tables.Tbdraw_box.DataList[i].descPara.Count);
        for (var descParas = 0; descParas < tables.Tbdraw_box.DataList[i].descPara.Count; descParas++)
        {
            allocatedescParas[descParas] = tables.Tbdraw_box.DataList[i].descPara[descParas];
        }
        var allocateguaranteeParas =
        builder.Allocate(ref configTbdraw_boxs[i].guaranteePara,
        tables.Tbdraw_box.DataList[i].guaranteePara.Count);
        for (var guaranteeParas = 0; guaranteeParas < tables.Tbdraw_box.DataList[i].guaranteePara.Count; guaranteeParas++)
        {
            allocateguaranteeParas[guaranteeParas] = (int2) math.round(tables.Tbdraw_box.DataList[i].guaranteePara[guaranteeParas]);
        }
        configTbdraw_boxs[i].drawType = tables.Tbdraw_box.DataList[i].drawType;
        configTbdraw_boxs[i].adCd = tables.Tbdraw_box.DataList[i].adCd;
        configTbdraw_boxs[i].item = tables.Tbdraw_box.DataList[i].item;
        configTbdraw_boxs[i].one = tables.Tbdraw_box.DataList[i].one;
        configTbdraw_boxs[i].ten = tables.Tbdraw_box.DataList[i].ten;
    }


    /// <summary>
    /// 盲盒id
    /// </summary>
    public int id;
    /// <summary>
    /// 所属模块id
    /// </summary>
    public int tagFunc;
    /// <summary>
    /// 排序
    /// </summary>
    public int sort;
    /// <summary>
    /// 限制类型
    /// </summary>
    public int limitType;
    /// <summary>
    /// 限时时间(有效期)
    /// </summary>
    public int dateLimit;
    /// <summary>
    /// 限次次数
    /// </summary>
    public int timesLimit;
    /// <summary>
    /// 卡池预览
    /// </summary>
    public int dropBannerId;
    /// <summary>
    /// 盲盒名称
    /// </summary>
    public FixedString128Bytes name;
    /// <summary>
    /// 盲盒图片(图片资源)
    /// </summary>
    public FixedString128Bytes pic;
    /// <summary>
    /// 获得金币
    /// </summary>
    public int money;
    /// <summary>
    /// 品质参数
    /// </summary>
    public BlobArray<int> descPara;    
    /// <summary>
    /// 保底参数
    /// </summary>
    public BlobArray<int2> guaranteePara;  
    /// <summary>
    /// 逻辑类型
    /// </summary>
    public int drawType;
    /// <summary>
    /// 广告cd
    /// </summary>
    public int adCd;
    /// <summary>
    /// 抽奖物品id
    /// </summary>
    public int item;
    /// <summary>
    /// 单抽消耗钻石
    /// </summary>
    public int one;
    /// <summary>
    /// 十抽消耗钻石
    /// </summary>
    public int ten;
}
}