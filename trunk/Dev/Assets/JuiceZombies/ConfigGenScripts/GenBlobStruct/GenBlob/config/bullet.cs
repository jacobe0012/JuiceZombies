//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbbullet
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbbullet> configTbbullets,Tables tables)
    { 
        configTbbullets[i].id = tables.Tbbullet.DataList[i].id;
        configTbbullets[i].startType = tables.Tbbullet.DataList[i].startType;
        var allocatestartParas =
        builder.Allocate(ref configTbbullets[i].startPara,
        tables.Tbbullet.DataList[i].startPara.Count);
        for (var startParas = 0; startParas < tables.Tbbullet.DataList[i].startPara.Count; startParas++)
        {
            allocatestartParas[startParas] = tables.Tbbullet.DataList[i].startPara[startParas];
        }
        configTbbullets[i].searchType = tables.Tbbullet.DataList[i].searchType;
        var allocatesearchParas =
        builder.Allocate(ref configTbbullets[i].searchPara,
        tables.Tbbullet.DataList[i].searchPara.Count);
        for (var searchParas = 0; searchParas < tables.Tbbullet.DataList[i].searchPara.Count; searchParas++)
        {
            allocatesearchParas[searchParas] = tables.Tbbullet.DataList[i].searchPara[searchParas];
        }
        configTbbullets[i].skillEffect = tables.Tbbullet.DataList[i].skillEffect;
        configTbbullets[i].absorbYn = tables.Tbbullet.DataList[i].absorbYn;
        var allocatetargets =
        builder.Allocate(ref configTbbullets[i].target,
        tables.Tbbullet.DataList[i].target.Count);
        for (var targets = 0; targets < tables.Tbbullet.DataList[i].target.Count; targets++)
        {
            allocatetargets[targets] = tables.Tbbullet.DataList[i].target[targets];
        }
        var allocatetargetLockOns =
        builder.Allocate(ref configTbbullets[i].targetLockOn,
        tables.Tbbullet.DataList[i].targetLockOn.Count);
        for (var targetLockOns = 0; targetLockOns < tables.Tbbullet.DataList[i].targetLockOn.Count; targetLockOns++)
        {
            allocatetargetLockOns[targetLockOns] = tables.Tbbullet.DataList[i].targetLockOn[targetLockOns];
        }
        configTbbullets[i].deadEffect = tables.Tbbullet.DataList[i].deadEffect;
        configTbbullets[i].num = tables.Tbbullet.DataList[i].num;
        configTbbullets[i].groupNum = tables.Tbbullet.DataList[i].groupNum;
        configTbbullets[i].groupSearchYn = tables.Tbbullet.DataList[i].groupSearchYn;
        configTbbullets[i].degree = tables.Tbbullet.DataList[i].degree;
        configTbbullets[i].interval = tables.Tbbullet.DataList[i].interval;
        configTbbullets[i].hp = tables.Tbbullet.DataList[i].hp;
        configTbbullets[i].atkType = tables.Tbbullet.DataList[i].atkType;
        configTbbullets[i].speed = tables.Tbbullet.DataList[i].speed;
        configTbbullets[i].time = tables.Tbbullet.DataList[i].time;
        configTbbullets[i].speedAdd = tables.Tbbullet.DataList[i].speedAdd;
        configTbbullets[i].sort = tables.Tbbullet.DataList[i].sort;
        configTbbullets[i].trackType = tables.Tbbullet.DataList[i].trackType;
        configTbbullets[i].trackTypePara1 = tables.Tbbullet.DataList[i].trackTypePara1;
        configTbbullets[i].trackTypePara2 = tables.Tbbullet.DataList[i].trackTypePara2;
        configTbbullets[i].trackTypePara3 = tables.Tbbullet.DataList[i].trackTypePara3;
        configTbbullets[i].model = tables.Tbbullet.DataList[i].model;
        configTbbullets[i].size = tables.Tbbullet.DataList[i].size;
        configTbbullets[i].rotationSpeed = tables.Tbbullet.DataList[i].rotationSpeed;
        configTbbullets[i].rotationStart = tables.Tbbullet.DataList[i].rotationStart;
        configTbbullets[i].birthTime = tables.Tbbullet.DataList[i].birthTime;
        configTbbullets[i].deadTime = tables.Tbbullet.DataList[i].deadTime;
        configTbbullets[i].videoTime = tables.Tbbullet.DataList[i].videoTime;
        configTbbullets[i].rotationType = tables.Tbbullet.DataList[i].rotationType;
    }


    /// <summary>
    /// 弹幕id
    /// </summary>
    public int id;
    /// <summary>
    /// 发射起点类型
    /// </summary>
    public int startType;
    /// <summary>
    /// 发射起点类型参数
    /// </summary>
    public BlobArray<int> startPara;    
    /// <summary>
    /// 索敌类型
    /// </summary>
    public int searchType;
    /// <summary>
    /// 索敌类型参数
    /// </summary>
    public BlobArray<int> searchPara;    
    /// <summary>
    /// 触发效果
    /// </summary>
    public int skillEffect;
    /// <summary>
    /// 是否被障碍物吸收
    /// </summary>
    public int absorbYn;
    /// <summary>
    /// 生效目标
    /// </summary>
    public BlobArray<int> target;    
    /// <summary>
    /// 索敌目标
    /// </summary>
    public BlobArray<int> targetLockOn;    
    /// <summary>
    /// 死亡效果
    /// </summary>
    public int deadEffect;
    /// <summary>
    /// 发射数量
    /// </summary>
    public int num;
    /// <summary>
    /// 每组发射数量
    /// </summary>
    public int groupNum;
    /// <summary>
    /// 每组是否重新索敌
    /// </summary>
    public int groupSearchYn;
    /// <summary>
    /// 发射角度偏移
    /// </summary>
    public int degree;
    /// <summary>
    /// 每组弹幕发射间隔
    /// </summary>
    public int interval;
    /// <summary>
    /// 弹幕生命
    /// </summary>
    public int hp;
    /// <summary>
    /// 触发类型
    /// </summary>
    public int atkType;
    /// <summary>
    /// 飞行速度
    /// </summary>
    public int speed;
    /// <summary>
    /// 飞行时间
    /// </summary>
    public int time;
    /// <summary>
    /// 定时加速
    /// </summary>
    public int speedAdd;
    /// <summary>
    /// 层级
    /// </summary>
    public int sort;
    /// <summary>
    /// 轨迹类型
    /// </summary>
    public int trackType;
    /// <summary>
    /// 轨迹类型参数1
    /// </summary>
    public int trackTypePara1;
    /// <summary>
    /// 轨迹类型参数2
    /// </summary>
    public int trackTypePara2;
    /// <summary>
    /// 轨迹类型参数3
    /// </summary>
    public int trackTypePara3;
    /// <summary>
    /// 弹幕模型
    /// </summary>
    public FixedString128Bytes model;
    /// <summary>
    /// 弹幕大小
    /// </summary>
    public int size;
    /// <summary>
    /// 旋转速率
    /// </summary>
    public int rotationSpeed;
    /// <summary>
    /// 初始角度
    /// </summary>
    public int rotationStart;
    /// <summary>
    /// 出生时间
    /// </summary>
    public int birthTime;
    /// <summary>
    /// 死亡延迟
    /// </summary>
    public int deadTime;
    /// <summary>
    /// 周期时间
    /// </summary>
    public int videoTime;
    /// <summary>
    /// 弹幕旋转类型
    /// </summary>
    public int rotationType;
}
}