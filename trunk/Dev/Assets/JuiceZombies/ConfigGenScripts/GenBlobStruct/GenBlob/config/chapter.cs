//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbchapter
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbchapter> configTbchapters,Tables tables)
    { 
        configTbchapters[i].id = tables.Tbchapter.DataList[i].id;
        configTbchapters[i].levelId = tables.Tbchapter.DataList[i].levelId;
        configTbchapters[i].blockId = tables.Tbchapter.DataList[i].blockId;
        configTbchapters[i].num = tables.Tbchapter.DataList[i].num;
        configTbchapters[i].name = tables.Tbchapter.DataList[i].name;
        configTbchapters[i].desc = tables.Tbchapter.DataList[i].desc;
        var allocatecosts =
        builder.Allocate(ref configTbchapters[i].cost,
        tables.Tbchapter.DataList[i].cost.Count);
        for (var costs = 0; costs < tables.Tbchapter.DataList[i].cost.Count; costs++)
        {
            allocatecosts[costs] = (int3) math.round(tables.Tbchapter.DataList[i].cost[costs]);
        }
        configTbchapters[i].monsterHp = tables.Tbchapter.DataList[i].monsterHp;
        configTbchapters[i].monsterAtk = tables.Tbchapter.DataList[i].monsterAtk;
        configTbchapters[i].hard = tables.Tbchapter.DataList[i].hard;
        configTbchapters[i].money = tables.Tbchapter.DataList[i].money;
        configTbchapters[i].exp = tables.Tbchapter.DataList[i].exp;
        configTbchapters[i].patrolUnit = tables.Tbchapter.DataList[i].patrolUnit;
        var allocatepatrolOnces =
        builder.Allocate(ref configTbchapters[i].patrolOnce,
        tables.Tbchapter.DataList[i].patrolOnce.Count);
        for (var patrolOnces = 0; patrolOnces < tables.Tbchapter.DataList[i].patrolOnce.Count; patrolOnces++)
        {
            allocatepatrolOnces[patrolOnces] = (int3) math.round(tables.Tbchapter.DataList[i].patrolOnce[patrolOnces]);
        }
        var allocatesweepOnces =
        builder.Allocate(ref configTbchapters[i].sweepOnce,
        tables.Tbchapter.DataList[i].sweepOnce.Count);
        for (var sweepOnces = 0; sweepOnces < tables.Tbchapter.DataList[i].sweepOnce.Count; sweepOnces++)
        {
            allocatesweepOnces[sweepOnces] = (int3) math.round(tables.Tbchapter.DataList[i].sweepOnce[sweepOnces]);
        }
        var allocatesweepMonsterOnces =
        builder.Allocate(ref configTbchapters[i].sweepMonsterOnce,
        tables.Tbchapter.DataList[i].sweepMonsterOnce.Count);
        for (var sweepMonsterOnces = 0; sweepMonsterOnces < tables.Tbchapter.DataList[i].sweepMonsterOnce.Count; sweepMonsterOnces++)
        {
            allocatesweepMonsterOnces[sweepMonsterOnces] = (int3) math.round(tables.Tbchapter.DataList[i].sweepMonsterOnce[sweepMonsterOnces]);
        }
    }


    /// <summary>
    /// 关卡id
    /// </summary>
    public int id;
    /// <summary>
    /// 关卡id
    /// </summary>
    public int levelId;
    /// <summary>
    /// 街区id
    /// </summary>
    public int blockId;
    /// <summary>
    /// 数字编号
    /// </summary>
    public int num;
    /// <summary>
    /// 关卡名称
    /// </summary>
    public FixedString128Bytes name;
    /// <summary>
    /// 关卡描述
    /// </summary>
    public FixedString128Bytes desc;
    /// <summary>
    /// 消耗
    /// </summary>
    public BlobArray<int3> cost;  
    /// <summary>
    /// 怪物生命值万分比
    /// </summary>
    public int monsterHp;
    /// <summary>
    /// 怪物攻击力万分比
    /// </summary>
    public int monsterAtk;
    /// <summary>
    /// 关卡难度值
    /// </summary>
    public int hard;
    /// <summary>
    /// 10分钟钞票
    /// </summary>
    public int money;
    /// <summary>
    /// 10分钟玩家经验
    /// </summary>
    public int exp;
    /// <summary>
    /// 10分钟收益
    /// </summary>
    public int patrolUnit;
    /// <summary>
    /// 快速分红收益
    /// </summary>
    public BlobArray<int3> patrolOnce;  
    /// <summary>
    /// 整顿奖励
    /// </summary>
    public BlobArray<int3> sweepOnce;  
    /// <summary>
    /// 整顿怪物计数
    /// </summary>
    public BlobArray<int3> sweepMonsterOnce;  
}
}