//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbskill
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbskill> configTbskills,Tables tables)
    { 
        configTbskills[i].id = tables.Tbskill.DataList[i].id;
        configTbskills[i].type = tables.Tbskill.DataList[i].type;
        configTbskills[i].name = tables.Tbskill.DataList[i].name;
        configTbskills[i].desc = tables.Tbskill.DataList[i].desc;
        configTbskills[i].icon = tables.Tbskill.DataList[i].icon;
        configTbskills[i].skillQualityId = tables.Tbskill.DataList[i].skillQualityId;
        var allocateskillBindingIds =
        builder.Allocate(ref configTbskills[i].skillBindingId,
        tables.Tbskill.DataList[i].skillBindingId.Count);
        for (var skillBindingIds = 0; skillBindingIds < tables.Tbskill.DataList[i].skillBindingId.Count; skillBindingIds++)
        {
            allocateskillBindingIds[skillBindingIds] = tables.Tbskill.DataList[i].skillBindingId[skillBindingIds];
        }
        var allocatedescParas =
        builder.Allocate(ref configTbskills[i].descPara,
        tables.Tbskill.DataList[i].descPara.Count);
        for (var descParas = 0; descParas < tables.Tbskill.DataList[i].descPara.Count; descParas++)
        {
            allocatedescParas[descParas] = tables.Tbskill.DataList[i].descPara[descParas];
        }
        configTbskills[i].level = tables.Tbskill.DataList[i].level;
        configTbskills[i].cd = tables.Tbskill.DataList[i].cd;
        configTbskills[i].reductionCd = tables.Tbskill.DataList[i].reductionCd;
        var allocateskillEffectArrays =
        builder.Allocate(ref configTbskills[i].skillEffectArray,
        tables.Tbskill.DataList[i].skillEffectArray.Count);
        for (var skillEffectArrays = 0; skillEffectArrays < tables.Tbskill.DataList[i].skillEffectArray.Count; skillEffectArrays++)
        {
            allocateskillEffectArrays[skillEffectArrays] = tables.Tbskill.DataList[i].skillEffectArray[skillEffectArrays];
        }
        var allocateskillEventArrays =
        builder.Allocate(ref configTbskills[i].skillEventArray,
        tables.Tbskill.DataList[i].skillEventArray.Count);
        for (var skillEventArrays = 0; skillEventArrays < tables.Tbskill.DataList[i].skillEventArray.Count; skillEventArrays++)
        {
            allocateskillEventArrays[skillEventArrays] = tables.Tbskill.DataList[i].skillEventArray[skillEventArrays];
        }
        var allocatechargedSkills =
        builder.Allocate(ref configTbskills[i].chargedSkill,
        tables.Tbskill.DataList[i].chargedSkill.Count);
        for (var chargedSkills = 0; chargedSkills < tables.Tbskill.DataList[i].chargedSkill.Count; chargedSkills++)
        {
            allocatechargedSkills[chargedSkills] = (int3) math.round(tables.Tbskill.DataList[i].chargedSkill[chargedSkills]);
        }
        configTbskills[i].bindingRank = tables.Tbskill.DataList[i].bindingRank;
        configTbskills[i].replaceSkillId = tables.Tbskill.DataList[i].replaceSkillId;
        var allocatereplaceSpecialEffectss =
        builder.Allocate(ref configTbskills[i].replaceSpecialEffects,
        tables.Tbskill.DataList[i].replaceSpecialEffects.Count);
        for (var replaceSpecialEffectss = 0; replaceSpecialEffectss < tables.Tbskill.DataList[i].replaceSpecialEffects.Count; replaceSpecialEffectss++)
        {
            allocatereplaceSpecialEffectss[replaceSpecialEffectss] = tables.Tbskill.DataList[i].replaceSpecialEffects[replaceSpecialEffectss];
        }
        configTbskills[i].battleShopSkill = tables.Tbskill.DataList[i].battleShopSkill;
        var allocatemonsterSkillConditions =
        builder.Allocate(ref configTbskills[i].monsterSkillCondition,
        tables.Tbskill.DataList[i].monsterSkillCondition.Count);
        for (var monsterSkillConditions = 0; monsterSkillConditions < tables.Tbskill.DataList[i].monsterSkillCondition.Count; monsterSkillConditions++)
        {
            allocatemonsterSkillConditions[monsterSkillConditions] = (int2) math.round(tables.Tbskill.DataList[i].monsterSkillCondition[monsterSkillConditions]);
        }
    }


    /// <summary>
    /// 技能id
    /// </summary>
    public int id;
    /// <summary>
    /// 类型
    /// </summary>
    public int type;
    /// <summary>
    /// 名称
    /// </summary>
    public FixedString128Bytes name;
    /// <summary>
    /// 描述
    /// </summary>
    public FixedString128Bytes desc;
    /// <summary>
    /// 图标(图片资源)
    /// </summary>
    public FixedString128Bytes icon;
    /// <summary>
    /// 技能品质
    /// </summary>
    public int skillQualityId;
    /// <summary>
    /// 所属羁绊
    /// </summary>
    public BlobArray<int> skillBindingId;    
    /// <summary>
    /// 描述参数
    /// </summary>
    public BlobArray<FixedString128Bytes> descPara;  
    /// <summary>
    /// 等级
    /// </summary>
    public int level;
    /// <summary>
    /// 技能冷却时间
    /// </summary>
    public int cd;
    /// <summary>
    /// 冷却时间减免系数
    /// </summary>
    public int reductionCd;
    /// <summary>
    /// 技能效果组
    /// </summary>
    public BlobArray<int> skillEffectArray;    
    /// <summary>
    /// 全局事件
    /// </summary>
    public BlobArray<int> skillEventArray;    
    /// <summary>
    /// 充能技能
    /// </summary>
    public BlobArray<int3> chargedSkill;  
    /// <summary>
    /// 羁绊阶级
    /// </summary>
    public int bindingRank;
    /// <summary>
    /// 替换技能
    /// </summary>
    public int replaceSkillId;
    /// <summary>
    /// 替换特效
    /// </summary>
    public BlobArray<int> replaceSpecialEffects;    
    /// <summary>
    /// 战斗商店技能
    /// </summary>
    public int battleShopSkill;
    /// <summary>
    /// boss技能释放条件
    /// </summary>
    public BlobArray<int2> monsterSkillCondition;  
}
}