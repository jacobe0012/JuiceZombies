//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbmonster_model
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbmonster_model> configTbmonster_models,Tables tables)
    { 
        configTbmonster_models[i].id = tables.Tbmonster_model.DataList[i].id;
        configTbmonster_models[i].bookType = tables.Tbmonster_model.DataList[i].bookType;
        configTbmonster_models[i].powerId = tables.Tbmonster_model.DataList[i].powerId;
        configTbmonster_models[i].racistId = tables.Tbmonster_model.DataList[i].racistId;
        configTbmonster_models[i].diamond = tables.Tbmonster_model.DataList[i].diamond;
        configTbmonster_models[i].thumbPic = tables.Tbmonster_model.DataList[i].thumbPic;
        configTbmonster_models[i].bookPic = tables.Tbmonster_model.DataList[i].bookPic;
        var allocatepicCutParas =
        builder.Allocate(ref configTbmonster_models[i].picCutPara,
        tables.Tbmonster_model.DataList[i].picCutPara.Count);
        for (var picCutParas = 0; picCutParas < tables.Tbmonster_model.DataList[i].picCutPara.Count; picCutParas++)
        {
            allocatepicCutParas[picCutParas] = (int2) math.round(tables.Tbmonster_model.DataList[i].picCutPara[picCutParas]);
        }
        var allocatepicPosParas =
        builder.Allocate(ref configTbmonster_models[i].picPosPara,
        tables.Tbmonster_model.DataList[i].picPosPara.Count);
        for (var picPosParas = 0; picPosParas < tables.Tbmonster_model.DataList[i].picPosPara.Count; picPosParas++)
        {
            allocatepicPosParas[picPosParas] = (int3) math.round(tables.Tbmonster_model.DataList[i].picPosPara[picPosParas]);
        }
        var allocatefeatureIds =
        builder.Allocate(ref configTbmonster_models[i].featureId,
        tables.Tbmonster_model.DataList[i].featureId.Count);
        for (var featureIds = 0; featureIds < tables.Tbmonster_model.DataList[i].featureId.Count; featureIds++)
        {
            allocatefeatureIds[featureIds] = tables.Tbmonster_model.DataList[i].featureId[featureIds];
        }
        configTbmonster_models[i].name = tables.Tbmonster_model.DataList[i].name;
        configTbmonster_models[i].desc = tables.Tbmonster_model.DataList[i].desc;
        configTbmonster_models[i].model = tables.Tbmonster_model.DataList[i].model;
        configTbmonster_models[i].spine = tables.Tbmonster_model.DataList[i].spine;
        var allocatespinePosParas =
        builder.Allocate(ref configTbmonster_models[i].spinePosPara,
        tables.Tbmonster_model.DataList[i].spinePosPara.Count);
        for (var spinePosParas = 0; spinePosParas < tables.Tbmonster_model.DataList[i].spinePosPara.Count; spinePosParas++)
        {
            allocatespinePosParas[spinePosParas] = (int3) math.round(tables.Tbmonster_model.DataList[i].spinePosPara[spinePosParas]);
        }
        var allocatechallengeTexts =
        builder.Allocate(ref configTbmonster_models[i].challengeText,
        tables.Tbmonster_model.DataList[i].challengeText.Count);
        for (var challengeTexts = 0; challengeTexts < tables.Tbmonster_model.DataList[i].challengeText.Count; challengeTexts++)
        {
            allocatechallengeTexts[challengeTexts] = tables.Tbmonster_model.DataList[i].challengeText[challengeTexts];
        }
    }


    /// <summary>
    /// 模型id
    /// </summary>
    public int id;
    /// <summary>
    /// 图鉴类型
    /// </summary>
    public int bookType;
    /// <summary>
    /// 图鉴-势力id
    /// </summary>
    public int powerId;
    /// <summary>
    /// 图鉴-种族id
    /// </summary>
    public int racistId;
    /// <summary>
    /// 图鉴-解锁领取比特币
    /// </summary>
    public int diamond;
    /// <summary>
    /// 缩略图(图片资源)
    /// </summary>
    public FixedString128Bytes thumbPic;
    /// <summary>
    /// 图鉴的图(图片资源)
    /// </summary>
    public FixedString128Bytes bookPic;
    /// <summary>
    /// 图鉴-裁剪参数
    /// </summary>
    public BlobArray<int2> picCutPara;  
    /// <summary>
    /// 图鉴-图片位置参数
    /// </summary>
    public BlobArray<int3> picPosPara;  
    /// <summary>
    /// 特性id
    /// </summary>
    public BlobArray<int> featureId;    
    /// <summary>
    /// 名称
    /// </summary>
    public FixedString128Bytes name;
    /// <summary>
    /// 描述
    /// </summary>
    public FixedString128Bytes desc;
    /// <summary>
    /// 怪物模型
    /// </summary>
    public FixedString128Bytes model;
    /// <summary>
    /// 动画
    /// </summary>
    public FixedString128Bytes spine;
    /// <summary>
    /// 动画位置参数
    /// </summary>
    public BlobArray<int3> spinePosPara;  
    /// <summary>
    /// 挑战文本
    /// </summary>
    public BlobArray<FixedString128Bytes> challengeText;  
}
}