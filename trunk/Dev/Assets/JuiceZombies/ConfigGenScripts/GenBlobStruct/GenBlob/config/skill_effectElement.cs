//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbskill_effectElement
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbskill_effectElement> configTbskill_effectElements,Tables tables)
    { 
        configTbskill_effectElements[i].id = tables.Tbskill_effectElement.DataList[i].id;
        configTbskill_effectElements[i].elementType = tables.Tbskill_effectElement.DataList[i].elementType;
        configTbskill_effectElements[i].outputType = tables.Tbskill_effectElement.DataList[i].outputType;
        var allocateoutputTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].outputTypePara,
        tables.Tbskill_effectElement.DataList[i].outputTypePara.Count);
        for (var outputTypeParas = 0; outputTypeParas < tables.Tbskill_effectElement.DataList[i].outputTypePara.Count; outputTypeParas++)
        {
            allocateoutputTypeParas[outputTypeParas] = tables.Tbskill_effectElement.DataList[i].outputTypePara[outputTypeParas];
        }
        configTbskill_effectElements[i].bonusType = tables.Tbskill_effectElement.DataList[i].bonusType;
        var allocatebonusTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].bonusTypePara,
        tables.Tbskill_effectElement.DataList[i].bonusTypePara.Count);
        for (var bonusTypeParas = 0; bonusTypeParas < tables.Tbskill_effectElement.DataList[i].bonusTypePara.Count; bonusTypeParas++)
        {
            allocatebonusTypeParas[bonusTypeParas] = tables.Tbskill_effectElement.DataList[i].bonusTypePara[bonusTypeParas];
        }
        configTbskill_effectElements[i].calcType = tables.Tbskill_effectElement.DataList[i].calcType;
        var allocatecalcTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].calcTypePara,
        tables.Tbskill_effectElement.DataList[i].calcTypePara.Count);
        for (var calcTypeParas = 0; calcTypeParas < tables.Tbskill_effectElement.DataList[i].calcTypePara.Count; calcTypeParas++)
        {
            allocatecalcTypeParas[calcTypeParas] = tables.Tbskill_effectElement.DataList[i].calcTypePara[calcTypeParas];
        }
        configTbskill_effectElements[i].stateType = tables.Tbskill_effectElement.DataList[i].stateType;
        var allocatestateTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].stateTypePara,
        tables.Tbskill_effectElement.DataList[i].stateTypePara.Count);
        for (var stateTypeParas = 0; stateTypeParas < tables.Tbskill_effectElement.DataList[i].stateTypePara.Count; stateTypeParas++)
        {
            allocatestateTypeParas[stateTypeParas] = tables.Tbskill_effectElement.DataList[i].stateTypePara[stateTypeParas];
        }
        configTbskill_effectElements[i].attrId = tables.Tbskill_effectElement.DataList[i].attrId;
        var allocateattrIdParas =
        builder.Allocate(ref configTbskill_effectElements[i].attrIdPara,
        tables.Tbskill_effectElement.DataList[i].attrIdPara.Count);
        for (var attrIdParas = 0; attrIdParas < tables.Tbskill_effectElement.DataList[i].attrIdPara.Count; attrIdParas++)
        {
            allocateattrIdParas[attrIdParas] = tables.Tbskill_effectElement.DataList[i].attrIdPara[attrIdParas];
        }
        configTbskill_effectElements[i].controlType = tables.Tbskill_effectElement.DataList[i].controlType;
        var allocatecontrolTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].controlTypePara,
        tables.Tbskill_effectElement.DataList[i].controlTypePara.Count);
        for (var controlTypeParas = 0; controlTypeParas < tables.Tbskill_effectElement.DataList[i].controlTypePara.Count; controlTypeParas++)
        {
            allocatecontrolTypeParas[controlTypeParas] = tables.Tbskill_effectElement.DataList[i].controlTypePara[controlTypeParas];
        }
        configTbskill_effectElements[i].changeType = tables.Tbskill_effectElement.DataList[i].changeType;
        var allocatechangeTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].changeTypePara,
        tables.Tbskill_effectElement.DataList[i].changeTypePara.Count);
        for (var changeTypeParas = 0; changeTypeParas < tables.Tbskill_effectElement.DataList[i].changeTypePara.Count; changeTypeParas++)
        {
            allocatechangeTypeParas[changeTypeParas] = tables.Tbskill_effectElement.DataList[i].changeTypePara[changeTypeParas];
        }
        configTbskill_effectElements[i].clearType = tables.Tbskill_effectElement.DataList[i].clearType;
        var allocateclearTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].clearTypePara,
        tables.Tbskill_effectElement.DataList[i].clearTypePara.Count);
        for (var clearTypeParas = 0; clearTypeParas < tables.Tbskill_effectElement.DataList[i].clearTypePara.Count; clearTypeParas++)
        {
            allocateclearTypeParas[clearTypeParas] = tables.Tbskill_effectElement.DataList[i].clearTypePara[clearTypeParas];
        }
        configTbskill_effectElements[i].immuneType = tables.Tbskill_effectElement.DataList[i].immuneType;
        var allocateimmuneTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].immuneTypePara,
        tables.Tbskill_effectElement.DataList[i].immuneTypePara.Count);
        for (var immuneTypeParas = 0; immuneTypeParas < tables.Tbskill_effectElement.DataList[i].immuneTypePara.Count; immuneTypeParas++)
        {
            allocateimmuneTypeParas[immuneTypeParas] = tables.Tbskill_effectElement.DataList[i].immuneTypePara[immuneTypeParas];
        }
        configTbskill_effectElements[i].displaceFrom = tables.Tbskill_effectElement.DataList[i].displaceFrom;
        var allocatedisplaceFromParas =
        builder.Allocate(ref configTbskill_effectElements[i].displaceFromPara,
        tables.Tbskill_effectElement.DataList[i].displaceFromPara.Count);
        for (var displaceFromParas = 0; displaceFromParas < tables.Tbskill_effectElement.DataList[i].displaceFromPara.Count; displaceFromParas++)
        {
            allocatedisplaceFromParas[displaceFromParas] = tables.Tbskill_effectElement.DataList[i].displaceFromPara[displaceFromParas];
        }
        configTbskill_effectElements[i].pointType = tables.Tbskill_effectElement.DataList[i].pointType;
        var allocatepointTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].pointTypePara,
        tables.Tbskill_effectElement.DataList[i].pointTypePara.Count);
        for (var pointTypeParas = 0; pointTypeParas < tables.Tbskill_effectElement.DataList[i].pointTypePara.Count; pointTypeParas++)
        {
            allocatepointTypeParas[pointTypeParas] = tables.Tbskill_effectElement.DataList[i].pointTypePara[pointTypeParas];
        }
        configTbskill_effectElements[i].power = tables.Tbskill_effectElement.DataList[i].power;
        configTbskill_effectElements[i].passType = tables.Tbskill_effectElement.DataList[i].passType;
        configTbskill_effectElements[i].bonusOtherType = tables.Tbskill_effectElement.DataList[i].bonusOtherType;
        var allocatebonusOtherTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].bonusOtherTypePara,
        tables.Tbskill_effectElement.DataList[i].bonusOtherTypePara.Count);
        for (var bonusOtherTypeParas = 0; bonusOtherTypeParas < tables.Tbskill_effectElement.DataList[i].bonusOtherTypePara.Count; bonusOtherTypeParas++)
        {
            allocatebonusOtherTypeParas[bonusOtherTypeParas] = tables.Tbskill_effectElement.DataList[i].bonusOtherTypePara[bonusOtherTypeParas];
        }
        configTbskill_effectElements[i].directionType = tables.Tbskill_effectElement.DataList[i].directionType;
        var allocatedirectionTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].directionTypePara,
        tables.Tbskill_effectElement.DataList[i].directionTypePara.Count);
        for (var directionTypeParas = 0; directionTypeParas < tables.Tbskill_effectElement.DataList[i].directionTypePara.Count; directionTypeParas++)
        {
            allocatedirectionTypeParas[directionTypeParas] = tables.Tbskill_effectElement.DataList[i].directionTypePara[directionTypeParas];
        }
        configTbskill_effectElements[i].hitType = tables.Tbskill_effectElement.DataList[i].hitType;
        var allocatehitTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].hitTypePara,
        tables.Tbskill_effectElement.DataList[i].hitTypePara.Count);
        for (var hitTypeParas = 0; hitTypeParas < tables.Tbskill_effectElement.DataList[i].hitTypePara.Count; hitTypeParas++)
        {
            allocatehitTypeParas[hitTypeParas] = tables.Tbskill_effectElement.DataList[i].hitTypePara[hitTypeParas];
        }
        var allocatepassTypeParas =
        builder.Allocate(ref configTbskill_effectElements[i].passTypePara,
        tables.Tbskill_effectElement.DataList[i].passTypePara.Count);
        for (var passTypeParas = 0; passTypeParas < tables.Tbskill_effectElement.DataList[i].passTypePara.Count; passTypeParas++)
        {
            allocatepassTypeParas[passTypeParas] = tables.Tbskill_effectElement.DataList[i].passTypePara[passTypeParas];
        }
    }


    /// <summary>
    /// 元素id
    /// </summary>
    public int id;
    /// <summary>
    /// 元素类型
    /// </summary>
    public int elementType;
    /// <summary>
    /// 输出类型
    /// </summary>
    public int outputType;
    /// <summary>
    /// 输出类型参数值
    /// </summary>
    public BlobArray<int> outputTypePara;    
    /// <summary>
    /// 受属性影响类型
    /// </summary>
    public int bonusType;
    /// <summary>
    /// 受属性影响类型参数值
    /// </summary>
    public BlobArray<int> bonusTypePara;    
    /// <summary>
    /// 计算类型
    /// </summary>
    public int calcType;
    /// <summary>
    /// 计算类型参数值
    /// </summary>
    public BlobArray<int> calcTypePara;    
    /// <summary>
    /// 正负面类型
    /// </summary>
    public int stateType;
    /// <summary>
    /// 正负面类型参数值
    /// </summary>
    public BlobArray<int> stateTypePara;    
    /// <summary>
    /// 变更属性ID
    /// </summary>
    public int attrId;
    /// <summary>
    /// 变更属性ID参数值
    /// </summary>
    public BlobArray<int> attrIdPara;    
    /// <summary>
    /// 控制类型
    /// </summary>
    public int controlType;
    /// <summary>
    /// 控制类型参数值
    /// </summary>
    public BlobArray<int> controlTypePara;    
    /// <summary>
    /// 替换类型
    /// </summary>
    public int changeType;
    /// <summary>
    /// 替换类型参数值
    /// </summary>
    public BlobArray<int> changeTypePara;    
    /// <summary>
    /// 清除类型
    /// </summary>
    public int clearType;
    /// <summary>
    /// 清除类型参数值
    /// </summary>
    public BlobArray<int> clearTypePara;    
    /// <summary>
    /// 免疫类型
    /// </summary>
    public int immuneType;
    /// <summary>
    /// 免疫类型参数值
    /// </summary>
    public BlobArray<int> immuneTypePara;    
    /// <summary>
    /// 强制位移依据
    /// </summary>
    public int displaceFrom;
    /// <summary>
    /// 强制位移依据参数值
    /// </summary>
    public BlobArray<int> displaceFromPara;    
    /// <summary>
    /// 选点类型
    /// </summary>
    public int pointType;
    /// <summary>
    /// 选点类型参数值
    /// </summary>
    public BlobArray<int> pointTypePara;    
    /// <summary>
    /// 概率权重
    /// </summary>
    public int power;
    /// <summary>
    /// 穿墙类型
    /// </summary>
    public int passType;
    /// <summary>
    /// 受其他影响类型
    /// </summary>
    public int bonusOtherType;
    /// <summary>
    /// 受其他影响类型参数
    /// </summary>
    public BlobArray<int> bonusOtherTypePara;    
    /// <summary>
    /// 方向类型
    /// </summary>
    public int directionType;
    /// <summary>
    /// 方向类型参数
    /// </summary>
    public BlobArray<int> directionTypePara;    
    /// <summary>
    /// 方向类型
    /// </summary>
    public int hitType;
    /// <summary>
    /// 方向类型参数
    /// </summary>
    public BlobArray<int> hitTypePara;    
    /// <summary>
    /// 穿墙类型参数
    /// </summary>
    public BlobArray<int> passTypePara;    
}
}