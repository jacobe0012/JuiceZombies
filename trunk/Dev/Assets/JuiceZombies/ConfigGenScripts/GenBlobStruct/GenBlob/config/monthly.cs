//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbmonthly
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbmonthly> configTbmonthlys,Tables tables)
    { 
        configTbmonthlys[i].id = tables.Tbmonthly.DataList[i].id;
        configTbmonthlys[i].name = tables.Tbmonthly.DataList[i].name;
        var allocatedescs =
        builder.Allocate(ref configTbmonthlys[i].desc,
        tables.Tbmonthly.DataList[i].desc.Count);
        for (var descs = 0; descs < tables.Tbmonthly.DataList[i].desc.Count; descs++)
        {
            allocatedescs[descs] = tables.Tbmonthly.DataList[i].desc[descs];
        }
        var allocatedescParas =
        builder.Allocate(ref configTbmonthlys[i].descPara,
        tables.Tbmonthly.DataList[i].descPara.Count);
        for (var descParas = 0; descParas < tables.Tbmonthly.DataList[i].descPara.Count; descParas++)
        {
            allocatedescParas[descParas] = tables.Tbmonthly.DataList[i].descPara[descParas];
        }
        configTbmonthlys[i].pic1 = tables.Tbmonthly.DataList[i].pic1;
        configTbmonthlys[i].pic2 = tables.Tbmonthly.DataList[i].pic2;
        configTbmonthlys[i].pic3 = tables.Tbmonthly.DataList[i].pic3;
        configTbmonthlys[i].sort = tables.Tbmonthly.DataList[i].sort;
        var allocateuserVariables =
        builder.Allocate(ref configTbmonthlys[i].userVariable,
        tables.Tbmonthly.DataList[i].userVariable.Count);
        for (var userVariables = 0; userVariables < tables.Tbmonthly.DataList[i].userVariable.Count; userVariables++)
        {
            allocateuserVariables[userVariables] = (int2) math.round(tables.Tbmonthly.DataList[i].userVariable[userVariables]);
        }
        configTbmonthlys[i].price = tables.Tbmonthly.DataList[i].price;
        var allocaterewards =
        builder.Allocate(ref configTbmonthlys[i].reward,
        tables.Tbmonthly.DataList[i].reward.Count);
        for (var rewards = 0; rewards < tables.Tbmonthly.DataList[i].reward.Count; rewards++)
        {
            allocaterewards[rewards] = (int3) math.round(tables.Tbmonthly.DataList[i].reward[rewards]);
        }
        var allocaterewardDailys =
        builder.Allocate(ref configTbmonthlys[i].rewardDaily,
        tables.Tbmonthly.DataList[i].rewardDaily.Count);
        for (var rewardDailys = 0; rewardDailys < tables.Tbmonthly.DataList[i].rewardDaily.Count; rewardDailys++)
        {
            allocaterewardDailys[rewardDailys] = (int3) math.round(tables.Tbmonthly.DataList[i].rewardDaily[rewardDailys]);
        }
    }


    /// <summary>
    /// ID
    /// </summary>
    public int id;
    /// <summary>
    /// 名称
    /// </summary>
    public FixedString128Bytes name;
    /// <summary>
    /// 描述文本
    /// </summary>
    public BlobArray<FixedString128Bytes> desc;  
    /// <summary>
    /// 描述参数
    /// </summary>
    public BlobArray<int> descPara;    
    /// <summary>
    /// 图片1(图片资源)
    /// </summary>
    public FixedString128Bytes pic1;
    /// <summary>
    /// 图片2(图片资源)
    /// </summary>
    public FixedString128Bytes pic2;
    /// <summary>
    /// 图片3(图片资源)
    /// </summary>
    public FixedString128Bytes pic3;
    /// <summary>
    /// 显示排序
    /// </summary>
    public int sort;
    /// <summary>
    /// 特殊收益
    /// </summary>
    public BlobArray<int2> userVariable;  
    /// <summary>
    /// 价格
    /// </summary>
    public int price;
    /// <summary>
    /// 奖励
    /// </summary>
    public BlobArray<int3> reward;  
    /// <summary>
    /// 每日奖励
    /// </summary>
    public BlobArray<int3> rewardDaily;  
}
}