//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTblevel
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTblevel> configTblevels,Tables tables)
    { 
        configTblevels[i].id = tables.Tblevel.DataList[i].id;
        configTblevels[i].type = tables.Tblevel.DataList[i].type;
        configTblevels[i].num = tables.Tblevel.DataList[i].num;
        configTblevels[i].sceneId = tables.Tblevel.DataList[i].sceneId;
        var allocaterewardDrops =
        builder.Allocate(ref configTblevels[i].rewardDrop,
        tables.Tblevel.DataList[i].rewardDrop.Count);
        for (var rewardDrops = 0; rewardDrops < tables.Tblevel.DataList[i].rewardDrop.Count; rewardDrops++)
        {
            allocaterewardDrops[rewardDrops] = tables.Tblevel.DataList[i].rewardDrop[rewardDrops];
        }
        var allocaterewardTimes =
        builder.Allocate(ref configTblevels[i].rewardTime,
        tables.Tblevel.DataList[i].rewardTime.Count);
        for (var rewardTimes = 0; rewardTimes < tables.Tblevel.DataList[i].rewardTime.Count; rewardTimes++)
        {
            allocaterewardTimes[rewardTimes] = (int3) math.round(tables.Tblevel.DataList[i].rewardTime[rewardTimes]);
        }
        configTblevels[i].atk = tables.Tblevel.DataList[i].atk;
        configTblevels[i].hp = tables.Tblevel.DataList[i].hp;
        var allocateskillGroupLimits =
        builder.Allocate(ref configTblevels[i].skillGroupLimit,
        tables.Tblevel.DataList[i].skillGroupLimit.Count);
        for (var skillGroupLimits = 0; skillGroupLimits < tables.Tblevel.DataList[i].skillGroupLimit.Count; skillGroupLimits++)
        {
            allocateskillGroupLimits[skillGroupLimits] = tables.Tblevel.DataList[i].skillGroupLimit[skillGroupLimits];
        }
        var allocatereviveNums =
        builder.Allocate(ref configTblevels[i].reviveNum,
        tables.Tblevel.DataList[i].reviveNum.Count);
        for (var reviveNums = 0; reviveNums < tables.Tblevel.DataList[i].reviveNum.Count; reviveNums++)
        {
            allocatereviveNums[reviveNums] = (int2) math.round(tables.Tblevel.DataList[i].reviveNum[reviveNums]);
        }
        var allocatesuccesss =
        builder.Allocate(ref configTblevels[i].success,
        tables.Tblevel.DataList[i].success.Count);
        for (var successs = 0; successs < tables.Tblevel.DataList[i].success.Count; successs++)
        {
            allocatesuccesss[successs] = (int3) math.round(tables.Tblevel.DataList[i].success[successs]);
        }
        var allocatefails =
        builder.Allocate(ref configTblevels[i].fail,
        tables.Tblevel.DataList[i].fail.Count);
        for (var fails = 0; fails < tables.Tblevel.DataList[i].fail.Count; fails++)
        {
            allocatefails[fails] = (int3) math.round(tables.Tblevel.DataList[i].fail[fails]);
        }
        configTblevels[i].unlock = tables.Tblevel.DataList[i].unlock;
    }


    /// <summary>
    /// 关卡id
    /// </summary>
    public int id;
    /// <summary>
    /// 关卡类型
    /// </summary>
    public int type;
    /// <summary>
    /// 数字编号
    /// </summary>
    public FixedString128Bytes num;
    /// <summary>
    /// 场景id
    /// </summary>
    public int sceneId;
    /// <summary>
    ///  击杀掉落串
    /// </summary>
    public BlobArray<int> rewardDrop;    
    /// <summary>
    /// 生存掉落
    /// </summary>
    public BlobArray<int3> rewardTime;  
    /// <summary>
    /// 攻击力系数
    /// </summary>
    public int atk;
    /// <summary>
    /// 生命系数
    /// </summary>
    public int hp;
    /// <summary>
    /// 技能限制
    /// </summary>
    public BlobArray<int> skillGroupLimit;    
    /// <summary>
    /// 复活次数
    /// </summary>
    public BlobArray<int2> reviveNum;  
    /// <summary>
    /// 通关条件
    /// </summary>
    public BlobArray<int3> success;  
    /// <summary>
    /// 失败条件
    /// </summary>
    public BlobArray<int3> fail;  
    /// <summary>
    /// 解锁条件
    /// </summary>
    public int unlock;
}
}