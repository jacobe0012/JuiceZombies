//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbmonster
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbmonster> configTbmonsters,Tables tables)
    { 
        configTbmonsters[i].id = tables.Tbmonster.DataList[i].id;
        configTbmonsters[i].monsterAttrId = tables.Tbmonster.DataList[i].monsterAttrId;
        configTbmonsters[i].monsterWeaponId = tables.Tbmonster.DataList[i].monsterWeaponId;
        var allocatemonsterWeaponIndexs =
        builder.Allocate(ref configTbmonsters[i].monsterWeaponIndex,
        tables.Tbmonster.DataList[i].monsterWeaponIndex.Count);
        for (var monsterWeaponIndexs = 0; monsterWeaponIndexs < tables.Tbmonster.DataList[i].monsterWeaponIndex.Count; monsterWeaponIndexs++)
        {
            allocatemonsterWeaponIndexs[monsterWeaponIndexs] = tables.Tbmonster.DataList[i].monsterWeaponIndex[monsterWeaponIndexs];
        }
        configTbmonsters[i].monsterWeaponRunDisplay = tables.Tbmonster.DataList[i].monsterWeaponRunDisplay;
        var allocateskillGroups =
        builder.Allocate(ref configTbmonsters[i].skillGroup,
        tables.Tbmonster.DataList[i].skillGroup.Count);
        for (var skillGroups = 0; skillGroups < tables.Tbmonster.DataList[i].skillGroup.Count; skillGroups++)
        {
            allocateskillGroups[skillGroups] = tables.Tbmonster.DataList[i].skillGroup[skillGroups];
        }
        configTbmonsters[i].commonCd = tables.Tbmonster.DataList[i].commonCd;
        configTbmonsters[i].sceneBossId = tables.Tbmonster.DataList[i].sceneBossId;
        var allocatepassiveSkills =
        builder.Allocate(ref configTbmonsters[i].passiveSkill,
        tables.Tbmonster.DataList[i].passiveSkill.Count);
        for (var passiveSkills = 0; passiveSkills < tables.Tbmonster.DataList[i].passiveSkill.Count; passiveSkills++)
        {
            allocatepassiveSkills[passiveSkills] = tables.Tbmonster.DataList[i].passiveSkill[passiveSkills];
        }
        configTbmonsters[i].timeToDie = tables.Tbmonster.DataList[i].timeToDie;
    }


    /// <summary>
    /// 怪物id
    /// </summary>
    public int id;
    /// <summary>
    /// 怪物属性id
    /// </summary>
    public int monsterAttrId;
    /// <summary>
    /// 怪物武器id
    /// </summary>
    public int monsterWeaponId;
    /// <summary>
    /// 武器挂载坐标
    /// </summary>
    public BlobArray<int> monsterWeaponIndex;    
    /// <summary>
    /// 跑步中是否展示武器
    /// </summary>
    public int monsterWeaponRunDisplay;
    /// <summary>
    /// 技能列表
    /// </summary>
    public BlobArray<int> skillGroup;    
    /// <summary>
    /// 技能公共冷却
    /// </summary>
    public int commonCd;
    /// <summary>
    /// boss战场景
    /// </summary>
    public int sceneBossId;
    /// <summary>
    /// 被动技能列表
    /// </summary>
    public BlobArray<int> passiveSkill;    
    /// <summary>
    /// 自动死亡时间
    /// </summary>
    public int timeToDie;
}
}