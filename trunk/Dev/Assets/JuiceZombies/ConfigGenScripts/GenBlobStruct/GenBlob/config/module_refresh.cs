//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbmodule_refresh
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbmodule_refresh> configTbmodule_refreshs,Tables tables)
    { 
        configTbmodule_refreshs[i].id = tables.Tbmodule_refresh.DataList[i].id;
        configTbmodule_refreshs[i].group = tables.Tbmodule_refresh.DataList[i].group;
        configTbmodule_refreshs[i].power = tables.Tbmodule_refresh.DataList[i].power;
        configTbmodule_refreshs[i].sceneModule = tables.Tbmodule_refresh.DataList[i].sceneModule;
        configTbmodule_refreshs[i].type = tables.Tbmodule_refresh.DataList[i].type;
        var allocatecoordinates =
        builder.Allocate(ref configTbmodule_refreshs[i].coordinate,
        tables.Tbmodule_refresh.DataList[i].coordinate.Count);
        for (var coordinates = 0; coordinates < tables.Tbmodule_refresh.DataList[i].coordinate.Count; coordinates++)
        {
            allocatecoordinates[coordinates] = (int2) math.round(tables.Tbmodule_refresh.DataList[i].coordinate[coordinates]);
        }
        configTbmodule_refreshs[i].randType = tables.Tbmodule_refresh.DataList[i].randType;
        configTbmodule_refreshs[i].num = tables.Tbmodule_refresh.DataList[i].num;
        configTbmodule_refreshs[i].selfYn = tables.Tbmodule_refresh.DataList[i].selfYn;
        var allocateangleRanges =
        builder.Allocate(ref configTbmodule_refreshs[i].angleRange,
        tables.Tbmodule_refresh.DataList[i].angleRange.Count);
        for (var angleRanges = 0; angleRanges < tables.Tbmodule_refresh.DataList[i].angleRange.Count; angleRanges++)
        {
            allocateangleRanges[angleRanges] = tables.Tbmodule_refresh.DataList[i].angleRange[angleRanges];
        }
        configTbmodule_refreshs[i].pointRange = tables.Tbmodule_refresh.DataList[i].pointRange;
    }


    /// <summary>
    /// 刷新组id
    /// </summary>
    public int id;
    /// <summary>
    /// 组id
    /// </summary>
    public int group;
    /// <summary>
    /// 组内权重
    /// </summary>
    public int power;
    /// <summary>
    /// 组件id
    /// </summary>
    public int sceneModule;
    /// <summary>
    /// 刷新类型
    /// </summary>
    public int type;
    /// <summary>
    /// 起始坐标
    /// </summary>
    public BlobArray<int2> coordinate;  
    /// <summary>
    /// 随机生成类型
    /// </summary>
    public int randType;
    /// <summary>
    /// 数量
    /// </summary>
    public int num;
    /// <summary>
    /// 是否独占
    /// </summary>
    public int selfYn;
    /// <summary>
    /// 旋转角度区间
    /// </summary>
    public BlobArray<int> angleRange;    
    /// <summary>
    /// 点刷新间距
    /// </summary>
    public int pointRange;
}
}