//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbscene_boss
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbscene_boss> configTbscene_bosss,Tables tables)
    { 
        configTbscene_bosss[i].id = tables.Tbscene_boss.DataList[i].id;
        var allocateareaSizes =
        builder.Allocate(ref configTbscene_bosss[i].areaSize,
        tables.Tbscene_boss.DataList[i].areaSize.Count);
        for (var areaSizes = 0; areaSizes < tables.Tbscene_boss.DataList[i].areaSize.Count; areaSizes++)
        {
            allocateareaSizes[areaSizes] = tables.Tbscene_boss.DataList[i].areaSize[areaSizes];
        }
        configTbscene_bosss[i].edgeType = tables.Tbscene_boss.DataList[i].edgeType;
        configTbscene_bosss[i].edgeWidth = tables.Tbscene_boss.DataList[i].edgeWidth;
        var allocateedgeParas =
        builder.Allocate(ref configTbscene_bosss[i].edgePara,
        tables.Tbscene_boss.DataList[i].edgePara.Count);
        for (var edgeParas = 0; edgeParas < tables.Tbscene_boss.DataList[i].edgePara.Count; edgeParas++)
        {
            allocateedgeParas[edgeParas] = tables.Tbscene_boss.DataList[i].edgePara[edgeParas];
        }
        var allocateedgeModules =
        builder.Allocate(ref configTbscene_bosss[i].edgeModule,
        tables.Tbscene_boss.DataList[i].edgeModule.Count);
        for (var edgeModules = 0; edgeModules < tables.Tbscene_boss.DataList[i].edgeModule.Count; edgeModules++)
        {
            allocateedgeModules[edgeModules] = tables.Tbscene_boss.DataList[i].edgeModule[edgeModules];
        }
        var allocateeventGroups =
        builder.Allocate(ref configTbscene_bosss[i].eventGroup,
        tables.Tbscene_boss.DataList[i].eventGroup.Count);
        for (var eventGroups = 0; eventGroups < tables.Tbscene_boss.DataList[i].eventGroup.Count; eventGroups++)
        {
            allocateeventGroups[eventGroups] = tables.Tbscene_boss.DataList[i].eventGroup[eventGroups];
        }
        configTbscene_bosss[i].camera = tables.Tbscene_boss.DataList[i].camera;
        configTbscene_bosss[i].moduleTemplateId = tables.Tbscene_boss.DataList[i].moduleTemplateId;
        var allocatemoduleTemplateParas =
        builder.Allocate(ref configTbscene_bosss[i].moduleTemplatePara,
        tables.Tbscene_boss.DataList[i].moduleTemplatePara.Count);
        for (var moduleTemplateParas = 0; moduleTemplateParas < tables.Tbscene_boss.DataList[i].moduleTemplatePara.Count; moduleTemplateParas++)
        {
            allocatemoduleTemplateParas[moduleTemplateParas] = tables.Tbscene_boss.DataList[i].moduleTemplatePara[moduleTemplateParas];
        }
    }


    /// <summary>
    /// 刷新组id
    /// </summary>
    public int id;
    /// <summary>
    /// 战斗区域大小
    /// </summary>
    public BlobArray<int> areaSize;    
    /// <summary>
    /// 墙壁类型
    /// </summary>
    public int edgeType;
    /// <summary>
    /// 墙壁宽度
    /// </summary>
    public int edgeWidth;
    /// <summary>
    /// 墙壁参数
    /// </summary>
    public BlobArray<int> edgePara;    
    /// <summary>
    /// 边缘贴图(图片资源)
    /// </summary>
    public BlobArray<FixedString128Bytes> edgeModule;  
    /// <summary>
    /// 事件组
    /// </summary>
    public BlobArray<int> eventGroup;    
    /// <summary>
    /// 战斗摄像机高度
    /// </summary>
    public int camera;
    /// <summary>
    /// 组件模版id
    /// </summary>
    public int moduleTemplateId;
    /// <summary>
    /// 组件模版参数
    /// </summary>
    public BlobArray<int> moduleTemplatePara;    
}
}