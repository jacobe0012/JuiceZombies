//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbItem
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbItem> configTbItems,Tables tables)
    { 
        configTbItems[i].id = tables.TbItem.DataList[i].id;
        configTbItems[i].type = tables.TbItem.DataList[i].type;
        configTbItems[i].quality = tables.TbItem.DataList[i].quality;
        configTbItems[i].useYn = tables.TbItem.DataList[i].useYn;
        var allocateuseDrops =
        builder.Allocate(ref configTbItems[i].useDrop,
        tables.TbItem.DataList[i].useDrop.Count);
        for (var useDrops = 0; useDrops < tables.TbItem.DataList[i].useDrop.Count; useDrops++)
        {
            allocateuseDrops[useDrops] = (int3) math.round(tables.TbItem.DataList[i].useDrop[useDrops]);
        }
        configTbItems[i].pileYn = tables.TbItem.DataList[i].pileYn;
        configTbItems[i].name = tables.TbItem.DataList[i].name;
        configTbItems[i].desc = tables.TbItem.DataList[i].desc;
        var allocatedescValues =
        builder.Allocate(ref configTbItems[i].descValue,
        tables.TbItem.DataList[i].descValue.Count);
        for (var descValues = 0; descValues < tables.TbItem.DataList[i].descValue.Count; descValues++)
        {
            allocatedescValues[descValues] = tables.TbItem.DataList[i].descValue[descValues];
        }
        configTbItems[i].icon = tables.TbItem.DataList[i].icon;
        configTbItems[i].sort = tables.TbItem.DataList[i].sort;
    }


    /// <summary>
    /// ID
    /// </summary>
    public int id;
    /// <summary>
    /// 道具类型
    /// </summary>
    public int type;
    /// <summary>
    /// 道具品质
    /// </summary>
    public int quality;
    /// <summary>
    /// 可否使用
    /// </summary>
    public int useYn;
    /// <summary>
    /// 使用获得
    /// </summary>
    public BlobArray<int3> useDrop;  
    /// <summary>
    /// 可否堆叠
    /// </summary>
    public int pileYn;
    /// <summary>
    /// 名称
    /// </summary>
    public FixedString128Bytes name;
    /// <summary>
    /// 道具描述
    /// </summary>
    public FixedString128Bytes desc;
    /// <summary>
    /// 物品描述变量
    /// </summary>
    public BlobArray<int> descValue;    
    /// <summary>
    /// 图标
    /// </summary>
    public FixedString128Bytes icon;
    /// <summary>
    /// 排序
    /// </summary>
    public int sort;
}
}