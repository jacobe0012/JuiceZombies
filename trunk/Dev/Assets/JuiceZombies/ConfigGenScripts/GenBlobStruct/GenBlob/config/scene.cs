//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbscene
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbscene> configTbscenes,Tables tables)
    { 
        configTbscenes[i].id = tables.Tbscene.DataList[i].id;
        configTbscenes[i].mapId = tables.Tbscene.DataList[i].mapId;
        configTbscenes[i].moduleTemplateId = tables.Tbscene.DataList[i].moduleTemplateId;
        var allocatemoduleTemplateParas =
        builder.Allocate(ref configTbscenes[i].moduleTemplatePara,
        tables.Tbscene.DataList[i].moduleTemplatePara.Count);
        for (var moduleTemplateParas = 0; moduleTemplateParas < tables.Tbscene.DataList[i].moduleTemplatePara.Count; moduleTemplateParas++)
        {
            allocatemoduleTemplateParas[moduleTemplateParas] = tables.Tbscene.DataList[i].moduleTemplatePara[moduleTemplateParas];
        }
        configTbscenes[i].camera = tables.Tbscene.DataList[i].camera;
        var allocateanecdoteGroups =
        builder.Allocate(ref configTbscenes[i].anecdoteGroup,
        tables.Tbscene.DataList[i].anecdoteGroup.Count);
        for (var anecdoteGroups = 0; anecdoteGroups < tables.Tbscene.DataList[i].anecdoteGroup.Count; anecdoteGroups++)
        {
            allocateanecdoteGroups[anecdoteGroups] = tables.Tbscene.DataList[i].anecdoteGroup[anecdoteGroups];
        }
        var allocateenvironmentIds =
        builder.Allocate(ref configTbscenes[i].environmentId,
        tables.Tbscene.DataList[i].environmentId.Count);
        for (var environmentIds = 0; environmentIds < tables.Tbscene.DataList[i].environmentId.Count; environmentIds++)
        {
            allocateenvironmentIds[environmentIds] = tables.Tbscene.DataList[i].environmentId[environmentIds];
        }
        configTbscenes[i].monsterTemplateId = tables.Tbscene.DataList[i].monsterTemplateId;
        var allocatemonsterTemplateParas =
        builder.Allocate(ref configTbscenes[i].monsterTemplatePara,
        tables.Tbscene.DataList[i].monsterTemplatePara.Count);
        for (var monsterTemplateParas = 0; monsterTemplateParas < tables.Tbscene.DataList[i].monsterTemplatePara.Count; monsterTemplateParas++)
        {
            allocatemonsterTemplateParas[monsterTemplateParas] = tables.Tbscene.DataList[i].monsterTemplatePara[monsterTemplateParas];
        }
    }


    /// <summary>
    /// 场景id
    /// </summary>
    public int id;
    /// <summary>
    /// 地图id
    /// </summary>
    public int mapId;
    /// <summary>
    /// 组件模版id
    /// </summary>
    public int moduleTemplateId;
    /// <summary>
    /// 组件模版参数
    /// </summary>
    public BlobArray<int> moduleTemplatePara;    
    /// <summary>
    /// 摄像机初始高度
    /// </summary>
    public int camera;
    /// <summary>
    /// 轶事组
    /// </summary>
    public BlobArray<int> anecdoteGroup;    
    /// <summary>
    /// 环境id
    /// </summary>
    public BlobArray<int> environmentId;    
    /// <summary>
    /// 怪物刷新模板id
    /// </summary>
    public int monsterTemplateId;
    /// <summary>
    /// 怪物刷新模板参数
    /// </summary>
    public BlobArray<int> monsterTemplatePara;    
}
}