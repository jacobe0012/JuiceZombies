//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbspecial_effect
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbspecial_effect> configTbspecial_effects,Tables tables)
    { 
        configTbspecial_effects[i].id = tables.Tbspecial_effect.DataList[i].id;
        configTbspecial_effects[i].model = tables.Tbspecial_effect.DataList[i].model;
        configTbspecial_effects[i].type = tables.Tbspecial_effect.DataList[i].type;
        configTbspecial_effects[i].para1 = tables.Tbspecial_effect.DataList[i].para1;
        configTbspecial_effects[i].para2 = tables.Tbspecial_effect.DataList[i].para2;
        configTbspecial_effects[i].para3 = tables.Tbspecial_effect.DataList[i].para3;
        configTbspecial_effects[i].para4 = tables.Tbspecial_effect.DataList[i].para4;
        configTbspecial_effects[i].loopType = tables.Tbspecial_effect.DataList[i].loopType;
        var allocateloopExtraParas =
        builder.Allocate(ref configTbspecial_effects[i].loopExtraPara,
        tables.Tbspecial_effect.DataList[i].loopExtraPara.Count);
        for (var loopExtraParas = 0; loopExtraParas < tables.Tbspecial_effect.DataList[i].loopExtraPara.Count; loopExtraParas++)
        {
            allocateloopExtraParas[loopExtraParas] = (int3) math.round(tables.Tbspecial_effect.DataList[i].loopExtraPara[loopExtraParas]);
        }
        configTbspecial_effects[i].loopSpeed = tables.Tbspecial_effect.DataList[i].loopSpeed;
        configTbspecial_effects[i].sizeX = tables.Tbspecial_effect.DataList[i].sizeX;
        configTbspecial_effects[i].sizeY = tables.Tbspecial_effect.DataList[i].sizeY;
        configTbspecial_effects[i].zSort = tables.Tbspecial_effect.DataList[i].zSort;
        configTbspecial_effects[i].zIndex = tables.Tbspecial_effect.DataList[i].zIndex;
        configTbspecial_effects[i].drawType = tables.Tbspecial_effect.DataList[i].drawType;
        configTbspecial_effects[i].offset = tables.Tbspecial_effect.DataList[i].offset;
        var allocateoffsetParas =
        builder.Allocate(ref configTbspecial_effects[i].offsetPara,
        tables.Tbspecial_effect.DataList[i].offsetPara.Count);
        for (var offsetParas = 0; offsetParas < tables.Tbspecial_effect.DataList[i].offsetPara.Count; offsetParas++)
        {
            allocateoffsetParas[offsetParas] = tables.Tbspecial_effect.DataList[i].offsetPara[offsetParas];
        }
        configTbspecial_effects[i].nextId = tables.Tbspecial_effect.DataList[i].nextId;
        configTbspecial_effects[i].maxTime = tables.Tbspecial_effect.DataList[i].maxTime;
    }


    /// <summary>
    /// 特效id
    /// </summary>
    public int id;
    /// <summary>
    /// 特效名称
    /// </summary>
    public FixedString128Bytes model;
    /// <summary>
    /// 类型
    /// </summary>
    public int type;
    /// <summary>
    /// 特效类型参数1
    /// </summary>
    public int para1;
    /// <summary>
    /// 特效类型参数2
    /// </summary>
    public int para2;
    /// <summary>
    /// 特效类型参数3
    /// </summary>
    public int para3;
    /// <summary>
    /// 特效类型参数4
    /// </summary>
    public int para4;
    /// <summary>
    /// 循环类型
    /// </summary>
    public int loopType;
    /// <summary>
    /// 循环参数
    /// </summary>
    public BlobArray<int3> loopExtraPara;  
    /// <summary>
    /// 播放时间
    /// </summary>
    public int loopSpeed;
    /// <summary>
    /// 特效x
    /// </summary>
    public int sizeX;
    /// <summary>
    /// 特效y
    /// </summary>
    public int sizeY;
    /// <summary>
    /// 层级排序
    /// </summary>
    public int zSort;
    /// <summary>
    /// 层级
    /// </summary>
    public int zIndex;
    /// <summary>
    /// 拉伸类型
    /// </summary>
    public int drawType;
    /// <summary>
    /// 偏移类型
    /// </summary>
    public int offset;
    /// <summary>
    /// 偏移类型
    /// </summary>
    public BlobArray<int> offsetPara;    
    /// <summary>
    /// 继承特效
    /// </summary>
    public int nextId;
    /// <summary>
    /// 最长播放时长
    /// </summary>
    public int maxTime;
}
}