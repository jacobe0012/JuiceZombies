//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbskill_effectNew
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbskill_effectNew> configTbskill_effectNews,Tables tables)
    { 
        configTbskill_effectNews[i].id = tables.Tbskill_effectNew.DataList[i].id;
        configTbskill_effectNews[i].skillId = tables.Tbskill_effectNew.DataList[i].skillId;
        configTbskill_effectNews[i].elementId = tables.Tbskill_effectNew.DataList[i].elementId;
        var allocatebattleStatuss =
        builder.Allocate(ref configTbskill_effectNews[i].battleStatus,
        tables.Tbskill_effectNew.DataList[i].battleStatus.Count);
        for (var battleStatuss = 0; battleStatuss < tables.Tbskill_effectNew.DataList[i].battleStatus.Count; battleStatuss++)
        {
            allocatebattleStatuss[battleStatuss] = (int2) math.round(tables.Tbskill_effectNew.DataList[i].battleStatus[battleStatuss]);
        }
        configTbskill_effectNews[i].animation = tables.Tbskill_effectNew.DataList[i].animation;
        configTbskill_effectNews[i].animationSpeed = tables.Tbskill_effectNew.DataList[i].animationSpeed;
        var allocatespecialEffectss =
        builder.Allocate(ref configTbskill_effectNews[i].specialEffects,
        tables.Tbskill_effectNew.DataList[i].specialEffects.Count);
        for (var specialEffectss = 0; specialEffectss < tables.Tbskill_effectNew.DataList[i].specialEffects.Count; specialEffectss++)
        {
            allocatespecialEffectss[specialEffectss] = tables.Tbskill_effectNew.DataList[i].specialEffects[specialEffectss];
        }
        var allocateaudios =
        builder.Allocate(ref configTbskill_effectNews[i].audio,
        tables.Tbskill_effectNew.DataList[i].audio.Count);
        for (var audios = 0; audios < tables.Tbskill_effectNew.DataList[i].audio.Count; audios++)
        {
            allocateaudios[audios] = tables.Tbskill_effectNew.DataList[i].audio[audios];
        }
        var allocateaudioCloses =
        builder.Allocate(ref configTbskill_effectNews[i].audioClose,
        tables.Tbskill_effectNew.DataList[i].audioClose.Count);
        for (var audioCloses = 0; audioCloses < tables.Tbskill_effectNew.DataList[i].audioClose.Count; audioCloses++)
        {
            allocateaudioCloses[audioCloses] = tables.Tbskill_effectNew.DataList[i].audioClose[audioCloses];
        }
        configTbskill_effectNews[i].triggerType = tables.Tbskill_effectNew.DataList[i].triggerType;
        var allocatetriggerTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].triggerTypePara,
        tables.Tbskill_effectNew.DataList[i].triggerTypePara.Count);
        for (var triggerTypeParas = 0; triggerTypeParas < tables.Tbskill_effectNew.DataList[i].triggerTypePara.Count; triggerTypeParas++)
        {
            allocatetriggerTypeParas[triggerTypeParas] = tables.Tbskill_effectNew.DataList[i].triggerTypePara[triggerTypeParas];
        }
        configTbskill_effectNews[i].conditionType = tables.Tbskill_effectNew.DataList[i].conditionType;
        var allocateconditionTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].conditionTypePara,
        tables.Tbskill_effectNew.DataList[i].conditionTypePara.Count);
        for (var conditionTypeParas = 0; conditionTypeParas < tables.Tbskill_effectNew.DataList[i].conditionTypePara.Count; conditionTypeParas++)
        {
            allocateconditionTypeParas[conditionTypeParas] = tables.Tbskill_effectNew.DataList[i].conditionTypePara[conditionTypeParas];
        }
        configTbskill_effectNews[i].compareType = tables.Tbskill_effectNew.DataList[i].compareType;
        var allocatecompareTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].compareTypePara,
        tables.Tbskill_effectNew.DataList[i].compareTypePara.Count);
        for (var compareTypeParas = 0; compareTypeParas < tables.Tbskill_effectNew.DataList[i].compareTypePara.Count; compareTypeParas++)
        {
            allocatecompareTypeParas[compareTypeParas] = tables.Tbskill_effectNew.DataList[i].compareTypePara[compareTypeParas];
        }
        configTbskill_effectNews[i].delayType = tables.Tbskill_effectNew.DataList[i].delayType;
        var allocatedelayTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].delayTypePara,
        tables.Tbskill_effectNew.DataList[i].delayTypePara.Count);
        for (var delayTypeParas = 0; delayTypeParas < tables.Tbskill_effectNew.DataList[i].delayTypePara.Count; delayTypeParas++)
        {
            allocatedelayTypeParas[delayTypeParas] = tables.Tbskill_effectNew.DataList[i].delayTypePara[delayTypeParas];
        }
        configTbskill_effectNews[i].calcType = tables.Tbskill_effectNew.DataList[i].calcType;
        var allocatecalcTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].calcTypePara,
        tables.Tbskill_effectNew.DataList[i].calcTypePara.Count);
        for (var calcTypeParas = 0; calcTypeParas < tables.Tbskill_effectNew.DataList[i].calcTypePara.Count; calcTypeParas++)
        {
            allocatecalcTypeParas[calcTypeParas] = tables.Tbskill_effectNew.DataList[i].calcTypePara[calcTypeParas];
        }
        configTbskill_effectNews[i].extraType = tables.Tbskill_effectNew.DataList[i].extraType;
        var allocateextraTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].extraTypePara,
        tables.Tbskill_effectNew.DataList[i].extraTypePara.Count);
        for (var extraTypeParas = 0; extraTypeParas < tables.Tbskill_effectNew.DataList[i].extraTypePara.Count; extraTypeParas++)
        {
            allocateextraTypeParas[extraTypeParas] = tables.Tbskill_effectNew.DataList[i].extraTypePara[extraTypeParas];
        }
        configTbskill_effectNews[i].searchType = tables.Tbskill_effectNew.DataList[i].searchType;
        var allocatesearchTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].searchTypePara,
        tables.Tbskill_effectNew.DataList[i].searchTypePara.Count);
        for (var searchTypeParas = 0; searchTypeParas < tables.Tbskill_effectNew.DataList[i].searchTypePara.Count; searchTypeParas++)
        {
            allocatesearchTypeParas[searchTypeParas] = tables.Tbskill_effectNew.DataList[i].searchTypePara[searchTypeParas];
        }
        configTbskill_effectNews[i].rangeType = tables.Tbskill_effectNew.DataList[i].rangeType;
        var allocaterangeTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].rangeTypePara,
        tables.Tbskill_effectNew.DataList[i].rangeTypePara.Count);
        for (var rangeTypeParas = 0; rangeTypeParas < tables.Tbskill_effectNew.DataList[i].rangeTypePara.Count; rangeTypeParas++)
        {
            allocaterangeTypeParas[rangeTypeParas] = tables.Tbskill_effectNew.DataList[i].rangeTypePara[rangeTypeParas];
        }
        configTbskill_effectNews[i].deviateType = tables.Tbskill_effectNew.DataList[i].deviateType;
        var allocatedeviateTypeParas =
        builder.Allocate(ref configTbskill_effectNews[i].deviateTypePara,
        tables.Tbskill_effectNew.DataList[i].deviateTypePara.Count);
        for (var deviateTypeParas = 0; deviateTypeParas < tables.Tbskill_effectNew.DataList[i].deviateTypePara.Count; deviateTypeParas++)
        {
            allocatedeviateTypeParas[deviateTypeParas] = tables.Tbskill_effectNew.DataList[i].deviateTypePara[deviateTypeParas];
        }
        configTbskill_effectNews[i].target = tables.Tbskill_effectNew.DataList[i].target;
        var allocatetargetParas =
        builder.Allocate(ref configTbskill_effectNews[i].targetPara,
        tables.Tbskill_effectNew.DataList[i].targetPara.Count);
        for (var targetParas = 0; targetParas < tables.Tbskill_effectNew.DataList[i].targetPara.Count; targetParas++)
        {
            allocatetargetParas[targetParas] = tables.Tbskill_effectNew.DataList[i].targetPara[targetParas];
        }
        var allocateelementTriggers =
        builder.Allocate(ref configTbskill_effectNews[i].elementTrigger,
        tables.Tbskill_effectNew.DataList[i].elementTrigger.Count);
        for (var elementTriggers = 0; elementTriggers < tables.Tbskill_effectNew.DataList[i].elementTrigger.Count; elementTriggers++)
        {
            allocateelementTriggers[elementTriggers] = tables.Tbskill_effectNew.DataList[i].elementTrigger[elementTriggers];
        }
        var allocateelementLists =
        builder.Allocate(ref configTbskill_effectNews[i].elementList,
        tables.Tbskill_effectNew.DataList[i].elementList.Count);
        for (var elementLists = 0; elementLists < tables.Tbskill_effectNew.DataList[i].elementList.Count; elementLists++)
        {
            allocateelementLists[elementLists] = tables.Tbskill_effectNew.DataList[i].elementList[elementLists];
        }
        configTbskill_effectNews[i].power = tables.Tbskill_effectNew.DataList[i].power;
        configTbskill_effectNews[i].effectType = tables.Tbskill_effectNew.DataList[i].effectType;
        configTbskill_effectNews[i].attrId = tables.Tbskill_effectNew.DataList[i].attrId;
        var allocateattrIdParas =
        builder.Allocate(ref configTbskill_effectNews[i].attrIdPara,
        tables.Tbskill_effectNew.DataList[i].attrIdPara.Count);
        for (var attrIdParas = 0; attrIdParas < tables.Tbskill_effectNew.DataList[i].attrIdPara.Count; attrIdParas++)
        {
            allocateattrIdParas[attrIdParas] = tables.Tbskill_effectNew.DataList[i].attrIdPara[attrIdParas];
        }
        configTbskill_effectNews[i].targetLockOn = tables.Tbskill_effectNew.DataList[i].targetLockOn;
        var allocatetargetLockOnParas =
        builder.Allocate(ref configTbskill_effectNews[i].targetLockOnPara,
        tables.Tbskill_effectNew.DataList[i].targetLockOnPara.Count);
        for (var targetLockOnParas = 0; targetLockOnParas < tables.Tbskill_effectNew.DataList[i].targetLockOnPara.Count; targetLockOnParas++)
        {
            allocatetargetLockOnParas[targetLockOnParas] = tables.Tbskill_effectNew.DataList[i].targetLockOnPara[targetLockOnParas];
        }
    }


    /// <summary>
    /// 效果id
    /// </summary>
    public int id;
    /// <summary>
    /// 技能id
    /// </summary>
    public int skillId;
    /// <summary>
    /// 元素id
    /// </summary>
    public int elementId;
    /// <summary>
    /// 状态
    /// </summary>
    public BlobArray<int2> battleStatus;  
    /// <summary>
    /// 动画资源
    /// </summary>
    public FixedString128Bytes animation;
    /// <summary>
    /// 动画播放速率
    /// </summary>
    public int animationSpeed;
    /// <summary>
    /// 特效id
    /// </summary>
    public BlobArray<int> specialEffects;    
    /// <summary>
    /// 音效
    /// </summary>
    public BlobArray<int> audio;    
    /// <summary>
    /// 关闭音效
    /// </summary>
    public BlobArray<int> audioClose;    
    /// <summary>
    /// 触发效果类型
    /// </summary>
    public int triggerType;
    /// <summary>
    /// 触发效果类型参数
    /// </summary>
    public BlobArray<int> triggerTypePara;    
    /// <summary>
    /// 条件类型
    /// </summary>
    public int conditionType;
    /// <summary>
    /// 条件类型参数
    /// </summary>
    public BlobArray<int> conditionTypePara;    
    /// <summary>
    /// 比较类型
    /// </summary>
    public int compareType;
    /// <summary>
    /// 比较类型参数
    /// </summary>
    public BlobArray<int> compareTypePara;    
    /// <summary>
    /// 延迟类型
    /// </summary>
    public int delayType;
    /// <summary>
    /// 延迟类型参数
    /// </summary>
    public BlobArray<int> delayTypePara;    
    /// <summary>
    /// 计算类型
    /// </summary>
    public int calcType;
    /// <summary>
    /// 计算类型参数 
    /// </summary>
    public BlobArray<int> calcTypePara;    
    /// <summary>
    /// 额外类型
    /// </summary>
    public int extraType;
    /// <summary>
    /// 额外类型参数 
    /// </summary>
    public BlobArray<int> extraTypePara;    
    /// <summary>
    /// 索敌类型
    /// </summary>
    public int searchType;
    /// <summary>
    /// 索敌类型参数 
    /// </summary>
    public BlobArray<int> searchTypePara;    
    /// <summary>
    /// 范围类型
    /// </summary>
    public int rangeType;
    /// <summary>
    /// 范围类型参数 
    /// </summary>
    public BlobArray<int> rangeTypePara;    
    /// <summary>
    /// 偏移类型
    /// </summary>
    public int deviateType;
    /// <summary>
    /// 偏移类型参数 
    /// </summary>
    public BlobArray<int> deviateTypePara;    
    /// <summary>
    /// 作用对象
    /// </summary>
    public int target;
    /// <summary>
    /// 作用对象参数 
    /// </summary>
    public BlobArray<int> targetPara;    
    /// <summary>
    /// 自加的元素类触发器 
    /// </summary>
    public BlobArray<int> elementTrigger;    
    /// <summary>
    /// 元素列表
    /// </summary>
    public BlobArray<int> elementList;    
    /// <summary>
    /// 概率权重
    /// </summary>
    public int power;
    /// <summary>
    /// 效果类型
    /// </summary>
    public int effectType;
    /// <summary>
    /// 变更属性ID
    /// </summary>
    public int attrId;
    /// <summary>
    /// 变更属性ID参数值
    /// </summary>
    public BlobArray<int> attrIdPara;    
    /// <summary>
    /// 索敌目标
    /// </summary>
    public int targetLockOn;
    /// <summary>
    /// 索敌目标参数 
    /// </summary>
    public BlobArray<int> targetLockOnPara;    
}
}