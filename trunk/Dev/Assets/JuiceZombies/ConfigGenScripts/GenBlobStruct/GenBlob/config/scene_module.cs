//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;
using Unity.Collections;
using Unity.Entities;
using Unity.Mathematics;



namespace cfg.blobstruct{

public  struct ConfigTbscene_module
{
    public static void Create(int i,ref BlobBuilder builder,ref BlobBuilderArray<ConfigTbscene_module> configTbscene_modules,Tables tables)
    { 
        configTbscene_modules[i].id = tables.Tbscene_module.DataList[i].id;
        configTbscene_modules[i].type = tables.Tbscene_module.DataList[i].type;
        configTbscene_modules[i].elementId = tables.Tbscene_module.DataList[i].elementId;
        configTbscene_modules[i].refreshMonsterYn = tables.Tbscene_module.DataList[i].refreshMonsterYn;
        var allocateskillGroups =
        builder.Allocate(ref configTbscene_modules[i].skillGroup,
        tables.Tbscene_module.DataList[i].skillGroup.Count);
        for (var skillGroups = 0; skillGroups < tables.Tbscene_module.DataList[i].skillGroup.Count; skillGroups++)
        {
            allocateskillGroups[skillGroups] = tables.Tbscene_module.DataList[i].skillGroup[skillGroups];
        }
        configTbscene_modules[i].displayOrder = tables.Tbscene_module.DataList[i].displayOrder;
        configTbscene_modules[i].pathPriority = tables.Tbscene_module.DataList[i].pathPriority;
        configTbscene_modules[i].hp = tables.Tbscene_module.DataList[i].hp;
        configTbscene_modules[i].duration = tables.Tbscene_module.DataList[i].duration;
        var allocatehpPics =
        builder.Allocate(ref configTbscene_modules[i].hpPic,
        tables.Tbscene_module.DataList[i].hpPic.Count);
        for (var hpPics = 0; hpPics < tables.Tbscene_module.DataList[i].hpPic.Count; hpPics++)
        {
            allocatehpPics[hpPics] = (int2) math.round(tables.Tbscene_module.DataList[i].hpPic[hpPics]);
        }
        var allocatebattleDrops =
        builder.Allocate(ref configTbscene_modules[i].battleDrop,
        tables.Tbscene_module.DataList[i].battleDrop.Count);
        for (var battleDrops = 0; battleDrops < tables.Tbscene_module.DataList[i].battleDrop.Count; battleDrops++)
        {
            allocatebattleDrops[battleDrops] = tables.Tbscene_module.DataList[i].battleDrop[battleDrops];
        }
        var allocatehitAnimationParas =
        builder.Allocate(ref configTbscene_modules[i].hitAnimationPara,
        tables.Tbscene_module.DataList[i].hitAnimationPara.Count);
        for (var hitAnimationParas = 0; hitAnimationParas < tables.Tbscene_module.DataList[i].hitAnimationPara.Count; hitAnimationParas++)
        {
            allocatehitAnimationParas[hitAnimationParas] = tables.Tbscene_module.DataList[i].hitAnimationPara[hitAnimationParas];
        }
        var allocatepicHitAnimationParas =
        builder.Allocate(ref configTbscene_modules[i].picHitAnimationPara,
        tables.Tbscene_module.DataList[i].picHitAnimationPara.Count);
        for (var picHitAnimationParas = 0; picHitAnimationParas < tables.Tbscene_module.DataList[i].picHitAnimationPara.Count; picHitAnimationParas++)
        {
            allocatepicHitAnimationParas[picHitAnimationParas] = tables.Tbscene_module.DataList[i].picHitAnimationPara[picHitAnimationParas];
        }
        configTbscene_modules[i].impactSpeedRatio = tables.Tbscene_module.DataList[i].impactSpeedRatio;
        configTbscene_modules[i].impactDamageRatio = tables.Tbscene_module.DataList[i].impactDamageRatio;
        configTbscene_modules[i].mass = tables.Tbscene_module.DataList[i].mass;
        configTbscene_modules[i].mapType = tables.Tbscene_module.DataList[i].mapType;
        configTbscene_modules[i].edgeWidth = tables.Tbscene_module.DataList[i].edgeWidth;
        configTbscene_modules[i].model = tables.Tbscene_module.DataList[i].model;
        var allocatesizes =
        builder.Allocate(ref configTbscene_modules[i].size,
        tables.Tbscene_module.DataList[i].size.Count);
        for (var sizes = 0; sizes < tables.Tbscene_module.DataList[i].size.Count; sizes++)
        {
            allocatesizes[sizes] = tables.Tbscene_module.DataList[i].size[sizes];
        }
        var allocatebgUps =
        builder.Allocate(ref configTbscene_modules[i].bgUp,
        tables.Tbscene_module.DataList[i].bgUp.Count);
        for (var bgUps = 0; bgUps < tables.Tbscene_module.DataList[i].bgUp.Count; bgUps++)
        {
            allocatebgUps[bgUps] = tables.Tbscene_module.DataList[i].bgUp[bgUps];
        }
        var allocatebgDowns =
        builder.Allocate(ref configTbscene_modules[i].bgDown,
        tables.Tbscene_module.DataList[i].bgDown.Count);
        for (var bgDowns = 0; bgDowns < tables.Tbscene_module.DataList[i].bgDown.Count; bgDowns++)
        {
            allocatebgDowns[bgDowns] = tables.Tbscene_module.DataList[i].bgDown[bgDowns];
        }
        var allocatebgLefts =
        builder.Allocate(ref configTbscene_modules[i].bgLeft,
        tables.Tbscene_module.DataList[i].bgLeft.Count);
        for (var bgLefts = 0; bgLefts < tables.Tbscene_module.DataList[i].bgLeft.Count; bgLefts++)
        {
            allocatebgLefts[bgLefts] = tables.Tbscene_module.DataList[i].bgLeft[bgLefts];
        }
        var allocatebgRights =
        builder.Allocate(ref configTbscene_modules[i].bgRight,
        tables.Tbscene_module.DataList[i].bgRight.Count);
        for (var bgRights = 0; bgRights < tables.Tbscene_module.DataList[i].bgRight.Count; bgRights++)
        {
            allocatebgRights[bgRights] = tables.Tbscene_module.DataList[i].bgRight[bgRights];
        }
        configTbscene_modules[i].passAnimation = tables.Tbscene_module.DataList[i].passAnimation;
        configTbscene_modules[i].passSpeed = tables.Tbscene_module.DataList[i].passSpeed;
        var allocateruinResources =
        builder.Allocate(ref configTbscene_modules[i].ruinResource,
        tables.Tbscene_module.DataList[i].ruinResource.Count);
        for (var ruinResources = 0; ruinResources < tables.Tbscene_module.DataList[i].ruinResource.Count; ruinResources++)
        {
            allocateruinResources[ruinResources] = tables.Tbscene_module.DataList[i].ruinResource[ruinResources];
        }
        configTbscene_modules[i].disappearTime = tables.Tbscene_module.DataList[i].disappearTime;
    }


    /// <summary>
    /// id
    /// </summary>
    public int id;
    /// <summary>
    /// 组件类型
    /// </summary>
    public int type;
    /// <summary>
    /// 元素id
    /// </summary>
    public int elementId;
    /// <summary>
    /// 是否允许怪物刷新
    /// </summary>
    public int refreshMonsterYn;
    /// <summary>
    /// 技能组
    /// </summary>
    public BlobArray<int> skillGroup;    
    /// <summary>
    /// 展示层级
    /// </summary>
    public int displayOrder;
    /// <summary>
    /// 寻路优先级
    /// </summary>
    public int pathPriority;
    /// <summary>
    /// 生命值
    /// </summary>
    public int hp;
    /// <summary>
    /// 持续时间
    /// </summary>
    public int duration;
    /// <summary>
    /// 低生命时图片顺序
    /// </summary>
    public BlobArray<int2> hpPic;  
    /// <summary>
    /// 障碍物掉落
    /// </summary>
    public BlobArray<int> battleDrop;    
    /// <summary>
    /// 抖动参数
    /// </summary>
    public BlobArray<int> hitAnimationPara;    
    /// <summary>
    /// 图片切换时抖动
    /// </summary>
    public BlobArray<int> picHitAnimationPara;    
    /// <summary>
    /// 碰撞反弹速度比例
    /// </summary>
    public int impactSpeedRatio;
    /// <summary>
    /// 碰撞伤害比例
    /// </summary>
    public int impactDamageRatio;
    /// <summary>
    /// 质量
    /// </summary>
    public int mass;
    /// <summary>
    /// 地图类型
    /// </summary>
    public int mapType;
    /// <summary>
    /// 边缘宽度
    /// </summary>
    public int edgeWidth;
    /// <summary>
    /// 图片(图片资源)
    /// </summary>
    public FixedString128Bytes model;
    /// <summary>
    /// 尺寸
    /// </summary>
    public BlobArray<int> size;    
    /// <summary>
    /// 背景图-上(图片资源)
    /// </summary>
    public BlobArray<FixedString128Bytes> bgUp;  
    /// <summary>
    /// 背景图-下(图片资源)
    /// </summary>
    public BlobArray<FixedString128Bytes> bgDown;  
    /// <summary>
    /// 背景图-左(图片资源)
    /// </summary>
    public BlobArray<FixedString128Bytes> bgLeft;  
    /// <summary>
    /// 背景图-右(图片资源)
    /// </summary>
    public BlobArray<FixedString128Bytes> bgRight;  
    /// <summary>
    /// 通过动画
    /// </summary>
    public FixedString128Bytes passAnimation;
    /// <summary>
    /// 通过动画速率
    /// </summary>
    public int passSpeed;
    /// <summary>
    /// 命中资源
    /// </summary>
    public BlobArray<FixedString128Bytes> ruinResource;  
    /// <summary>
    /// 消失时间
    /// </summary>
    public int disappearTime;
}
}